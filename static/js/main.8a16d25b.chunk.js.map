{"version":3,"sources":["Resources/vertex.svg","Resources/edge.svg","Resources/specialisation.svg","Resources/visibility.svg","Resources/select.svg","Resources/artifact.svg","Resources/container.svg","Resources/create_folder.svg","Resources/delete_folder.svg","Resources/changeFolderName.svg","Resources/NewModel.svg","Resources/DeleteModel.svg","Resources/editModel.svg","DataStructures/SemanticIdentity.js","DataStructures/Vertex.js","DataStructures/ArrowProperties.js","DataStructures/Cardinality.js","DataStructures/EdgeEnd.js","UIElements/LeftMenu.js","UIElements/CanvasDraw.js","DataStructures/Arrow.js","DataStructures/Graph.js","UIElements/SemanticDomainEditor.js","Serialisation/FileManager.js","UIElements/Canvas.js","UIElements/MainView.js","UIElements/ContainmentTree.js","UIElements/ContextMenu.js","App.js","ServiceWorker.js","index.js"],"names":["module","exports","SemanticIdentity","name","description","abbreviation","shortAbbreviation","UUID","translations","this","typeName","undefined","replace","c","crypto","getRandomValues","Uint8Array","toString","padding","Vertex","title","content","x","y","width","height","semanticIdentity","icon","icons","colour","selected","imageElements","fontSize","realHeight","Math","max","isAbstract","vertexPath","vertexModelKey","getCurrentModel","vertexRenderKey","getModelRenderKey","renderedx","renderedy","awayx","floor","random","awayy","status","key","path","mergedContent","i","length","concat","fileName","fileNames","Icons","Text","index","indexOf","push","splice","text","side","canvasContext","ex","ey","pad","hasContent","iconAreaHeight","contentHeight","draw","possibleWidth","iconListLen","increaseWidthIfNecessary","measureText","is","font","measuredNameText","maxWidth","measuredText","shadowOffsetX","shadowOffsetY","fillStyle","fillRect","strokeRect","drawMarker","yPos","xPos","loadImage","imageElement","sh","sw","scale","drawImage","iconPadding","iconHeight","element","Image","src","crossOrigin","onload","dy","txPos","tyPos","slice","fillText","strokeStyle","cursorX","cursorY","getNearestSide","sides","xPercentage","abs","yPercentage","goodSide","forEach","distanceThreshold","rightDist","topDist","leftDist","closestIndex","closestDistance","distArrays","shortest","EdgeEnd","EdgeEndToString","StringToEdgeEnd","LineColour","LineColourToStringName","StringNameToLineColour","LineType","LineTypeToString","StringToLineType","Cardinality","lowerBound","upperBound","attachedToUUID","isVisible","numLowerBound","numUpperBound","getDescription","lower","upper","value","headType","ArrowProps","cardinality","label","edgeEndRenderKey","getCurrentRenderKey","edgeEndModelKey","type","visibility","points","strokeColour","fillColour","beginPath","moveTo","X","Y","lineTo","closePath","fill","stroke","angle","lineColour","angleFromLine","PI","angleInverted","arrowPoints","cos","sin","drawLines","sideLength","deg30","trianglePoints","deg20","diamondPoints","drawArrowEnd","drawTriangleEnd","drawDiamondEnd","console","log","newType","LeftMenuType","TreeView","Arrow","Artifact","Container","LeftMenuTypeToString","StringToLeftMenuType","canvasElement","mouseStartX","mouseStartY","previousObject","mouseOriginX","mouseOriginY","canvasWidth","canvasHeight","Tool","Select","Visibility","Edge","Specialisation","LeftMenu","props","testUpdateLabel","setPath","getVertexColour","state","selectedObject","getColour","setVertexColour","setColour","hex","canvasDraw","getMenu","leftMenuContents","toolbar","id","className","onClick","setMode","iconSelect","alt","onKeyDown","onKeyPressed","iconVertex","iconArtifact","iconContainer","iconEdge","iconSpecialisation","iconVisibility","menu","setLeftMenu","defaultValue","onKeyUp","setTitle","getContentAsString","setContent","getS23MIconsSelector","getColourPicker","defaultChecked","getAbstract","toggleAbstract","deselectElement","sourceUUIDs","currentObjects","ArrowUUIDSource","destUUIDs","ArrowUUIDDest","remove","arrow","error","drawAll","vertexDeleteElement","setState","placeholder","deleteElement","edgeType","getNavigable","setNavigable","getAggregation","setAggregation","onChange","getSourceCardinalityVisibility","toggleSourceCardinalityVisibility","getSourceCardinalityLowerBound","min","updateCardinality","getSourceCardinalityUpperBound","getDestCardinalityVisibility","toggleDestCardinalityVisibility","getDestCardinalityLowerBound","getDestCardinalityUpperBound","sourceEdgeEnd","setStartLabel","destEdgeEnd","setEndLabel","e","stripElement","ref","setFormRef","bind","formRef","setIcons","mainState","selectedItem","drawMode","document","addEventListener","keyCode","nextProps","nextContext","prevProps","prevState","snapshot","elem","getElementById","activeElement","select","click","leftMenu","preventDefault","fetch","method","headers","then","res","json","data","newTitle","newContent","split","newLineType","setLineType","newColour","setLineColour","newLabel","sourceLowerBound","sourceUpperBound","currentSourceVisibility","destLowerBound","destUpperBound","currentDestVisibility","updateSourceCardinality","updateDestCardinality","dropdownOptions","disabled","shouldIconBeSelected","setIcon","shouldTextBeSelected","setText","DropdownButton","color","onChangeComplete","presetColors","isTextSet","isIconSet","toggleNavigable","checked","toggleAggregation","SourceAggregation","DestAggregation","trimPath","reset","React","Component","objectsList","pathData","sourceVertexUUID","destVertexUUID","updateAttachedVertices","rebuildPath","lineType","sourceIsNavigable","destIsNavigable","sourceIsAggregation","destIsAggregation","arrowModelKey","arrowRenderKey","connectedObjectUUIDs","getObjectUUIDList","objects","pathItem","getZerothCasePathItem","output","item","pathStart","pathEnd","toggleVisibility","val","vertex","nodeIndex","d","topLeft","top","topRight","right","bottomRight","bottom","bottomLeft","left","vertexNodes","lineAngle","atan2","getSY","getNSY","getSX","getNSX","getEY","getNEY","getEX","getNEX","startIndex","endIndex","indexSx","indexEx","indexSy","indexEy","sourceText","destText","sourceCtext","destCtext","sxOffset","syOffset","exOffset","eyOffset","sxOffsetc","syOffsetc","exOffsetc","eyOffsetc","sourceTextWidth","destTextWidth","sourceCtextWidth","destCtextWidth","charWidth","sxFlip","syFlip","exFlip","eyFlip","E1index","E2index","startLRArrow","isPathSegmentLR","endLRArrow","SSX","SSY","SEX","SEY","ESX","ESY","EEX","EEY","sourceCardText","destCardText","Offsets","getTextOffsets","setLineDash","from","to","drawStartHead","drawEndHead","drawLabelsAndCardinalities","pos","cx","cy","intersectsSegment","getDistance","VertexNode","children","Set","cleanObjectPath","getModelName","vertexObjectPath","node","add","traversedVertices","isRemoved","has","delete","child","recursive","getVertexNode","flattenedArray","childNode","flatten","flattenVertexNodes","returnOption","parsedRenderKey","parsedModelKey","ArrowChildren","VertexChildren","getRenderKey","getModelKey","setVertexTreePath","tempTreeObj","renderkey","modelkey","opened","finalString","ourSourceEnd","ourDestEnd","textSource","textDest","j","someObject","treeAppearanceSwitches","arrowIcon","folderTitle","treePath","ArrowEdge","flattenedVertexNodes","updateVertices","sourceVertexNodeObject","destVertexNodeObject","isSourceFound","isDestFound","vertexNode","Graph","vertexArrayFlattened","arrowArrayFlattened","rootVertices","arrows","Array","isArray","object","constructor","addVertex","addArrow","getArrowEdge","destVertexNode","sourceVertexNode","isAnotherRoot","sourceVertex","returnArray","destVertex","newobject","isEquivalentArrow","isArrowWithSameSource","isEquivalentSource","isEquivalentDest","removeFromChildren","rootNode","arrowEdge","doFlattenVertices","doFlattenArrows","verticesSet","arrowsSet","yRows","zoom","savedArrows","currentRenderKey","totalRenderKeys","currentModel","totalModels","setNewRenderKey","newKey","getTotalRenderKeys","incrementTotalRenderKeys","setNewModel","newModel","getTotalModels","incrementTotalModels","arrowPath","lastX","lastY","resizing","arrowType","firstArrowJoint","cancelDraw","past_location","past_size","blockBeenSelected","nameElement","resetMouseOrigin","canvasRect","getBoundingClientRect","canvasContainer","getElementsByClassName","styleHeight","getComputedStyle","getPropertyValue","styleWidth","setAttribute","getEffectiveZoom","recalculateScale","clearCanvas","updateArrows","resetTransform","findNearestGridY","slotHeight","checkResizeBounds","currentObjectsFlattened","bounds","getBounds","x1","y1","x2","y2","inYBounds","inXBounds","getConnectionDataForArrow","nearest","nearestDistance","sideData","getNearestSideFrom","coordinate","coord","snapped","lastPathX","lastPathY","relAngle","l","angles","nearestAngle","nearestRad","xv","yv","getSelectedObject","canvas","resizeObjectOnMouseMove","resizeVars","coords","getGraphXYFromMouseEvent","expandSide","conData","StickArrowToObject","updateA","addObject","arrowToolSelected","getObjectFromUUID","foundObject","connectionData","onLeftMousePress","tool","saveBlockStates","onmousemove","intersection","findIntersected","cDist","nearestPointIndex","nearestArrow","point","hypot","findNearestArrowPointIndex","func","moveArrowPointOnMouseMove","removeEventListener","onMouseMove","compareSizesToMoveAll","Object","objectID","box","verticalArray","horizontalArray","boxArray","collectMehBox","boxes","bigbox","arrangeboxesandarrows","b","collectsidebox","arrangeboxesandarrowshorizontal","onLeftMouseRelease","secondObject","newObject","createObject","first","second","upBoxes","upArrows","downBoxes","downArrows","leftBoxes","leftArrows","rightBoxes","rightArrows","bigBox","smallBox","shiftBoxes","orderCoordinates","vy1","vy2","createArtifact","createContainer","position","globalAlpha","onMiddleClick","savedObjects","shiftDown","friendObject","arrowsVert","arrowsHoriz","ObjectsToCheck","nextObjects","n","newfriendObject","nf","of","p","F","S","saveDisX","saveDisY","moveObject","friends","k","solidifyObject","setZoom","newZoom","xpos","ypos","oldLineWidth","lineWidth","oldStrokeStyle","oldFillStyle","arc","sqrt","pow","intersects","newPath","clientX","clientY","sx","sy","rows","setRows","setColumns","textInput","createRef","translationColumns","onSave","workbook","xlsx","writeBuffer","buffer","saveAs","Blob","getRowId","row","styles","input","container","selector","StartEditActionSelector","withStyles","defaultAction","changeAction","classes","Grid","alignItems","Typography","target","OutlinedInput","labelWidth","margin","MenuItem","SelectTextChecker","isSelectText","changeSelectText","FormControlLabel","control","Checkbox","EditPropsPanel","FocusableCell","restProps","Cell","tabIndex","onFocus","useState","createColumns","columns","setColumnsRet","columnName","editingEnabled","editingStateColumnExtensions","generatedRows","setRowsRet","wordWrapEnabled","tableColumnExtensions","startEditAction","setStartEditAction","selectTextOnEditStart","setSelectTextOnEditStart","exporterRef","useRef","startExport","useCallback","current","exportGrid","Paper","InputGroup","FormControl","aria-label","aria-describedby","Append","Button","variant","updateColumns","addColumn","removeColumn","onCommitChanges","changedRows","added","changed","deleted","startingAddedId","map","o","updateChangedObject","updateChangedObjects","deletedSet","filter","columnExtensions","cellComponent","getRowForObject","translation","columnNames","set","save","JSONdata","vertexObjects","arrowObjects","version","vertices","getSaveData","dataStr","JSON","stringify","DLelement","createElement","dataFile","href","URL","createObjectURL","download","body","appendChild","rebuildObject","verticesArray","open","jsonString","newObjects","newColumns","loadedJSON","parse","newVertices","newArrows","serialisedVertex","serialisedArrow","alert","selectMultiple","selectDown","Canvas","ocm","mouseDown","startX","startY","shiftKey","button","ctrlKey","foundEnd","ob","mouseUp","window","setTimeout","CollideCount","canvasRef","zoomLevel","onContextMenu","onMouseDown","onMouseUp","onMouseLeave","mouseLeave","folderName","MainProgramClass","updateFolderName","addFolder","a","handleAddFolder","getSelectedFolderKey","setLeftMenuToTree","deleteFolder","handleDeleteFolder","editFolderName","handleRenameFolder","addModel","handleAddModel","deleteModel","handleDeleteModel","editModelName","handleRenameModel","cZoom","setModelName","modelName","showFile","File","FileReader","FileList","file","querySelector","files","reader","readAsText","fileManager","result","toggleSemanticDomainState","semanticTableEnabled","newRows","resetRows","theObject","div","SelectedTool","style","backgroundColor","currentlySelectedObject","showingVertPath","someVertexPath","mode","nearestObject","ctrl","OP","setSelected","None","SemanticDomainEditor","size","Dropdown","Item","confirm","location","reload","toDataURL","iconNewFolder","iconDeleteFolder","iconEditFolder","iconNewModel","iconDeleteModel","iconEditModel","readonly","treeData","folderData","folderDataRoot","selectedFolderKey","decoyFolderData","modelObjects","decoyModelObjects","folderAltered","setSelectedFolderKey","getFolderData","loadFirstModel","renderKey","modelKey","setPresent","setAway","find","folder","model","parentKey","tempFolderThing","NaN","parentRenderKey","folderThing2","selectedRenderKey","deleteFolderChildren","selectedFolder","folderChildren","deleteModelChildren","selectedModel","verticesFolder","v","newName","rKey","decoyModelThing","tempModelThing","selectedModelKey","mKey","determineOwnership","vertexOrArrow","determineSubFolders","initialFolderAdded","ContainmentTree","canvasItems","subFolderItems","combinedItems","toTreeViewElement","core","root","selectedVertex","highestLevel","nextLevel","vertexOrEdge","actualObject","cont","treeDat","original","handleElementSelect","rightClickedItem","rightClickedItemKey","menuType","ContextMenu","showMenu","handleClick","includes","newFolderKey","newRkey","handleModelRebase","parseInt","handleKey","handleContextMenu","pageX","pageY","renderedOutput","App","elementID","Boolean","hostname","match","ReactDOM","render","StrictMode","getContext","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8a16d25b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vertex.4937cefd.svg\";","module.exports = __webpack_public_path__ + \"static/media/edge.09e9d9dc.svg\";","module.exports = __webpack_public_path__ + \"static/media/specialisation.3320bc80.svg\";","module.exports = __webpack_public_path__ + \"static/media/visibility.5452d398.svg\";","module.exports = __webpack_public_path__ + \"static/media/select.8b3cad47.svg\";","module.exports = __webpack_public_path__ + \"static/media/artifact.91473c28.svg\";","module.exports = __webpack_public_path__ + \"static/media/container.ddecd459.svg\";","module.exports = __webpack_public_path__ + \"static/media/create_folder.5ddfbbc9.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete_folder.ccd4d6e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/changeFolderName.d6c49e9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/NewModel.5f359781.svg\";","module.exports = __webpack_public_path__ + \"static/media/DeleteModel.8ff04828.svg\";","module.exports = __webpack_public_path__ + \"static/media/editModel.0c58ce6e.svg\";","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nexport function createUUID() {\r\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\r\n        // eslint-disable-next-line\r\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\r\n    );\r\n}\r\n\r\nexport class SemanticIdentity {\r\n    constructor(name, description, abbreviation, shortAbbreviation, UUID, translations){\r\n        this.typeName = \"SemanticIdentity\";\r\n        \r\n        if (UUID !== undefined){\r\n            this.UUID = UUID;\r\n        } else {\r\n            this.UUID = createUUID();\r\n        }\r\n\r\n        this.name = name;\r\n        this.description = description;\r\n        this.abbreviation = abbreviation;\r\n        this.shortAbbreviation = shortAbbreviation;\r\n\r\n        if (translations !== undefined){\r\n            this.translations = translations;\r\n        } else {\r\n            this.translations = [];\r\n        }\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { drawMarker, distanceThreshold, getCurrentRenderKey, getCurrentModel } from \"../UIElements/CanvasDraw\";\r\nimport { getModelRenderKey } from \"../UIElements/ContainmentTree\";\r\nimport { SemanticIdentity } from \"./SemanticIdentity\";\r\n\r\nexport var padding = 5;\r\nexport var defaultColour = \"#FFD5A9\";\r\nexport var defaultMinimumSize = 30;\r\n\r\nexport class Vertex {\r\n\r\n    constructor(title = \"unnamed\", content, x, y, width, height, semanticIdentity) {\r\n        this.typeName = \"Vertex\";\r\n\r\n        if (semanticIdentity !== undefined){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            this.semanticIdentity = new SemanticIdentity(title,\"\",\"\",\"\", undefined ,[]);\r\n        }\r\n\r\n        this.title = title;\r\n        this.icon = \"&#8414\";\r\n        this.content = content;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.icons = [[],[],[]];\r\n        this.colour = defaultColour;\r\n        this.selected = false;\r\n        this.imageElements = {};\r\n        this.fontSize = 12;\r\n\r\n        // Note these values often change in runtime\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.realHeight = height;\r\n\r\n        // Make sure width and height meet a reasonable minimum\r\n        this.width = Math.max(width, defaultMinimumSize);\r\n        this.height = Math.max(height, defaultMinimumSize);\r\n\r\n        this.isAbstract = false;\r\n\r\n        //Store the path to your given vertex here\r\n        this.vertexPath = \"\";\r\n\r\n        // USed to decide where to render the object\r\n        this.vertexModelKey = getCurrentModel();\r\n\r\n        // Used to decide where the object goes in the tree\r\n        this.vertexRenderKey = getModelRenderKey(this.vertexModelKey);\r\n\r\n\r\n        // Used for moving vertices out of the way when they're not being rendered to prevent invisible overlap\r\n        this.renderedx = x;\r\n        this.renderedy = y;\r\n\r\n        this.awayx = Math.floor(Math.random() * 2000000)+100000;\r\n        this.awayy = Math.floor(Math.random() * 2000000)+100000;\r\n\r\n        this.status = \"present\"\r\n        \r\n    }\r\n\r\n    // Save a vertice's proper x and y coordinate for later rendering and then send the vertex somewhere else\r\n    setAway(){\r\n        if (this.status === \"present\"){\r\n            this.renderedx = this.x;\r\n            this.renderedy = this.y;\r\n\r\n            this.x = this.awayx;\r\n            this.y = this.awayy;\r\n\r\n            this.status = \"away\"\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    setPresent(){\r\n\r\n        if (this.status === \"away\"){\r\n            this.x = this.renderedx;\r\n            this.y = this.renderedy;\r\n\r\n            this.status = \"present\"\r\n        }\r\n        \r\n    }\r\n\r\n    setModelKey(key){\r\n        this.vertexModelKey = key;\r\n    }\r\n\r\n    getModelKey(){\r\n        return this.vertexModelKey;\r\n    }\r\n\r\n    // Set the render key. Done in ContainmentTree.js\r\n    setRenderKey(key){\r\n        this.vertexRenderKey = key;\r\n    }\r\n\r\n    // Get the render key. Called in CanvasDraw.js\r\n    getRenderKey(){\r\n        return this.vertexRenderKey;\r\n    }\r\n\r\n    setPath(path){\r\n        this.vertexPath = path;\r\n    }\r\n\r\n    getPath(){\r\n        return this.vertexPath;\r\n    }\r\n\r\n    setSelected(selected) {\r\n        this.selected = selected;\r\n    }\r\n\r\n    getColour(){\r\n        return this.colour\r\n    }\r\n\r\n    setColour(colour){\r\n        this.colour = colour;\r\n    }\r\n\r\n    setTitle(title) {\r\n        this.title = title;\r\n        this.semanticIdentity.name = title;\r\n    }\r\n\r\n    setContent(content) {\r\n        this.content = content;\r\n        this.semanticIdentity.description = content;\r\n    }\r\n\r\n    getAbstract(){\r\n        return this.isAbstract\r\n    }\r\n\r\n    toggleAbstract(){\r\n        this.isAbstract = !this.isAbstract\r\n    }\r\n\r\n    getContentAsString() {\r\n        if (this.content !== null) {\r\n            let mergedContent = \"\";\r\n            \r\n            for (let i = 0; i < this.content.length; i++) {\r\n                mergedContent = mergedContent.concat(this.content[i]);\r\n                if (i < this.content.length - 1) {\r\n                    mergedContent = mergedContent.concat(\"\\n\");\r\n                }\r\n            }\r\n            \r\n            return mergedContent;\r\n\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    setIcon(fileName) {\r\n        let fileNames = this.icons[0];\r\n        let Icons = this.icons[1];\r\n        let Text = this.icons[2];\r\n\r\n        let index = fileNames.indexOf(fileName);\r\n\r\n        //icon not part of this vertex yet\r\n        if (index === -1) {\r\n            fileNames.push(fileName);\r\n            Icons.push(true);\r\n            Text.push(false);\r\n\r\n        } else {\r\n            Icons[index] = !Icons[index]\r\n        }\r\n\r\n        if (Text[index] === false && Icons[index] === false) {\r\n            Icons.splice(index,1);\r\n            Text.splice(index,1);\r\n            fileNames.splice(index,1);\r\n        }\r\n\r\n    }\r\n\r\n    setText(fileName) {\r\n        let fileNames = this.icons[0];\r\n        let icons = this.icons[1];\r\n        let text = this.icons[2];\r\n\r\n        let index = fileNames.indexOf(fileName);\r\n\r\n        //icon not part of this vertex yet\r\n        if (index === -1) {\r\n            fileNames.push(fileName);\r\n            icons.push(false);\r\n            text.push(true);\r\n\r\n        } else {\r\n            text[index] = !text[index]\r\n        }\r\n\r\n        if (text[index] === false && icons[index] === false) {\r\n            icons.splice(index,1);\r\n            text.splice(index,1);\r\n            fileNames.splice(index,1);\r\n        }\r\n\r\n    }\r\n\r\n    isIconSet(fileName) {\r\n        let index = this.icons[0].indexOf(fileName);\r\n        if (index === -1) {\r\n            return false;\r\n        }\r\n        return this.icons[1][index];\r\n    }\r\n\r\n    isTextSet(fileName) {\r\n            let index = this.icons[0].indexOf(fileName);\r\n            if (index === -1) {\r\n                return false;\r\n            } else {\r\n                return this.icons[2][index];\r\n            }\r\n    }\r\n\r\n    getBounds() {\r\n        return [this.x, this.y, this.x+this.width, this.y+this.realHeight-padding];\r\n    }\r\n\r\n    expandSide(side, x, y,canvasContext) {\r\n        let ex = 0;\r\n        let ey = 0;\r\n\r\n        let pad = (this.hasContent() ? padding*4 : padding*2);\r\n\r\n        switch (side) {\r\n            case \"topLeft\":\r\n                ey += this.y + this.height;\r\n                this.y = y;\r\n                this.height = ey-this.y;\r\n                ex += this.x + this.width;\r\n                this.x = x;\r\n                this.width = ex-this.x;\r\n                break;\r\n\r\n            case \"topRight\":\r\n                ey += this.y + this.height;\r\n                this.y = y;\r\n                this.height = ey-this.y;\r\n                this.width = x-this.x;\r\n                break;\r\n\r\n            case \"bottomLeft\":\r\n\r\n                this.height = y-this.y  - this.iconAreaHeight - this.contentHeight - pad;\r\n                ex += this.x + this.width;\r\n                this.x = x;\r\n                this.width = ex-this.x;\r\n                break;\r\n\r\n            case \"bottomRight\":\r\n\r\n                this.height = y - this.y - this.iconAreaHeight - this.contentHeight - pad;\r\n                this.width = x-this.x;\r\n                break;\r\n\r\n            case \"left\":\r\n                ex += this.x + this.width;\r\n                this.x = x;\r\n                this.width = ex-this.x;\r\n                break;\r\n\r\n            case \"right\":\r\n                this.width = x-this.x;\r\n                break;\r\n\r\n            case \"top\":\r\n                ey += this.y + this.height;\r\n                this.y = y;\r\n                this.height = ey-this.y;\r\n                break;\r\n\r\n            case \"bottom\":\r\n                this.height = y-this.y  - this.iconAreaHeight - this.contentHeight - pad;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        this.height = Math.max(this.height,12+padding);\r\n        this.draw(canvasContext)\r\n    }\r\n\r\n\r\n    increaseWidthIfNecessary(canvasContext, possibleWidth) {\r\n        if (possibleWidth > this.width) {\r\n            this.width = possibleWidth;\r\n        }\r\n\r\n    }\r\n\r\n    hasContent() {\r\n        return !(this.content[0] === \"\" && this.content.length === 1)\r\n    }\r\n\r\n\r\n    draw(canvasContext) {\r\n\r\n        // Icon height in px\r\n        let iconHeight = 20;\r\n        let iconPadding = 2;\r\n        let iconListLen = this.icons[0].length;\r\n\r\n        // check for width increases\r\n        for (let i = 0; i < this.icons[0].length; i++) {\r\n\r\n            if (this.icons[1][i] === true) {\r\n                if (this.icons[2][i] === true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, iconHeight + canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n            }else{\r\n                if (this.icons[2][i] === true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n            }\r\n        }\r\n        this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.title).width);\r\n\r\n        for (let i = 0; i < this.content.length; i++) {\r\n            this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.content[i]).width + padding*2);\r\n        }\r\n\r\n        // Font size\r\n        padding = 5;\r\n        // Set font settings\r\n        if(this.is)\r\n        canvasContext.font = this.fontSize+\"px Segoe UI\";\r\n        canvasContext.fontSize = this.fontSize;\r\n\r\n\r\n        // Find the maximum width of text and size the class accordingly\r\n        let measuredNameText = canvasContext.measureText(this.title).width;\r\n        let maxWidth = Math.max(measuredNameText + padding*2, this.width);\r\n        this.contentHeight = 0;\r\n\r\n        // Iterate over all content text lines\r\n        for (let i = 0; i < this.content.length; i++) {\r\n            let measuredText = canvasContext.measureText(this.content[i]);\r\n            maxWidth = Math.max(maxWidth, measuredText.width, measuredNameText);\r\n            this.contentHeight += this.fontSize+padding;\r\n        }\r\n\r\n        if(!this.hasContent()){\r\n            this.contentHeight = 0\r\n        }\r\n\r\n        if (maxWidth > this.width) {\r\n            this.width = maxWidth\r\n        }\r\n\r\n        // Configure drawing for shadows\r\n        // And generally make it look nice\r\n        canvasContext.shadowOffsetX = 2.0; canvasContext.shadowOffsetY = 2.0;\r\n\r\n\r\n        this.iconAreaHeight = (iconHeight + (iconPadding * 2)) * iconListLen;\r\n\r\n        // Update rect height\r\n        // Use this to force text to fit\r\n        if (this.content[0] !== \"\") {\r\n            this.realHeight = padding * 4 + this.height + this.iconAreaHeight + this.contentHeight;\r\n        }else{\r\n            this.realHeight = padding * 2 + this.height + this.iconAreaHeight\r\n        }\r\n\r\n        // Draw rect\r\n        canvasContext.fillStyle = this.colour;\r\n        canvasContext.fillRect(this.x, this.y, this.width, this.realHeight);\r\n        canvasContext.strokeRect(this.x, this.y, this.width, this.realHeight);\r\n\r\n        if (this.content[0] !== \"\") {\r\n            canvasContext.strokeRect(this.x, this.y, this.width, this.height+this.iconAreaHeight+padding*2);\r\n        }\r\n\r\n        // Draw selected markers if rect is selected\r\n        if (this.selected) {\r\n            canvasContext.fillStyle = \"#000000\";\r\n            drawMarker(this.x, this.y);\r\n            drawMarker(this.x+this.width, this.y);\r\n            drawMarker(this.x, this.y+this.realHeight);\r\n            drawMarker(this.x+this.width, this.y+this.realHeight);\r\n        }\r\n\r\n        // Draw Icons by filename\r\n        let yPos = this.y + iconPadding;\r\n        let xPos = this.x + this.width + iconPadding;\r\n\r\n        function loadImage(imageElement) {\r\n            let sh = imageElement.height;\r\n            let sw = imageElement.width;\r\n            let scale = iconHeight / sh;\r\n            canvasContext.drawImage(imageElement, xPos-(iconPadding*2)-(sw*scale), yPos, sw * scale, sh * scale);\r\n            yPos += iconHeight + (iconPadding * 2); // What's the point of this line? yPos should be out of scope when this method is run\r\n\r\n        }\r\n\r\n        for (let i = 0; i < this.icons[0].length; i++) {\r\n\r\n            if (this.icons[1][i] === true) {\r\n                if (this.icons[2][i] === true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, iconHeight + canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n\r\n                let element = this.imageElements[this.icons[0][i]];\r\n\r\n                if (element === undefined) {\r\n\r\n                    let imageElement = new Image();\r\n                    imageElement.src = \"http://localhost:8080/icons/\" + this.icons[0][i];\r\n                    imageElement.crossOrigin = \"anonymous\";\r\n\r\n                    imageElement.onload = () => {\r\n                        loadImage(imageElement);\r\n                        this.imageElements[this.icons[0][i]] = imageElement\r\n                    };\r\n                } else {\r\n                    loadImage(element)\r\n                }\r\n            } else {\r\n                yPos += iconHeight + (iconPadding * 2);\r\n            }\r\n        }\r\n\r\n        // Reset color for text\r\n        canvasContext.fillStyle = \"#000000\";\r\n\r\n        // Draw Height for text that will be increased to draw downward\r\n        let dy = padding+this.fontSize;\r\n\r\n        // Disable shadows for text\r\n        canvasContext.shadowOffsetX = 0.0; canvasContext.shadowOffsetY = 0.0;\r\n\r\n        let txPos = this.x + iconPadding;\r\n        let tyPos = this.y + iconHeight;\r\n\r\n        for (let i = 0; i < this.icons[0].length; i++) {\r\n            if (this.icons[2][i] === true) {\r\n                if (this.icons[1][i] !== true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n\r\n                let name = \"<< \" + this.icons[0][i].slice(0, -4) + \" >>\";\r\n                if (this.icons[0][i].slice(-6, -4) === \"_n\") {\r\n                    name = \"\";\r\n                }\r\n\r\n                canvasContext.fillText(name, txPos, tyPos);\r\n            }\r\n            tyPos += iconHeight + (iconPadding * 2);\r\n        }\r\n\r\n        // Draw name\r\n        this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.title).width);\r\n\r\n        if(this.isAbstract) {\r\n            canvasContext.font = \"italic \" + this.fontSize + \"px Segoe UI\";\r\n        }else{\r\n            canvasContext.font = this.fontSize + \"px Segoe UI\";\r\n        }\r\n\r\n        canvasContext.fillText(this.title, this.x+padding, this.y+dy+this.iconAreaHeight);\r\n        dy = padding*2 +this.height + this.contentHeight;\r\n\r\n        canvasContext.font = this.fontSize+\"px Segoe UI\";\r\n\r\n        // Draw text\r\n        for (let i = 0; i < this.content.length; i++) {\r\n            this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.content[i]).width + padding*2);\r\n            canvasContext.fillText(this.content[i], this.x+padding, this.y+dy+this.iconAreaHeight);\r\n            dy += this.fontSize + padding;\r\n        }\r\n\r\n        canvasContext.strokeStyle = \"black\"\r\n    }\r\n\r\n    // Checks if it intersects with point\r\n    intersects(x, y) {\r\n        if (x < this.x) return false;\r\n        if (y < this.y) return false;\r\n        if (x > this.x+this.width) return false;\r\n        return y <= this.y + this.height;\r\n\r\n    }\r\n\r\n    // Gets the nearest side, in Arrow compatible x,y percentage values\r\n    // Also returns a threshold distance\r\n    // Parameters are the cursor X and Y coordinates\r\n    // Return value:\r\n    //      [threshold, xRel, yRel]\r\n    //\r\n    // If threshold is -1, xRel and yRel are equal to cursorX, cursorY\r\n    // This only happens when cursor shouldn't connect to vertex\r\n    getNearestSideFrom(cursorX, cursorY) {\r\n\r\n        // Else\r\n        return this.getNearestSide(cursorX, cursorY);\r\n    }\r\n\r\n    getNearestSide(cursorX, cursorY) {\r\n        // Create possibilities\r\n        let sides = [];\r\n\r\n        // If can connect to top/bottom\r\n        if (cursorX > this.x && cursorX < this.x+this.width) {\r\n            //console.log(\"success\");\r\n            let xPercentage = (cursorX-this.x)/this.width;\r\n\r\n            sides.push([Math.abs(cursorY-(this.y)), xPercentage, 0]);\r\n            sides.push([Math.abs(cursorY-(this.y+this.realHeight)), xPercentage, 1]);\r\n        }\r\n\r\n        // If can connect to left/right\r\n        else if (cursorY > this.y && cursorY < this.y+(this.realHeight)) {\r\n            //console.log(\"success\");\r\n            let yPercentage = (cursorY-this.y)/(this.realHeight);\r\n\r\n            sides.push([Math.abs(cursorX-(this.x)), 0, yPercentage]);\r\n            sides.push([Math.abs(cursorX-(this.x+this.width)), 1, yPercentage]);\r\n        }\r\n\r\n        // Can't connect\r\n\r\n        let goodSide = false;\r\n\r\n        sides.forEach((side) => {\r\n            if(side[0] < distanceThreshold){\r\n                goodSide = true;\r\n            }\r\n        });\r\n\r\n        if(goodSide === false && cursorX > this.x && cursorX < this.x + this.width && cursorY > this.y && cursorY < this.y+this.realHeight){\r\n                // click was inside the vertex but not in tolerance\r\n                //console.log(\"trying things\")\r\n                let yPercentage = (cursorY-this.y)/(this.realHeight);\r\n                let xPercentage = (cursorX-this.x)/this.width;\r\n\r\n                // find closest side\r\n                let rightDist = Math.abs(xPercentage-1)*this.width;\r\n                let topDist = yPercentage*this.realHeight;\r\n                let leftDist = xPercentage*this.width;\r\n                let bottomDist = yPercentage*this.realHeight;\r\n\r\n                let closestIndex = 0;\r\n                let closestDistance = leftDist;\r\n                let distArrays = [leftDist,rightDist,topDist,bottomDist];\r\n\r\n                // no need to go through leftDist here as its already set as shortest\r\n                for(let i = 1; i< distArrays.length-1; i++){\r\n                    if(distArrays[i] < closestDistance){\r\n                        closestDistance = distArrays[i];\r\n                        closestIndex = i;\r\n                    }\r\n                }\r\n\r\n                if ( closestIndex === 0 ){\r\n                    return [0, 0, yPercentage]\r\n                }\r\n                if ( closestIndex === 1 ){\r\n                    return [0, 1, yPercentage]\r\n                }\r\n                if ( closestIndex === 2 ){\r\n                    return [0, xPercentage, 0]\r\n                }\r\n                if ( closestIndex === 3 ){\r\n                    return [0, xPercentage, 1]\r\n                }\r\n        }\r\n\r\n        if(sides.length === 0){\r\n            return null\r\n        }\r\n\r\n        // Return side with shortest distance\r\n        let shortest = sides[0];\r\n        for (let i = 1; i < sides.length; i++) {\r\n            if (sides[i][0] < shortest[0]) {\r\n                shortest = sides[i];\r\n            }\r\n        }\r\n        return shortest;\r\n    }\r\n\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\n //EDGE ENDS\r\nexport const EdgeEnd = {\r\n    NONE: \"None\",\r\n    ARROW: \"Arrow\",\r\n    TRIANGLE: \"Triangle\",\r\n    FILLED_TRIANGLE: \"Filled Triangle\",\r\n    DIAMOND: \"Diamond\",\r\n    FILLED_DIAMOND: \"Filled Diamond\"\r\n};\r\n\r\nexport const EdgeEndToString = {};\r\nEdgeEndToString[EdgeEnd.NONE] = \"None\";\r\nEdgeEndToString[EdgeEnd.ARROW] = \"Arrow\";\r\nEdgeEndToString[EdgeEnd.TRIANGLE] = \"Triangle\";\r\nEdgeEndToString[EdgeEnd.FILLED_TRIANGLE] = \"FilledTriangle\";\r\nEdgeEndToString[EdgeEnd.DIAMOND] = \"Diamond\";\r\nEdgeEndToString[EdgeEnd.FILLED_DIAMOND] = \"FilledDiamond\";\r\n\r\nexport const StringToEdgeEnd = {};\r\nStringToEdgeEnd[\"None\"] = EdgeEnd.NONE;\r\nStringToEdgeEnd[\"Arrow\"] = EdgeEnd.ARROW;\r\nStringToEdgeEnd[\"Triangle\"] = EdgeEnd.TRIANGLE;\r\nStringToEdgeEnd[\"FilledTriangle\"] = EdgeEnd.FILLED_TRIANGLE;\r\nStringToEdgeEnd[\"Diamond\"] = EdgeEnd.DIAMOND;\r\nStringToEdgeEnd[\"FilledDiamond\"] = EdgeEnd.FILLED_DIAMOND;\r\n\r\n//LINE COLOURS\r\nexport const LineColour = {\r\n    BLACK: \"#000000\",\r\n    RED: \"#FF0000\",\r\n    BLUE: \"#0000FF\",\r\n    GREEN: \"#00FF00\"\r\n};\r\n\r\nexport const LineColourToStringName = {};\r\nLineColourToStringName[LineColour.BLACK] = \"Black\";\r\nLineColourToStringName[LineColour.RED] = \"Red\";\r\nLineColourToStringName[LineColour.BLUE] = \"Blue\";\r\nLineColourToStringName[LineColour.GREEN] = \"Green\";\r\n\r\nexport const StringNameToLineColour = {};\r\nStringNameToLineColour[\"Black\"] = LineColour.BLACK;\r\nStringNameToLineColour[\"Red\"] = LineColour.RED;\r\nStringNameToLineColour[\"Blue\"] = LineColour.BLUE;\r\nStringNameToLineColour[\"Green\"] = LineColour.GREEN;\r\n\r\n//LINE TYPES\r\nexport const LineType = {\r\n    SOLID: 1,\r\n    DASHED: 2\r\n};\r\n\r\nexport const LineTypeToString = {};\r\nLineTypeToString[LineType.SOLID] = \"Solid\";\r\nLineTypeToString[LineType.DASHED] = \"Dashed\";\r\n\r\nexport const StringToLineType = {};\r\nStringToLineType[\"Solid\"] = LineType.SOLID;\r\nStringToLineType[\"Dashed\"] = LineType.DASHED;","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { SemanticIdentity } from \"./SemanticIdentity\";\r\n\r\nexport class Cardinality {\r\n    constructor(lowerBound, upperBound, attachedToUUID, isVisible = false, semanticIdentity) {\r\n        this.typeName = \"Cardinality\";\r\n        \r\n        this.numLowerBound = lowerBound;\r\n        this.numUpperBound = upperBound;\r\n        this.attachedToUUID = attachedToUUID;\r\n        this.isVisible = isVisible;\r\n\r\n        if (semanticIdentity !== undefined){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            this.semanticIdentity = new SemanticIdentity(this.toString(), this.getDescription())\r\n        }\r\n    }\r\n\r\n    set lowerBound(value){\r\n        this.numLowerBound = value;\r\n        this.semanticIdentity.name = this.toString();\r\n    }\r\n\r\n    get lowerBound(){\r\n        return this.numLowerBound;\r\n    }\r\n\r\n    set upperBound(value){\r\n        this.numUpperBound = value;\r\n        this.semanticIdentity.name = this.toString();\r\n    }\r\n\r\n    get upperBound(){\r\n        return this.numUpperBound;\r\n    }\r\n\r\n    toggleVisibility() {\r\n        this.isVisible = !this.isVisible;\r\n    }\r\n\r\n    toString() {\r\n        var lower;\r\n        var upper;\r\n\r\n        if (this.lowerBound === '-1') {\r\n            lower = 'n'\r\n        } else {\r\n            lower = this.lowerBound;\r\n        }\r\n\r\n        if (this.upperBound === '-1') {\r\n            upper = 'n'\r\n        } else {\r\n            upper = this.upperBound;\r\n        }\r\n\r\n        if (lower === upper) {\r\n            return lower;\r\n        } else {\r\n            return lower + \" .. \" + upper\r\n        }\r\n    }\r\n\r\n    getDescription(){\r\n        return `Cardinality of Edge End ${this.attachedToUUID}`;\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { SemanticIdentity } from \"./SemanticIdentity\";\r\nimport { Cardinality } from \"./Cardinality\";\r\nimport * as ArrowProps from \"./ArrowProperties\";\r\nimport { getCurrentModel, getCurrentRenderKey } from \"../UIElements/CanvasDraw\";\r\n\r\n\r\n// Object that contains all the parts of an arrow ending including:\r\n// Head type\r\n// Cardinality\r\n// Label\r\n//\r\n// Used in the Arrow class\r\nexport class EdgeEnd {\r\n    constructor(attachedToUUID, headType = ArrowProps.EdgeEnd.NONE, cardinality, label = \"\", semanticIdentity) {\r\n        this.attachedToUUID = attachedToUUID;\r\n        this.typeName = \"EdgeEnd\";\r\n\r\n        if (semanticIdentity !== undefined){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            this.semanticIdentity = new SemanticIdentity(this.toString(), this.getDescription())\r\n        }\r\n        \r\n        this.headType = headType;\r\n        \r\n        if (cardinality !== undefined){\r\n            this.cardinality = cardinality;\r\n        } else {\r\n            this.cardinality = new Cardinality(1, 1, this.semanticIdentity.UUID);\r\n        }\r\n\r\n        this.label = label;\r\n\r\n        // For deciding where it goes in the graph\r\n        this.edgeEndRenderKey = getCurrentRenderKey();\r\n\r\n        // For rendering the object\r\n        this.edgeEndModelKey = getCurrentModel();\r\n    }\r\n\r\n    // Set the model key\r\n    setModelKey(key){\r\n        this.edgeEndModelKey = key;\r\n    }\r\n\r\n    // Return the model key\r\n    getModelKey(){\r\n        return this.edgeEndModelKey;\r\n    }\r\n\r\n    // Set the render key. Done in ContainmentTree.js\r\n    setRenderKey(key){\r\n        this.edgeEndRenderKey = key;\r\n    }\r\n\r\n    // Return the render key. Done in CanvasDraw.js\r\n    getRenderKey(key){\r\n        return this.edgeEndRenderKey;\r\n    }\r\n\r\n    set type(newType){\r\n        this.headType = newType;\r\n        this.semanticIdentity.name = this.toString();\r\n    }\r\n\r\n    get type(){\r\n        return this.headType;\r\n    }\r\n\r\n    toString(){\r\n        return `${this.type} type Edge End`;\r\n    }\r\n\r\n    getDescription(){\r\n        return `Edge end of ${this.attachedToUUID}`;\r\n    }\r\n\r\n    updateCardinality(lowerBound, upperBound, visibility){\r\n        this.cardinality.lowerBound = lowerBound;\r\n        this.cardinality.upperBound = upperBound;\r\n        this.cardinality.visibility = visibility;\r\n    }\r\n\r\n    drawLines(canvasContext, points, strokeColour, fillColour) {\r\n        canvasContext.strokeStyle = strokeColour;\r\n        if (fillColour !== undefined) {\r\n            canvasContext.fillStyle = fillColour;\r\n        }\r\n\r\n        canvasContext.beginPath();\r\n        canvasContext.moveTo(points[0].X, points[0].Y);\r\n        for (let i = 1; i < points.length; i++) {\r\n            canvasContext.lineTo(points[i].X, points[i].Y)\r\n        }\r\n        \r\n        if (fillColour !== undefined) {\r\n            canvasContext.closePath();\r\n            canvasContext.fill();\r\n        }\r\n        canvasContext.stroke();\r\n\r\n        canvasContext.fillStyle = \"#000\"\r\n        canvasContext.strokeStyle = \"#000\";\r\n    }\r\n\r\n    drawArrowEnd(canvasContext, x, y, angle, lineColour) {\r\n        //Constants\r\n        const strokeLength = 7;\r\n        const angleFromLine = Math.PI/6;\r\n        const angleInverted = angle + Math.PI;\r\n\r\n        //Generate points for the arrowhead\r\n        var arrowPoints = [];\r\n        arrowPoints.push({\r\n            X: x + strokeLength * Math.cos(angleInverted - angleFromLine),\r\n            Y: y + strokeLength * Math.sin(angleInverted - angleFromLine)\r\n        });\r\n        arrowPoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n        arrowPoints.push({\r\n            X: x + strokeLength * Math.cos(angleInverted + angleFromLine),\r\n            Y: y + strokeLength * Math.sin(angleInverted + angleFromLine)\r\n        });\r\n\r\n        //Arrowhead drawing\r\n        this.drawLines(canvasContext, arrowPoints, lineColour)\r\n    }\r\n\r\n    drawTriangleEnd(canvasContext, x, y, angle, lineColour, fillColour = \"#FFF\") {\r\n        //Constants\r\n        const sideLength = 7;\r\n        const deg30 = Math.PI / 6;\r\n        const angleInverted = angle + Math.PI;\r\n\r\n        //Generate points for the triangle\r\n        var trianglePoints = [];\r\n        trianglePoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n        trianglePoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted - deg30),\r\n            Y: y + sideLength * Math.sin(angleInverted - deg30)\r\n        });\r\n        trianglePoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted + deg30),\r\n            Y: y + sideLength * Math.sin(angleInverted + deg30)\r\n        });\r\n        trianglePoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n\r\n        //Triangle drawing\r\n        this.drawLines(canvasContext, trianglePoints, lineColour, fillColour);\r\n    }\r\n\r\n    drawDiamondEnd(canvasContext, x, y, angle, lineColour, fillColour = \"#FFF\") {\r\n        //Constants\r\n        const sideLength = 7;\r\n        const deg20 = Math.PI / 9;\r\n        const angleInverted = angle + Math.PI;\r\n\r\n        //Generate points for the diamond\r\n        var diamondPoints = [];\r\n        diamondPoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n        diamondPoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted - deg20),\r\n            Y: y + sideLength * Math.sin(angleInverted - deg20)\r\n        });\r\n        diamondPoints.push({\r\n            X: x + sideLength * 2 * Math.cos(angleInverted),\r\n            Y: y + sideLength * 2 * Math.sin(angleInverted)\r\n        });\r\n        diamondPoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted + deg20),\r\n            Y: y + sideLength * Math.sin(angleInverted + deg20)\r\n        });\r\n        diamondPoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n\r\n        //Diamond drawing\r\n        this.drawLines(canvasContext, diamondPoints, lineColour, fillColour);\r\n    }\r\n\r\n    draw(canvasContext, x, y, angle, lineColour){\r\n        switch (this.type) {\r\n            case ArrowProps.EdgeEnd.NONE:\r\n                break;\r\n            case ArrowProps.EdgeEnd.ARROW:\r\n                this.drawArrowEnd(canvasContext, x, y, angle, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.TRIANGLE:\r\n                this.drawTriangleEnd(canvasContext, x, y, angle, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.FILLED_TRIANGLE:\r\n                this.drawTriangleEnd(canvasContext, x, y, angle, lineColour, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.DIAMOND:\r\n                this.drawDiamondEnd(canvasContext, x, y, angle, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.FILLED_DIAMOND:\r\n                this.drawDiamondEnd(canvasContext, x, y, angle, lineColour, lineColour);\r\n                break;\r\n            default:\r\n                console.log(\"EdgeEnd had unexpected type: %s\", this.type);\r\n        }\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\nimport * as canvasDraw from \"./CanvasDraw\";\r\nimport {LineColourToStringName, LineTypeToString} from \"../DataStructures/ArrowProperties\"\r\nimport { ContainmentTree } from \"./ContainmentTree\";\r\n\r\nimport { SketchPicker } from 'react-color';\r\n\r\n// Icons\r\nimport iconVertex from \"../Resources/vertex.svg\";\r\nimport iconEdge from \"../Resources/edge.svg\";\r\nimport iconSpecialisation from \"../Resources/specialisation.svg\";\r\nimport iconVisibility from \"../Resources/visibility.svg\"\r\nimport iconSelect from \"../Resources/select.svg\"\r\nimport iconArtifact from \"../Resources/artifact.svg\"\r\nimport iconContainer from \"../Resources/container.svg\"\r\n\r\n\r\nimport {deleteElement} from \"./CanvasDraw\";\r\nimport { vertexDeleteElement } from './CanvasDraw';\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport {displayFocussedTreeView} from \"./ContainmentTree.js\"\r\n\r\n// Show the vertex path\r\nimport {showVertexPath} from \"./ContainmentTree.js\";\r\n\r\n// The variable that contains the found path of a given vertex\r\nimport { someVertexPath } from './ContainmentTree';\r\n\r\n//Property Enums\r\nexport const LeftMenuType = {\r\n    TreeView: \"TreeView\",\r\n    Vertex: \"Vertex\",\r\n    Arrow: \"Arrow\",\r\n\r\n    //FTreeView: \"FocussedTreeView\"\r\n\r\n    Artifact: \"Artifact\",\r\n    Container:\"Container\"\r\n\r\n};\r\n\r\nexport const LeftMenuTypeToString = {};\r\nLeftMenuTypeToString[LeftMenuType.TreeView] = \"TreeView\";\r\nLeftMenuTypeToString[LeftMenuType.Vertex] = \"Vertex\";\r\nLeftMenuTypeToString[LeftMenuType.Arrow] = \"Arrow\";\r\nLeftMenuTypeToString[LeftMenuType.Arrow] = \"Artifact\";\r\nLeftMenuTypeToString[LeftMenuType.Arrow] = \"Container\";\r\n\r\nexport const StringToLeftMenuType = {};\r\nLeftMenuTypeToString[\"TreeView\"] = LeftMenuType.TreeView;\r\nLeftMenuTypeToString[\"Vertex\"] = LeftMenuType.Vertex;\r\nLeftMenuTypeToString[\"Arrow\"] = LeftMenuType.Arrow;\r\nLeftMenuTypeToString[\"Artifact\"] = LeftMenuType.Artifact;\r\nLeftMenuTypeToString[\"Container\"] = LeftMenuType.Container;\r\n\r\nexport const Tool = {\r\n    Select: \"Select\",\r\n    Vertex: \"Vertex\",\r\n    Visibility: \"Visibility\",\r\n    Edge: \"Edge\",\r\n    Specialisation: \"Specialisation\",\r\n    Artifact: \"Artifact\",\r\n    Container: \"Container\",\r\n};\r\n\r\n// class to display the left hand menu, where we will be showing\r\n// object editing tools for now\r\nexport class LeftMenu extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            menu: LeftMenuType.TreeView,\r\n            selectedObject: null,\r\n            fileNames: []\r\n        };\r\n        this.setTitle = this.setTitle.bind(this);\r\n        this.setContent = this.setContent.bind(this);\r\n\r\n        this.formRef = null;\r\n\r\n        this.setFormRef = element =>{\r\n            this.formRef = element;\r\n        };\r\n\r\n        this.setIcons();\r\n\r\n    }\r\n\r\n    /*\r\n    leftMenuContents = <form id = \"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.title} onKeyUp={() => this.setTitle()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n    \r\n                */\r\n               \r\n    /// This is a test function, remove it if I forget to\r\n    testUpdateLabel = () =>{\r\n        this.setPath(\"fffffffff\")\r\n        //document.getElementById(\"VertPath\").value = \"It doth been updated\";\r\n        \r\n        //console.log(\"RIGHT HERE \" + document.getElementById(\"VertPath\").value)\r\n    }\r\n\r\n\r\n\r\n    /// \r\n\r\n    componentDidMount() {\r\n        this.menu = this.props.mainState.menu;\r\n        this.selectedItem = this.props.mainState.drawMode;\r\n        this.props.setMode(this.selectedItem)\r\n\r\n        document.addEventListener(\"keydown\", this.onKeyPressed.bind(this));\r\n\r\n    }\r\n\r\n\r\n    //For quickKeys\r\n\r\n\r\n    onKeyPressed(e) {\r\n        if (e.keyCode === 86 && this.state.selectedObject === null){\r\n            this.props.setMode(Tool.Vertex);\r\n        }\r\n\r\n\r\n        if (e.keyCode === 69 && this.state.selectedObject === null){\r\n            this.props.setMode(Tool.Edge);\r\n        }\r\n\r\n        if (e.keyCode === 46){\r\n            console.log(this.state.selectedObject);\r\n            deleteElement(this.state.selectedObject);this.setState({menu:\"TreeView\"});\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n    componentWillReceiveProps(nextProps,nextContext) {\r\n        this.setState({menu:nextProps.mainState.menu,selectedObject:nextProps.mainState.selectedObject});\r\n        //this.setState({selectedObject:nextProps.mainState.selectedObject});\r\n\r\n        //document.removeEventListener(\"keydown\", this.onKeyPressed.bind(this));\r\n\r\n    }\r\n    \r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let elem = document.getElementById(\"LeftTitle\");\r\n        if(elem !== null){\r\n            if(document.getElementById(\"ModelName\") !== document.activeElement) {\r\n                elem.select();\r\n                elem.click()\r\n            }\r\n        }\r\n        let leftMenu = document.getElementById(\"VertexMenu\");\r\n        if(leftMenu === null){\r\n            leftMenu = document.getElementById(\"ArrowMenu\");\r\n        }\r\n        if(leftMenu !== null){\r\n            leftMenu.addEventListener(\"keypress\", (e) => {\r\n                if(e.key === \"Enter\") {\r\n                    e.preventDefault();\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    setIcons() {\r\n        fetch('http://localhost:8080/icons/list',{\r\n            method:'GET',\r\n            headers: {\r\n                'Accept': '*/*',\r\n            },\r\n        })\r\n            .then((res) => {return res.json()})\r\n            .then((data) => {\r\n                let fileNames = [];\r\n                data.icons.forEach((icon) => {\r\n                    fileNames.push(icon)\r\n                });\r\n                this.setState({fileNames:fileNames})\r\n            })\r\n    }\r\n\r\n    //VERTEX SETTERS\r\n    setTitle() {\r\n        let newTitle = document.getElementById(\"LeftTitle\").value;\r\n        this.state.selectedObject.setTitle(newTitle);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    setContent() {\r\n        let newContent = document.getElementById(\"LeftContent\").value;\r\n        newContent = newContent.split(\"\\n\");\r\n        this.state.selectedObject.setContent(newContent);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    //ARROW SETTERS\r\n    setLineType() {\r\n        let newLineType = document.getElementById(\"LineType\").value;\r\n        this.state.selectedObject.setLineType(newLineType);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    setColour() {\r\n        let newColour = document.getElementById(\"LineColour\").value;\r\n        this.state.selectedObject.setLineColour(newColour);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    setStartLabel() {\r\n        let newLabel = document.getElementById(\"SourceLabel\").value;\r\n        this.state.selectedObject.setStartLabel(newLabel);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    setEndLabel() {\r\n        let newLabel = document.getElementById(\"DestLabel\").value;\r\n        this.state.selectedObject.setEndLabel(newLabel);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    updateCardinality() {\r\n        let sourceLowerBound = document.getElementById(\"sourceFromCardindality\").value;\r\n        let sourceUpperBound = document.getElementById(\"sourceToCardindality\").value;\r\n        let currentSourceVisibility = this.state.selectedObject.getSourceCardinalityVisibility();\r\n        let destLowerBound = document.getElementById(\"destFromCardindality\").value;\r\n        let destUpperBound = document.getElementById(\"destToCardindality\").value;\r\n        let currentDestVisibility = this.state.selectedObject.getDestCardinalityVisibility();\r\n\r\n        this.state.selectedObject.updateSourceCardinality(sourceLowerBound, sourceUpperBound, currentSourceVisibility);\r\n        this.state.selectedObject.updateDestCardinality(destLowerBound, destUpperBound, currentDestVisibility);\r\n\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    toggleSourceCardinalityVisibility() {\r\n        this.state.selectedObject.toggleSourceCardinalityVisibility();\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    toggleDestCardinalityVisibility() {\r\n        this.state.selectedObject.toggleDestCardinalityVisibility();\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    toggleAbstract(){\r\n        this.state.selectedObject.toggleAbstract()\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    getS23MIconsSelector() {\r\n        let dropdownOptions = [<div className=\"DropdownItem\"><div className=\"dropdownLabel\">Name</div><div className=\"checkBoxContainer\">Text</div><div className=\"checkBoxContainer\">Icon</div></div>];\r\n\r\n        let name = \"\";\r\n        this.state.fileNames.forEach(fileName => {\r\n            if (fileName.slice(-6, -4) === \"_n\") {\r\n                name = fileName.slice(0, -6);\r\n                dropdownOptions.push(<div className=\"DropdownItem\" ref={fileName}> <div className=\"dropdownLabel\">{name}</div> <div className=\"checkBoxContainer\"><input type='checkbox' disabled=\"disabled\" /> </div>  <div className=\"checkBoxContainer\"><input type='checkbox' defaultChecked={this.shouldIconBeSelected(fileName)} onClick={() => {this.setIcon(fileName)}}/></div> </div>)\r\n            } else {\r\n                name = fileName.slice(0, -4);\r\n                dropdownOptions.push(<div className=\"DropdownItem\" ref={fileName}> <div className=\"dropdownLabel\">{name}</div> <div className=\"checkBoxContainer\"><input type='checkbox' defaultChecked={this.shouldTextBeSelected(fileName)} onClick={() => {this.setText(fileName)}} /> </div>  <div className=\"checkBoxContainer\"><input type='checkbox' defaultChecked={this.shouldIconBeSelected(fileName)} onClick={() => {this.setIcon(fileName)}}/></div> </div>)\r\n            }\r\n        });\r\n\r\n        return <DropdownButton title=\"Category Selector\" name=\"Icons\" id=\"IconSelector\" className=\"IconSelector\">\r\n            {dropdownOptions}\r\n        </DropdownButton>;\r\n    }\r\n\r\n    getVertexColour = () => {\r\n        return this.state.selectedObject.getColour()\r\n    };\r\n\r\n    setVertexColour = (colour) =>{\r\n        this.state.selectedObject.setColour(colour.hex);\r\n        canvasDraw.drawAll()\r\n    };\r\n\r\n    getColourPicker() {\r\n        return <DropdownButton title = \"Colour Selector\" id = \"ColourSelector\">\r\n        <SketchPicker\r\n            color={this.getVertexColour}\r\n            onChangeComplete={this.setVertexColour}\r\n            presetColors = {[\"#FFD5A9\",\"#F5B942\",\"#FFFFFF\"]}\r\n        /></DropdownButton>\r\n    }\r\n\r\n    shouldTextBeSelected(fileName) {\r\n        return this.state.selectedObject.isTextSet(fileName)\r\n    }\r\n\r\n    shouldIconBeSelected(fileName) {\r\n        return this.state.selectedObject.isIconSet(fileName)\r\n    }\r\n\r\n    setText(fileName) {\r\n        this.state.selectedObject.setText(fileName);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    setIcon(fileName) {\r\n        this.state.selectedObject.setIcon(fileName);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    setNavigable(side){\r\n\r\n        this.state.selectedObject.toggleNavigable(side);\r\n\r\n        document.getElementById(\"SourceIsNavigable\").checked = this.state.selectedObject.getNavigable(0);\r\n        document.getElementById(\"DestIsNavigable\").checked = this.state.selectedObject.getNavigable(1);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    setAggregation(side){\r\n        if(!this.state.selectedObject.getNavigable(side)){\r\n            this.state.selectedObject.toggleNavigable(side);\r\n        }\r\n        this.state.selectedObject.toggleAggregation(side);\r\n        let SourceAggregation = this.state.selectedObject.getAggregation(0);\r\n        let DestAggregation = this.state.selectedObject.getAggregation(1);\r\n        if(SourceAggregation) {\r\n            document.getElementById(\"SourceIsNavigable\").checked = true;\r\n        }\r\n        if(DestAggregation){\r\n            document.getElementById(\"DestIsNavigable\").checked = true;\r\n        }\r\n        document.getElementById(\"SourceIsAggregation\").checked = SourceAggregation;\r\n        document.getElementById(\"DestIsAggregation\").checked = DestAggregation;\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    deselectElement(){\r\n        this.props.setLeftMenu(null);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    showTreeView(){\r\n        //this.state.menu = LeftMenuType.TreeView;\r\n        //console.log(\"HENLO: \" + this.state);\r\n        //leftMenuContents = <ContainmentTree setLeftMenu = {this.props.setLeftMenu} />;\r\n        this.state.selectedObject(null)\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    stripElement(e){\r\n        e.preventDefault()\r\n        this.state.selectedObject.trimPath();\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n// return the correct menu based on the selected item\r\n    getMenu = () =>{\r\n\r\n        \r\n\r\n        let leftMenuContents;\r\n\r\n        let toolbar = <div id = \"Toolbar\" className = \"Toolbar\">\r\n            <div id = \"Select\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Select)}><img src={iconSelect} alt =\"Select\"/></div>\r\n\r\n            <div id = \"Vertex\" className=\"ToolbarItem\" onClick={() => {this.props.setMode(Tool.Vertex); }} onKeyDown={() => this.onKeyPressed()}    ><img src={iconVertex} alt =\"Vertex\"/></div>\r\n\r\n            <div id=\"Artifact\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Artifact)} onKeyDown={() => this.onKeyPressed()}    ><img src={iconArtifact} alt=\"Artifact\" /></div>\r\n            <div id=\"Container\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Container)} onKeyDown={() => this.onKeyPressed()}    ><img src={iconContainer} alt=\"Container\" /></div>\r\n\r\n            <div id = \"Edge\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Edge)}><img src={iconEdge} alt =\"Edge\"/></div>\r\n            <div id = \"Specialisation\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Specialisation)}><img src={iconSpecialisation} alt =\"Specialisation\"/></div>\r\n            <div id = \"Visibility\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Visibility)}><img src={iconVisibility} alt =\"Visibility\"/></div>\r\n        </div>;\r\n\r\n        if (this.state.menu === LeftMenuType.TreeView) {\r\n            leftMenuContents = <ContainmentTree setLeftMenu = {this.props.setLeftMenu} />\r\n            //console.log(\"A new tree has been created\");\r\n\r\n        } else if (this.state.menu === LeftMenuType.Vertex) {\r\n            canvasDraw.drawAll();\r\n\r\n            leftMenuContents = <form id = \"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.title} onKeyUp={() => this.setTitle()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Content</label>\r\n                <textarea id=\"LeftContent\" className =\"LeftContent\" defaultValue={this.state.selectedObject.getContentAsString()} onKeyUp={() => this.setContent()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getS23MIconsSelector()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getColourPicker()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Is Abstract?</label>\r\n                <input type=\"checkbox\" id=\"IsAbstract\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAbstract()} onClick={() => this.toggleAbstract()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => {/*deleteElement(this.state.selectedObject)*/vertexDeleteElement(this.state.selectedObject);this.setState({menu:\"TreeView\"})}} placeholder=\"NoTabIndex\">Remove</button>\r\n\r\n\r\n\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                \r\n    \r\n                <input id=\"VertPath\" className=\"vertexPath\" defaultValue={this.state.selectedObject.vertexPath}/>\r\n                \r\n\r\n\r\n            </form>;\r\n\r\n        } else if (this.state.menu === LeftMenuType.Artifact) {\r\n            canvasDraw.drawAll();\r\n\r\n            leftMenuContents = <form id=\"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.title} onKeyUp={() => this.setTitle()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Content</label>\r\n                <textarea id=\"LeftContent\" className=\"LeftContent\" defaultValue={this.state.selectedObject.getContentAsString()} onKeyUp={() => this.setContent()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getS23MIconsSelector()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getColourPicker()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Is Abstract?</label>\r\n                <input type=\"checkbox\" id=\"IsAbstract\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAbstract()} onClick={() => this.toggleAbstract()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => { deleteElement(this.state.selectedObject); this.setState({ menu: \"TreeView\" }) }} placeholder=\"NoTabIndex\">Remove</button>\r\n            </form>;\r\n\r\n        } else if (this.state.menu === LeftMenuType.Container) {\r\n            canvasDraw.drawAll();\r\n            leftMenuContents = <form id=\"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.title} onKeyUp={() => this.setTitle()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Content</label>\r\n                <textarea id=\"LeftContent\" className=\"LeftContent\" defaultValue={this.state.selectedObject.getContentAsString()} onKeyUp={() => this.setContent()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getS23MIconsSelector()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Is Abstract?</label>\r\n                <input type=\"checkbox\" id=\"IsAbstract\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAbstract()} onClick={() => this.toggleAbstract()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => { deleteElement(this.state.selectedObject); this.setState({ menu: \"TreeView\" }) }} placeholder=\"NoTabIndex\">Remove</button>\r\n            </form>;\r\n\r\n        }else if (this.state.menu === LeftMenuType.Arrow) {\r\n            console.log(\"Arrow Selected\");\r\n            console.log(this.state.selectedObject)\r\n\r\n            if(this.state.selectedObject.edgeType === Tool.Edge){\r\n\r\n            leftMenuContents = <form id = \"ArrowMenu\">\r\n                <div className=\"LeftHeader\">Edge Properties</div>\r\n\r\n                <label className=\"LeftLabel\">Source Is Navigable?</label>\r\n                <input type=\"checkbox\" id=\"SourceIsNavigable\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getNavigable(0)} onClick={() => this.setNavigable(0)}/>\r\n\r\n                <label className=\"LeftLabel\">Destination Is Navigable?</label>\r\n                <input type=\"checkbox\" id=\"DestIsNavigable\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getNavigable(1)} onClick={() => this.setNavigable(1)}/>\r\n\r\n                <label className=\"LeftLabel\">Source Is Aggregation?</label>\r\n                <input type=\"checkbox\" id=\"SourceIsAggregation\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAggregation(0)} onClick={() => this.setAggregation(0)}/>\r\n\r\n                <label className=\"LeftLabel\">Destination Is Aggregation?</label>\r\n                <input type=\"checkbox\" id=\"DestIsAggregation\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAggregation(1)} onClick={() => this.setAggregation(1)}/>\r\n\r\n                <label className=\"LeftLabel\">Line Colour</label>\r\n                <select name=\"LineColour\" id=\"LineColour\" className=\"LeftSelector\" defaultValue={LineColourToStringName[this.state.selectedObject.lineColour]} onChange={() => this.setColour()}>\r\n                    <option value = \"Black\">Black</option>\r\n                    <option value = \"Red\">Red</option>\r\n                    <option value = \"Blue\">Blue</option>\r\n                    <option value = \"Green\">Green</option>\r\n                </select>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {/* -1 represents n or *  */}\r\n                <label className=\"LeftLabel\">Source Cardinality</label>\r\n                <div className=\"CardinalityArea\"> <div className=\"LeftCheckboxLabel\"> Visible: </div> <input type=\"checkbox\" id = \"sourceCardinalityShown\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getSourceCardinalityVisibility()} onChange={() => {this.toggleSourceCardinalityVisibility();canvasDraw.drawAll()}}/>\r\n                    <input type=\"number\" id = \"sourceFromCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getSourceCardinalityLowerBound()} min=\"0\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                    <label>..</label>\r\n                    <input type=\"number\" id = \"sourceToCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getSourceCardinalityUpperBound()} min=\"-1\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                </div>\r\n\r\n\r\n                <label className=\"LeftLabel\">Destination Cardinality</label>\r\n                <div className=\"CardinalityArea\"> <div className=\"LeftCheckboxLabel\">Visible:</div> <input type=\"checkbox\" id = \"destCardinalityShown\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getDestCardinalityVisibility()} onChange={() => {this.toggleDestCardinalityVisibility();canvasDraw.drawAll()}}/>\r\n                    <input type=\"number\" id = \"destFromCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getDestCardinalityLowerBound()} min=\"0\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                    <label>..</label>\r\n                    <input type=\"number\" id = \"destToCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getDestCardinalityUpperBound()} min=\"-1\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                </div>\r\n\r\n                <label className=\"LeftLabel\">Source Label</label>\r\n                    <input id=\"SourceLabel\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.sourceEdgeEnd.label} onKeyUp={() => this.setStartLabel()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Destination Label</label>\r\n                    <input id=\"DestLabel\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.destEdgeEnd.label} onKeyUp={() => this.setEndLabel()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => { deleteElement(this.state.selectedObject); this.setState({ menu: LeftMenuType.TreeView, selectedObject: null }) }}>Remove</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={(e) => this.stripElement(e)}>Make Straight</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => {deleteElement(this.state.selectedObject);this.setState({menu:LeftMenuType.TreeView,selectedObject:null})}}>Remove</button>\r\n\r\n            </form>\r\n            }else{\r\n                leftMenuContents = <form id = \"ArrowMenu\">\r\n                    <div className=\"LeftHeader\">Selected Edge</div>\r\n                    <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                    <label className=\"LeftSpacer\">&nbsp;</label>\r\n                    <button className=\"LeftMenuButton\" onClick={() => {deleteElement(this.state.selectedObject);this.setState({menu:LeftMenuType.TreeView,selectedObject:null})}}>Remove</button>\r\n\r\n                    \r\n\r\n                    </form>\r\n            }\r\n        }\r\n\r\n        return <div>{toolbar}<form ref={this.setFormRef} className={this.props.className}>\r\n            {leftMenuContents}\r\n            </form></div>;\r\n        \r\n    };\r\n\r\n    render() {\r\n        let menu = this.getMenu();\r\n        if (this.formRef !== null) {\r\n            this.formRef.reset();\r\n        }\r\n        return menu;\r\n    }\r\n\r\n\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { Vertex } from \"../DataStructures/Vertex\";\r\nimport { Arrow } from \"../DataStructures/Arrow\";\r\nimport { Tool } from \"./LeftMenu\";\r\nimport { Graph } from \"../DataStructures/Graph\";\r\n\r\n\r\n// Core variables\r\nlet canvasElement;\r\nlet canvasContext;\r\n\r\n// Mouse / Cursor\r\nlet mouseStartX;\r\nlet mouseStartY;\r\n\r\nlet previousObject;\r\nlet startX, startY, endX, endY;\r\n\r\nlet yRows = 70;\r\n\r\nexport var mouseOriginX;\r\nexport var mouseOriginY;\r\n\r\n// Non zoomed in Width/Height (in pixels)\r\nlet canvasWidth;\r\nlet canvasHeight;\r\n\r\n// Zoom and Pan\r\nlet zoom = 200.0;\r\n\r\n// Renderable objects\r\nexport var currentObjects = new Graph();\r\n\r\nexport var savedArrows = [];\r\n\r\n// The naming conventions here are terrible, but basically the render keys determine where\r\n// a tree view element is placed in the graph while the model functions determine what's \r\n// actually being rendered\r\n\r\nexport let currentRenderKey = 0;\r\nexport let totalRenderKeys = 0\r\n\r\nexport let currentModel = 0;\r\nexport let totalModels = 0;\r\n\r\nexport function getCurrentRenderKey() {\r\n    return currentRenderKey;\r\n}\r\n\r\nexport function setNewRenderKey(newKey) {\r\n    currentRenderKey = newKey;\r\n}\r\n\r\nexport function getTotalRenderKeys() {\r\n    return totalRenderKeys;\r\n}\r\n\r\nexport function incrementTotalRenderKeys() {\r\n    totalRenderKeys = totalRenderKeys += 1;\r\n}\r\n\r\n\r\n// --- Model Key Stuff --- //\r\n\r\nexport function getCurrentModel() {\r\n    return currentModel;\r\n}\r\n\r\nexport function setNewModel(newModel) {\r\n    currentModel = newModel;\r\n}\r\n\r\nexport function getTotalModels() {\r\n    return totalModels;\r\n}\r\n\r\nexport function incrementTotalModels() {\r\n    totalModels = totalModels += 1;\r\n}\r\n\r\n\r\n\r\n\r\n// Arrow Path\r\nexport var arrowPath = [];\r\nlet lastX = 0;\r\nlet lastY = 0;\r\n\r\n// Arrow moving\r\nlet startMoveX = 0;\r\nlet startMoveY = 0;\r\n\r\n// Resize status\r\nlet resizing = false;\r\n\r\nlet arrowType = 0;\r\nlet firstArrowJoint = true;\r\n\r\nlet cancelDraw = false;\r\n\r\n//Block Past location var\r\nlet past_location = [];\r\nlet past_size = [];\r\nlet selectedObject;\r\nexport var blockBeenSelected = false;\r\n\r\n// Init\r\nexport function assignElement(elementID) {\r\n    canvasElement = document.getElementById(elementID);\r\n    canvasContext = canvasElement.getContext(\"2d\");\r\n\r\n    resetMouseOrigin();\r\n\r\n}\r\n\r\nexport function getModelName() {\r\n    let nameElement = document.getElementById(\"ModelName\")\r\n\r\n    if (nameElement === null) {\r\n        return \"Root\"\r\n    }\r\n    if (nameElement.value === \"\" || nameElement.value === null || nameElement.value === undefined) {\r\n        return \"Root\"\r\n    }\r\n    return nameElement.value;\r\n}\r\n\r\nexport function resetMouseOrigin() {\r\n    try {\r\n        let canvasRect = canvasElement.getBoundingClientRect();\r\n        mouseOriginX = canvasRect.left;\r\n        mouseOriginY = canvasRect.top;\r\n        recalculateScale();\r\n        clearCanvas();\r\n    } catch {\r\n        console.error(\"Failed to acquire canvas element\");\r\n    }\r\n    drawAll()\r\n}\r\n\r\n\r\n// Core functions\r\nexport function drawAll() {\r\n    updateArrows();\r\n    clearCanvas();\r\n\r\n    canvasContext.resetTransform();\r\n    canvasContext.scale(getEffectiveZoom(), getEffectiveZoom());\r\n\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item !== null) {\r\n            //console.log(\"HERE \" + item.typeName)\r\n            //Only render the objects which are in the currently selected containment\r\n\r\n            if (item.getModelKey() === currentModel) {\r\n                /*\r\n                if (item.typeName === \"Vertex\"){\r\n                    console.log(\"Item is set as present\")\r\n                    item.setPresent();\r\n                }\r\n                */\r\n                item.draw(canvasContext);\r\n\r\n            }\r\n\r\n            /*\r\n            else if (item.getModelKey() !== currentModel && item.typeName === \"Vertex\"){\r\n                console.log(\"Item is sent away\")\r\n                item.setAway();\r\n                //console.log(\"The item to not be rendered is\" + item.typeName);\r\n            }\r\n            */\r\n\r\n        }\r\n    });\r\n\r\n}\r\n\r\nexport function deleteElement(element) {\r\n    if (element !== null) {\r\n        if (!currentObjects.remove(element)) {\r\n            console.error(\"Failed to delete object with UUID %s\", element.semanticIdentity.UUID);\r\n        }\r\n    } else {\r\n        console.error(\"Attempted to delete a null element\");\r\n    }\r\n\r\n    drawAll()\r\n}\r\n\r\n//this is the same as the above, except when you're deleting a vertex with an arrow connected the edge connection code freaks out.\r\n//this here deletes any arrows connected to the vertex before deleting the vertex to get around this\r\nexport function vertexDeleteElement(element) {\r\n    console.log(\"vDeleteE occurs\")\r\n    //find the UUID of the vertex for arrow dest and source matching\r\n    //let selectedVertUUID = element.semanticIdentity.UUID;\r\n\r\n    //Get the arrow UUID's\r\n    let sourceUUIDs = currentObjects.ArrowUUIDSource(element);\r\n    let destUUIDs = currentObjects.ArrowUUIDDest(element);\r\n    //find an arrow with matching source/dest if they exist\r\n\r\n    sourceUUIDs.forEach(element => currentObjects.remove(element.arrow));\r\n    destUUIDs.forEach(element => currentObjects.remove(element.arrow))\r\n\r\n    //Now that the arrows are out of the way, we're safe to delete the vertex (same code as above)\r\n    if (element !== null) {\r\n        console.log(\"vdl if staement pass\")\r\n        if (!currentObjects.remove(element)) {\r\n            \r\n            console.error(\"Failed to delete object with UUID %s\", element.semanticIdentity.UUID);\r\n        }\r\n    } else {\r\n        console.error(\"Attempted to delete a null element\");\r\n    }\r\n\r\n    drawAll()\r\n\r\n}\r\n\r\nexport function updateRows() {\r\n    yRows = document.getElementById(\"canvasRows\").value;\r\n    drawAll()\r\n}\r\n\r\n// Format co-ordinate so that the value aligns with a row\r\nfunction findNearestGridY(y, top) {\r\n\r\n    // distance to topmost top rowLine\r\n    let slotHeight = canvasHeight / yRows * zoom / 100 * 200 / zoom;\r\n\r\n    // which row to put it in\r\n    let slot = Math.floor(y / slotHeight);\r\n\r\n    // y co-ordinate of that row (if bottom then go up by row gap)\r\n    return slotHeight * slot + (slotHeight / 2 * + top)\r\n}\r\n\r\n// Checks to see which side it should resize on\r\nfunction checkResizeBounds(x, y) {\r\n    // Iterate through all objects and only check vertices\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n    for (let i = 0; i < currentObjectsFlattened.length; i++) {\r\n        let item = currentObjectsFlattened[i];\r\n\r\n        if (item.constructor.name === \"Vertex\") {\r\n            // Get vertex bounds\r\n            // x1 y1 are the lower coordinates\r\n            // x2 y2 are the upper coordinates\r\n            // Note: x2 y2 are not width/height values\r\n\r\n            //tolerance in px\r\n            let tolerance = 10;\r\n\r\n            let bounds = item.getBounds();\r\n            let x1 = bounds[0];\r\n            let y1 = bounds[1];\r\n            let x2 = bounds[2];\r\n            let y2 = bounds[3];\r\n\r\n            let top = Math.abs(y1 - y) < tolerance;\r\n            let bottom = Math.abs(y2 - y) < tolerance;\r\n            let left = Math.abs(x1 - x) < tolerance;\r\n            let right = Math.abs(x2 - x) < tolerance;\r\n            let inYBounds = y > y1 && y < y2;\r\n            let inXBounds = x > x1 && x < x2;\r\n\r\n            if (right && inYBounds) {\r\n                return [item, \"right\"];\r\n            }\r\n\r\n            if (top && left) {\r\n                return [item, \"topLeft\"];\r\n            } else if (top && right) {\r\n                return [item, \"topRight\"];\r\n            } else if (bottom && left) {\r\n                return [item, \"bottomLeft\"];\r\n            } else if (bottom && right) {\r\n                return [item, \"bottomRight\"];\r\n            } else if (left && inYBounds) {\r\n                return [item, \"left\"];\r\n            } if (right && inYBounds) {\r\n                return [item, \"right\"];\r\n            } else if (top && inXBounds) {\r\n                return [item, \"top\"];\r\n            } else if (bottom && inXBounds) {\r\n                return [item, \"bottom\"];\r\n            }\r\n        }\r\n    }\r\n\r\n    // All else fails\r\n    return [null, null];\r\n}\r\n\r\nexport const distanceThreshold = 15;\r\n\r\n// Find connectable for arrow within a threshold distance\r\nfunction getConnectionDataForArrow(cursorX, cursorY) {\r\n    const angleThreshold = 8;\r\n\r\n    let nearest = null;\r\n    let nearestDistance = 0;\r\n\r\n    // Find nearest connectable\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item !== null) {\r\n            if (item.constructor.name === \"Vertex\") {\r\n                let sideData = item.getNearestSideFrom(cursorX, cursorY, lastX, lastY);\r\n                // Only check if valid\r\n                if (sideData !== null && sideData[0] < distanceThreshold) {\r\n                    // Compare dist\r\n                    if (nearest === null || sideData[0] < nearestDistance) {\r\n                        nearest = [0, item.semanticIdentity.UUID, sideData[1], sideData[2]];\r\n                        nearestDistance = sideData[0];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    // Set coordinates\r\n    let coordinate = nearest;\r\n    if (nearest === null) {\r\n        coordinate = [1, cursorX, cursorY];\r\n    }\r\n\r\n    // If can't snap to right angles\r\n    if (arrowPath.length < 1 || coordinate[0] === 0) return { coord: coordinate, snapped: nearest !== null, nearest: nearest };\r\n\r\n    // Get angle\r\n    let lastPathX = arrowPath[arrowPath.length - 1][1];\r\n    let lastPathY = arrowPath[arrowPath.length - 1][2];\r\n    let x = coordinate[1] - lastPathX;\r\n    let y = coordinate[2] - lastPathY;\r\n\r\n    // must be y,x check documentation if you dont believe me\r\n    let angle = Math.atan2(y, x) * (180 / Math.PI);\r\n    // Make positive\r\n    angle = (angle + 360) % 360;\r\n    // Get relative\r\n    let relAngle = angle % 90;\r\n\r\n    // Check if it should snap to right angles\r\n    if (relAngle > 90 - angleThreshold || relAngle < angleThreshold) {\r\n        // Get length\r\n        let l = getDistance(0, 0, x, y);\r\n\r\n        // Choose angle\r\n        let angles = [0, 90, 180, 270, 360];\r\n        let nearestAngle = angles[0];\r\n        for (let i = 1; i < angles.length; i++) {\r\n            if (Math.abs(angles[i] - angle) < Math.abs(nearestAngle - angle)) {\r\n                nearestAngle = angles[i];\r\n            }\r\n        }\r\n        let nearestRad = nearestAngle * (Math.PI / 180);\r\n\r\n        // Create vector\r\n        let xv = l * Math.cos(nearestRad);\r\n        let yv = l * Math.sin(nearestRad);\r\n\r\n        // Create point (not vector sitting on 0,0)\r\n        coordinate = [coordinate[0], lastPathX + xv, lastPathY + yv];\r\n\r\n\r\n    }\r\n\r\n    return { coord: coordinate, snapped: nearest !== null, nearest: nearest }\r\n}\r\n\r\nexport function getSelectedObject(canvas) {\r\n    return canvas.props.mainState.selectedObject\r\n}\r\n\r\nfunction resizeObjectOnMouseMove(e, resizeVars) {\r\n    let coords = getGraphXYFromMouseEvent(e);\r\n\r\n    resizeVars[0].expandSide(resizeVars[1], coords[0], coords[1], canvasContext);\r\n\r\n    //grab object and arrows connected to it\r\n    // update arrows\r\n    updateA();\r\n}\r\n\r\n// Sets the objects uuid and adds it to the root of currentObjects\r\nfunction addObject(object) {\r\n    if (object === null || object === undefined) return;\r\n    currentObjects.add(object);\r\n}\r\n\r\n// Sets the currentObjects value to a new one. WARNING it will override the current value without any checks\r\nexport function setCurrentObjects(newObjects) {\r\n    currentObjects = newObjects;\r\n    drawAll();\r\n}\r\n\r\nexport function newFile() {\r\n    // Confirm\r\n    let r = window.confirm(\"Are you sure, this will clear the current canvas!\");\r\n    if (r === true) {\r\n        console.log(\"Clearing canvas\");\r\n        window.location.reload();\r\n    } else {\r\n        console.log(\"User opted to not clear the canvas\");\r\n    }\r\n\r\n    // Redraw\r\n    drawAll(currentObjects);\r\n}\r\n\r\nfunction arrowToolSelected() {\r\n    return arrowType === Tool.Visibility || arrowType === Tool.Edge || arrowType === Tool.Specialisation\r\n}\r\n\r\nexport function getObjectFromUUID(UUID) {\r\n    let foundObject;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.semanticIdentity.UUID === UUID) {\r\n            foundObject = item;\r\n        }\r\n    });\r\n    return foundObject;\r\n}\r\n\r\n\r\nfunction findNearestArrowPointIndex(x, y) {\r\n    let nearestPointIndex = -1;\r\n    // Nearest distance here is used as a tolerance variable\r\n    let nearestDistance = 30;\r\n    let cDist;\r\n    let nearestArrow = null;\r\n\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.constructor.name === \"Arrow\") {\r\n            item.path.forEach((point) => {\r\n                cDist = Math.hypot(x - point[0], y - point[1]);\r\n                console.log(cDist);\r\n                if (cDist < nearestDistance) {\r\n                    nearestDistance = cDist;\r\n                    nearestPointIndex = item.path.indexOf(point);\r\n                    nearestArrow = item\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return [nearestPointIndex, nearestArrow]\r\n}\r\n\r\nfunction StickArrowToObject(connectionData, arrow, index) {\r\n    // so the line sticks to object\r\n    if (connectionData['snapped'] === false) {\r\n        let coord = connectionData['coord'];\r\n        // update the arrow\r\n        arrow.path[index] = [coord[1], coord[2]]\r\n    } else {\r\n        let vertexUUID = connectionData['nearest'][1];\r\n        let vertex = getObjectFromUUID(vertexUUID);\r\n\r\n        if (vertex !== undefined) {\r\n            arrow.path[index] = arrow.rebuildPath()\r\n        }\r\n    }\r\n}\r\n\r\nfunction moveArrowPointOnMouseMove(e, index, arrow) {\r\n    let x, y;\r\n    [x, y] = getGraphXYFromMouseEvent(e);\r\n    let conData = getConnectionDataForArrow(x, y);\r\n    arrow.pathData[index] = conData['nearest'];\r\n    StickArrowToObject(conData, arrow, index);\r\n\r\n\r\n}\r\n\r\n\r\n// Event based functions\r\nexport function onLeftMousePress(canvas, x, y) {\r\n\r\n    // Checks if your mouse is in range of the borders of a box to resize them\r\n    let resizeVars = checkResizeBounds(x, y);\r\n    if (canvas.tool === Tool.Vertex || canvas.tool === Tool.Select) {\r\n        if (resizeVars[0] !== null) {\r\n            if (resizeVars[0] === getSelectedObject(canvas)) {\r\n                saveBlockStates(canvas, x, y);\r\n                resizing = true;\r\n                canvasElement.onmousemove = function (e) {\r\n                    resizeObjectOnMouseMove(e, resizeVars);\r\n\r\n                };\r\n                return;\r\n            }\r\n        } else {\r\n        }\r\n\r\n\r\n\r\n        let intersection = findIntersected(x, y);\r\n        if (canvas.tool === Tool.Vertex && intersection !== null) {\r\n            //console.log(\"Selecting intersected Vertex\");\r\n            canvas.props.setLeftMenu(intersection);\r\n            canvas.props.setMode(Tool.Select);\r\n            cancelDraw = true;\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    if (canvas.tool === Tool.Select) {\r\n        let index, arrow;\r\n        [index, arrow] = findNearestArrowPointIndex(x, y);\r\n        //console.log(index, arrow);\r\n        if (arrow === getSelectedObject(canvas)) {\r\n            if (index !== -1) {\r\n                resizing = true;\r\n                let func = function (e) {\r\n                    moveArrowPointOnMouseMove(e, index, arrow)\r\n                };\r\n\r\n\r\n                canvasElement.addEventListener(\"mousemove\", func);\r\n                canvasElement.addEventListener(\"mouseup\", () => {\r\n                    canvasElement.removeEventListener(\"mousemove\", func);\r\n                    console.log(\"removed\")\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    mouseStartX = x;\r\n    mouseStartY = y;\r\n\r\n\r\n\r\n    // Enable example draw while user is deciding shape\r\n    canvasElement.onmousemove = function (e) { onMouseMove(e, canvas) }\r\n\r\n\r\n}\r\n\r\n//aligning lines when large box moved\r\nexport function checkArrowsConnectedToBox(Object) {\r\n    // check arrows which one matches the box that was moved by its ID \r\n\r\n    // check how much the box has changed\r\n    let objectID;\r\n\r\n    let arrowArray = [];\r\n\r\n    resizing = true;\r\n    objectID = Object.semanticIdentity.UUID;\r\n    console.log(objectID);\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.constructor.name === \"Arrow\") {\r\n            let conData = 0;\r\n            //If the object is connected to destination\r\n            if (objectID === item.destVertexUUID) {\r\n                arrowArray.push(item);\r\n\r\n                // get connection data calcs min dist to travel and hopefully it's straight up\r\n                // first object destination y is less than object y\r\n                if (item.path[0][1] < Object.y) {\r\n                    conData = getConnectionDataForArrow(item.path[0][0], Object.y);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(item.path[0][0], Object.y + Object.height);\r\n                }\r\n                item.pathData[1] = conData['nearest'];\r\n                console.log(\"dest one\")\r\n                StickArrowToObject(conData, item, 1);\r\n\r\n                //If the object is connected to Source\r\n            } else if (objectID === item.sourceVertexUUID) {\r\n                arrowArray.push(item);\r\n                if (item.path[1][1] < Object.y) {\r\n                    conData = getConnectionDataForArrow(item.path[1][0], Object.y);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(item.path[1][0], Object.y + Object.height);\r\n                }\r\n                item.pathData[0] = conData['nearest'];\r\n                console.log(\"source one\");\r\n                StickArrowToObject(conData, item, 0);\r\n\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    resizing = false;\r\n\r\n\r\n}\r\n\r\nexport function checkHorizArrowsConnectedToBox(Object) {\r\n    let objectID;\r\n\r\n    let arrowArray = [];\r\n\r\n    resizing = true;\r\n    objectID = Object.semanticIdentity.UUID;\r\n    console.log(objectID);\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.constructor.name === \"Arrow\") {\r\n            let conData = 0;\r\n            //If the object is connected to destination\r\n            if (objectID === item.destVertexUUID) {\r\n                arrowArray.push(item);\r\n\r\n                if (item.path[0][0] < Object.x) {\r\n                    conData = getConnectionDataForArrow(Object.x + 1, item.path[0][1]);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(Object.x + Object.width - 1, item.path[0][1]);\r\n                }\r\n                item.pathData[1] = conData['nearest'];\r\n                console.log(\"dest one\")\r\n                StickArrowToObject(conData, item, 1);\r\n\r\n                //If the object is connected to Source\r\n            } else if (objectID === item.sourceVertexUUID) {\r\n                arrowArray.push(item);\r\n                if (item.path[1][0] < Object.x) {\r\n                    conData = getConnectionDataForArrow(Object.x + 1, item.path[0][1]);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(Object.x + Object.width - 1, item.path[0][1]);\r\n                }\r\n                item.pathData[0] = conData['nearest'];\r\n                console.log(\"source one\");\r\n                StickArrowToObject(conData, item, 0);\r\n\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    resizing = false;\r\n\r\n\r\n}\r\n\r\n\r\n//save the position of the clicked variable as global\r\nexport function saveBlockStates(canvas, x, y) {\r\n    selectedObject = getSelectedObject(canvas);\r\n    if (getSelectedObject(canvas) === null) {\r\n        selectedObject = findIntersected(x, y);\r\n    }\r\n    if (selectedObject !== null) {\r\n        blockBeenSelected = true;\r\n\r\n        //console.log(\"Block States Have been Saved\");\r\n        past_location = [selectedObject.x, selectedObject.y];\r\n        past_size = [selectedObject.width, selectedObject.height];\r\n    }\r\n}\r\n\r\nexport function setArrowType(type) {\r\n    arrowType = type\r\n}\r\n\r\n//make sure boxes don't collide\r\nexport function checkCollision(canvas, x, y) {\r\n    //console.log(\"Collision Tests:\");\r\n    let object = selectedObject;\r\n    let CollideCount = 0;\r\n    //console.log(past_size);\r\n    // for loop to check all boxes in the list\r\n    if (currentObjects.flatten() !== null && object !== null) {\r\n        currentObjects.flatten().forEach((item) => {\r\n            if (item.constructor.name === \"Vertex\") {\r\n                //make sure coords are > coords of box u just placed + its width\r\n                if (object.x === item.x && object.y === item.y) {\r\n                    //console.log(\"collides with itself\");\r\n                }\r\n                // error of 10 pixels for item's height\r\n                else if ((object.y > (item.y + item.height + 10)) || (object.x > (item.x + item.width))\r\n                    || (item.x > (object.x + object.width)) || (item.y > (object.y + object.height + 10))) {\r\n                    //console.log(\"NoCollide\");\r\n                }\r\n                else {\r\n                    // revert to past stored location\r\n                    object.x = past_location[0];\r\n                    object.y = past_location[1];\r\n                    object.width = past_size[0];\r\n                    object.height = past_size[1];\r\n                    CollideCount++;\r\n                    //console.log(\"Collided\");\r\n                }\r\n            }\r\n        });\r\n        // as long as never collided, change to new location\r\n        if (CollideCount === 0) {\r\n            past_location = [object.x, object.y];\r\n            past_size = [object.width, object.height]\r\n            //console.log(CollideCount);\r\n        }\r\n        blockBeenSelected = false;\r\n        drawAll(currentObjects);\r\n    }\r\n}\r\n\r\n\r\nexport function onRightMouseRelease(canvas, x, y) {\r\n    let ET = findIntersected(x, y);\r\n    if (arrowToolSelected() && ET !== null) {\r\n        // Create\r\n\r\n        let newObject = createObject(canvas, mouseStartX, mouseStartY, x, y);\r\n\r\n        // Reset path\r\n        arrowPath = [];\r\n        firstArrowJoint = true;\r\n\r\n        addObject(newObject);\r\n\r\n        // Disable example draw\r\n        canvasElement.onmousemove = null;\r\n        drawAll(currentObjects);\r\n\r\n        canvas.props.setLeftMenu(newObject)\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n}\r\n\r\nexport function updateA() {\r\n    let conData = 0;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.constructor.name === \"Arrow\") {\r\n\r\n            conData = getConnectionDataForArrow(item.path[1][0], item.path[1][1]);\r\n            item.pathData[1] = conData['nearest'];\r\n            StickArrowToObject(conData, item, 0);\r\n\r\n\r\n        }\r\n    });\r\n}\r\nexport function compareSizesToMoveAll(Object) {\r\n\r\n    //for loop to get all the arrows\r\n    //for loop to check destination and source\r\n    //if object ID is equal \r\n    //find whichever one is not the currently selected block\r\n    // if it's smaller move it else do nothing\r\n\r\n    let objectID;\r\n    let verticalArray = [];\r\n    let horizontalArray = [];\r\n    let box;\r\n    let boxArray = [];\r\n\r\n    objectID = Object.semanticIdentity.UUID;\r\n    console.log(objectID);\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.constructor.name === \"Arrow\") {\r\n\r\n            //If the object is connected to destination\r\n            if (objectID === item.destVertexUUID) {\r\n                box = getObjectFromUUID(item.sourceVertexUUID);\r\n                if ((box.height + 10) * box.width < (Object.height + 10) * Object.width) {\r\n                    boxArray.push(box);\r\n\r\n                }\r\n                //check if arrow is on top/ below\r\n                if (item.path[0][1] < Object.y || item.path[0][1] > Object.y + Object.height + 10) {\r\n                    //push to vertical array\r\n                    verticalArray.push(item);\r\n                }\r\n                //check if arrow is left/ right\r\n                else if (item.path[0][0] < Object.x || item.path[0][0] > Object.x + Object.width) {\r\n                    //push to horizontal array\r\n                    horizontalArray.push(item);\r\n                }\r\n\r\n\r\n\r\n            }\r\n            //If the object is connected to Source\r\n            else if (objectID === item.sourceVertexUUID) {\r\n                box = getObjectFromUUID(item.destVertexUUID);\r\n                if ((box.height + 10) * box.width < (Object.height + 10) * Object.width) {\r\n                    boxArray.push(box);\r\n                }\r\n                //check if arrow is on top/ below\r\n                if (item.path[1][1] < Object.y || item.path[1][1] > Object.y + Object.height + 10) {\r\n                    //push to vertical array\r\n                    verticalArray.push(item);\r\n\r\n                }\r\n                //check if arrow is left/ right\r\n                else if (item.path[1][0] < Object.x || item.path[1][0] > Object.x + Object.width) {\r\n                    //push to horizontal array\r\n                    horizontalArray.push(item);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    });\r\n    return [boxArray, verticalArray, horizontalArray];\r\n}\r\n\r\nexport function checkBoxSizesAndReturnBigBox(first, second) {\r\n    if ((first.width) * (first.height + 10) <= (second.width) * (second.height + 10)) {\r\n        return [second, first];\r\n    } else {\r\n        return [first, second];\r\n    }\r\n}\r\n\r\n//line intersect\r\nexport function lineIntersect(canvas, x, y, secondObject) {\r\n    endX = 0;\r\n    endY = 0;\r\n\r\n    startX = 0;\r\n    startY = 0;\r\n\r\n    console.log(\"\\n \\n arrow path: \" + arrowPath + \"\\n\\n\");\r\n    arrowPath = [];\r\n\r\n    //previous object is below\r\n    if (previousObject.y > y && previousObject.x + previousObject.width > x) {\r\n        console.log(\"\\n\\n\\n prev object was below \\n\\n\\n\");\r\n        startY = previousObject.y;\r\n        startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n        endY = secondObject.y + secondObject.height + 10;\r\n        endX = secondObject.x + (0.5 * secondObject.width);\r\n\r\n    }\r\n    // previous object is above\r\n    else if (previousObject.y < y && previousObject.x + previousObject.width > x && previousObject.x < x) {\r\n        console.log(\"\\n\\n\\n prev object was above \\n\\n\\n\");\r\n        startY = previousObject.y + previousObject.height + 10; //+ means go to bottom\r\n        startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n        endY = secondObject.y;\r\n        endX = secondObject.x + (0.5 * secondObject.width);\r\n    }\r\n    //previous object is left of //if you click higher it counts as above\r\n\r\n    //sizes based on Total Area\r\n    let blockPre = previousObject.height + previousObject.width;\r\n    let blockSec = secondObject.height + secondObject.width;\r\n\r\n    //previous object is below\r\n    if (previousObject.y > (secondObject.y + secondObject.height + 10)) {\r\n        //console.log(\"\\n\\n\\n prev object was below \\n\\n\\n\");\r\n        //if previous is inside second range\r\n        if ((previousObject.x > secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            startY = previousObject.y;\r\n            startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n            endY = startY - (startY - (secondObject.y + secondObject.height + 10));\r\n            endX = startX;\r\n        }\r\n        //if second is inside previous range\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) > (secondObject.x + secondObject.width))) {\r\n            startY = secondObject.y + secondObject.height + 10;\r\n            startX = secondObject.x + (0.5 * secondObject.width);\r\n\r\n            endY = startY + (previousObject.y - startY);\r\n            endX = startX;\r\n        }\r\n        //If pre is downLeft of sec extend whichever box is bigger horizontally and fit\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + (secondObject.x - previousObject.x);\r\n                secondObject.x = previousObject.x;\r\n\r\n                startY = previousObject.y;\r\n                startX = secondObject.x + previousObject.width / 2;\r\n                endY = secondObject.y + secondObject.height;\r\n                endX = startX;\r\n                //second obj is changing size\r\n                checkArrowsConnectedToBox(secondObject);\r\n\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + ((secondObject.x + secondObject.width) - (previousObject.x + previousObject.width));\r\n                previousObject.x = previousObject.x;\r\n\r\n                startY = secondObject.y + secondObject.height;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y;\r\n                endX = startX;\r\n                //prev obj is changing size\r\n\r\n                //this one works\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n        //If pre is downright of sec extend whichever box is better horizontally and fit\r\n        else if (previousObject.x > secondObject.x) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + ((previousObject.x + previousObject.width) - (secondObject.x + secondObject.width));\r\n\r\n                startY = previousObject.y;\r\n                startX = previousObject.x + previousObject.width / 2;\r\n                endY = secondObject.y + secondObject.height;\r\n                endX = startX;\r\n                //second obj is changing size\r\n\r\n                checkArrowsConnectedToBox(secondObject, endX - startX, endY - startY);\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + (previousObject.x - secondObject.x);\r\n                previousObject.x = secondObject.x;\r\n\r\n                startY = secondObject.y + secondObject.height;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y;\r\n                endX = startX;\r\n                //prev obj is changing size\r\n\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n    }\r\n    // previous object is above\r\n    else if (previousObject.y + previousObject.height + 10 < secondObject.y) {\r\n        //console.log(\"\\n\\n\\n prev object was above \\n\\n\\n\");\r\n        //if previous is inside second range\r\n        if ((previousObject.x > secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            startY = previousObject.y + previousObject.height;\r\n            startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n            endY = startY - (startY - (secondObject.y));\r\n            endX = startX;\r\n        }\r\n        //if second is inside previous range\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) > (secondObject.x + secondObject.width))) {\r\n            startY = secondObject.y;\r\n            startX = secondObject.x + (0.5 * secondObject.width);\r\n\r\n            endY = startY + previousObject.height + (previousObject.y - startY);\r\n            endX = startX;\r\n        }\r\n        //If pre is upLeft of sec extend whichever box is better horizontally and fit\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + (secondObject.x - previousObject.x);\r\n                secondObject.x = previousObject.x;\r\n\r\n                startY = previousObject.y + previousObject.height;\r\n                startX = secondObject.x + previousObject.width / 2;\r\n                endY = secondObject.y;\r\n                endX = startX;\r\n                //second obj is changing size\r\n\r\n                //fixed\r\n                checkArrowsConnectedToBox(secondObject);\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + ((secondObject.x + secondObject.width) - (previousObject.x + previousObject.width));\r\n                previousObject.x = previousObject.x;\r\n\r\n                startY = secondObject.y;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y + previousObject.height;\r\n                endX = startX;\r\n                //previous obj is changing size\r\n\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n        //If pre is upright of sec extend whichever box is bigger horizontally and fit\r\n        else if (previousObject.x > secondObject.x) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + ((previousObject.x + previousObject.width) - (secondObject.x + secondObject.width));\r\n\r\n                startY = previousObject.y + previousObject.height;\r\n                startX = previousObject.x + previousObject.width / 2;\r\n                endY = secondObject.y;\r\n                endX = startX;\r\n                //previous obj is changing size\r\n\r\n                //this one is fixed\r\n                checkArrowsConnectedToBox(secondObject);\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + (previousObject.x - secondObject.x);\r\n                previousObject.x = secondObject.x;\r\n\r\n                startY = secondObject.y;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y + previousObject.height;\r\n                endX = startX;\r\n\r\n                //second obj is changing size\r\n\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //previous object is left \r\n    else if (previousObject.x + previousObject.width < secondObject.x) {\r\n\r\n        //Previous is smaller\r\n        if (previousObject.y > secondObject.y && previousObject.y + previousObject.height + 10 < secondObject.y + secondObject.height + 10) {\r\n            startY = previousObject.y + (previousObject.height + 10) / 2;\r\n            startX = previousObject.x + previousObject.width;\r\n\r\n            endX = secondObject.x;\r\n            endY = startY;\r\n\r\n        }\r\n        //Second is smaller\r\n        else if (secondObject.y > previousObject.y && secondObject.y + secondObject.height + 10 < previousObject.y + previousObject.height + 10) {\r\n            startY = secondObject.y + (secondObject.height + 10) / 2;\r\n            startX = secondObject.x;\r\n\r\n            endX = previousObject.x + previousObject.width;\r\n            endY = startY;\r\n\r\n        }\r\n        //Top Left and peeking\r\n        else if (previousObject.y + previousObject.height + 10 > secondObject.y && secondObject.y > previousObject.y) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.height = secondObject.height + (secondObject.y - previousObject.y);\r\n                secondObject.y = previousObject.y;\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = previousObject.x + previousObject.width;\r\n                endX = secondObject.x;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n                console.log(\"m\");\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                let increase = previousObject.height + 10 + ((secondObject.y + secondObject.height) - (previousObject.y + previousObject.height));\r\n                //looks at x coord and y coord and @ that coord checks if there's a box\r\n                //resizeVars[0] returns the box if there is a\r\n                //resizeVars[1] is which side/corner of the box that its coords are expected to be at (else null)\r\n                let resizeVars = checkResizeBounds(previousObject.x + previousObject.width, previousObject.y + previousObject.height + 10);\r\n                console.log(resizeVars);\r\n                resizeVars[0].expandSide(resizeVars[1], previousObject.x + previousObject.width, previousObject.y + increase, canvasContext);\r\n\r\n\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n                startX = secondObject.x;\r\n\r\n                endX = previousObject.x + previousObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n                console.log(\"n\");\r\n            }\r\n        }\r\n        //Bottom Left and peeking\r\n        else if (secondObject.y + secondObject.height + 10 > previousObject.y && previousObject.y + previousObject.height + 10 > secondObject.y + secondObject.height + 10) {\r\n            if (blockPre <= blockSec) {\r\n\r\n                let increase = secondObject.y + secondObject.height + 10 + ((previousObject.y + previousObject.height + 10) - (secondObject.y + secondObject.height + 10));\r\n\r\n                let resizeVars = checkResizeBounds(secondObject.x + secondObject.width, secondObject.y + secondObject.height + 10);\r\n                console.log(resizeVars);\r\n                resizeVars[0].expandSide(resizeVars[1], secondObject.x + secondObject.width, increase, canvasContext);\r\n\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = secondObject.x;\r\n\r\n                endX = previousObject.x + previousObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n                console.log(\"o\");\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                previousObject.height = previousObject.height + 10 + (previousObject.y - secondObject.y);\r\n                previousObject.y = secondObject.y;\r\n\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n                startX = secondObject.x;\r\n\r\n                endX = previousObject.x + previousObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n                console.log(\"p\");\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    //Previous object is right side\r\n    else if (previousObject.x > (secondObject.x + secondObject.width)) {\r\n\r\n        //Previous is smaller and on inside\r\n        if (previousObject.y > secondObject.y && previousObject.y + previousObject.height < secondObject.y + secondObject.height) {\r\n            startY = previousObject.y + (previousObject.height + 10) / 2;\r\n            startX = previousObject.x;\r\n\r\n            endX = secondObject.x + secondObject.width;\r\n            endY = startY;\r\n\r\n        }\r\n        //Second is smaller and on inside\r\n        else if (secondObject.y > previousObject.y && secondObject.y + secondObject.height < previousObject.y + previousObject.height) {\r\n            startY = secondObject.y + (secondObject.height + 10) / 2;\r\n            startX = secondObject.x + secondObject.width;\r\n\r\n            endX = previousObject.x;\r\n            endY = startY;\r\n\r\n            console.log(\"r\");\r\n        }\r\n        //Top Right and peeking\r\n        else if (previousObject.y + previousObject.height + 10 > secondObject.y && secondObject.y > previousObject.y) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.height = secondObject.height + 10 + (secondObject.y - previousObject.y);\r\n                secondObject.y = previousObject.y;\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = previousObject.x;\r\n\r\n                endX = secondObject.x + secondObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n                console.log(\"s\");\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                previousObject.height = previousObject.height + 10 + ((secondObject.y + secondObject.height + 10) - (previousObject.y + previousObject.height + 10));\r\n\r\n                startX = secondObject.x + secondObject.width;\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n\r\n                endX = previousObject.x;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n                console.log(\"t\");\r\n            }\r\n\r\n        }\r\n        //Bottom Left and peeking\r\n        else if (secondObject.y + secondObject.height + 10 < previousObject.y + previousObject.height + 10 && previousObject.y < secondObject.y + secondObject.height + 10) {\r\n            if (blockPre <= blockSec) {\r\n                let increase = secondObject.height + 10 + ((previousObject.y + previousObject.height + 10) - (secondObject.y + secondObject.height + 10));\r\n                let resizeVars = checkResizeBounds(secondObject.x + secondObject.width, secondObject.y + secondObject.height + 10);\r\n                console.log(resizeVars);\r\n                resizeVars[0].expandSide(resizeVars[1], secondObject.x + secondObject.width, secondObject.y + increase, canvasContext);\r\n\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = previousObject.x;\r\n\r\n                endX = secondObject.x + secondObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n                console.log(\"u\");\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                let increase = previousObject.height + 10 + (previousObject.y - secondObject.y);\r\n                let resizeVars = checkResizeBounds(previousObject.x + previousObject.width, previousObject.y + previousObject.height + 10);\r\n                console.log(resizeVars);\r\n                resizeVars[0].expandSide(resizeVars[1], previousObject.x + previousObject.width, previousObject.y + increase, canvasContext);\r\n\r\n                previousObject.y = secondObject.y;\r\n\r\n\r\n                startX = previousObject.x;\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n\r\n                endX = secondObject.x + secondObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n                console.log(\"v\");\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    arrowPath.push(getConnectionDataForArrow(startX, startY).coord);\r\n\r\n\r\n    let newObject = createObject(canvas, startX, startY, endX, endY);\r\n\r\n\r\n\r\n    return newObject;\r\n\r\n\r\n\r\n}\r\n//\r\nexport function collectMehBox(boxes, arrows, bigbox, item, index) {\r\n\r\n    //console.log(\"runningcollect\");\r\n    if (bigbox.semanticIdentity.UUID === item.destVertexUUID) {\r\n        let box = getObjectFromUUID(item.sourceVertexUUID);\r\n        if ((bigbox.y) * index + (box.y) * (1 - index) > (box.y + box.height + 10) * index + (bigbox.y + bigbox.height + 10) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n\r\n\r\n    } else if (bigbox.semanticIdentity.UUID === item.sourceVertexUUID) {\r\n        let box = getObjectFromUUID(item.destVertexUUID);\r\n        if ((bigbox.y) * index + (box.y) * (1 - index) > (box.y + box.height + 10) * index + (bigbox.y + bigbox.height + 10) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n    }\r\n    return [boxes, arrows];\r\n}\r\n//Will arrange boxes and arrows in linked order above or below the big box.\r\n//Bigbox - The larger important box\r\n//boxes - list of all the boxes being moved\r\n//arrows - arrows connect to the above boxes\r\n//index - denotes the side that boxes are connected to \r\nexport function arrangeboxesandarrows(bigbox, boxes, arrows, index) {\r\n    //index = 1 = up\r\n    if (boxes.length >= 2) {\r\n        let b = 0;\r\n        let x = bigbox.x;\r\n        let y = bigbox.y + (bigbox.height + 30) * (1 - index);\r\n        for (b; b < boxes.length; b++) {\r\n            boxes[b].x = x;\r\n            boxes[b].y = y - ((boxes[b].height + 30) * index);\r\n            x = x + boxes[b].width + 20;\r\n\r\n            if (boxes[b].x + boxes[b].width > bigbox.x + bigbox.width) {\r\n                bigbox.width = bigbox.width + boxes[b].width\r\n            }\r\n        }\r\n        b = 0;\r\n        for (b; b < boxes.length; b++) {\r\n            console.log(arrows[b]);\r\n            let conData = getConnectionDataForArrow(boxes[b].x + boxes[b].width / 2, bigbox.y + (bigbox.height + 10) * (1 - index));\r\n            arrows[b].pathData[1] = conData['nearest'];\r\n            StickArrowToObject(conData, arrows[b], 1);\r\n        }\r\n    }\r\n}\r\n//\r\nexport function collectsidebox(boxes, arrows, bigbox, item, index) {\r\n\r\n    if (bigbox.semanticIdentity.UUID === item.destVertexUUID) {\r\n        let box = getObjectFromUUID(item.sourceVertexUUID);\r\n        if ((bigbox.x) * index + (box.x) * (1 - index) > (box.x + box.width) * index + (bigbox.x + bigbox.width) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n\r\n\r\n    } else if (bigbox.semanticIdentity.UUID === item.sourceVertexUUID) {\r\n        let box = getObjectFromUUID(item.destVertexUUID);\r\n        if ((bigbox.x) * index + (box.x) * (1 - index) > (box.x + box.width) * index + (bigbox.x + bigbox.width) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n    }\r\n    return [boxes, arrows];\r\n}\r\nexport function arrangeboxesandarrowshorizontal(bigbox, boxes, arrows, index) {\r\n    //index = 0 = right\r\n    if (boxes.length >= 2) {\r\n        let b = 0;\r\n        let x = bigbox.x + (bigbox.width + 30) * (1 - index);\r\n        let y = bigbox.y;\r\n        for (b; b < boxes.length; b++) {\r\n            boxes[b].x = x - ((boxes[b].width + 30) * index);\r\n            boxes[b].y = y;\r\n            y = y + boxes[b].height + 20;\r\n            //extending box\r\n            if (boxes[b].y + boxes[b].height + 10 > bigbox.y + bigbox.height + 10) {\r\n                bigbox.height = bigbox.height + boxes[b].height;\r\n            }\r\n        }\r\n        b = 0;\r\n        for (b; b < boxes.length; b++) {\r\n            console.log(arrows[b]);\r\n            let conData = getConnectionDataForArrow(bigbox.x + (bigbox.width) * (1 - index), boxes[b].y + (boxes[b].height + 10) / 2);\r\n            arrows[b].pathData[1] = conData['nearest'];\r\n            StickArrowToObject(conData, arrows[b], 1);\r\n        }\r\n    }\r\n}\r\n\r\nexport function shiftBoxes(secondObject) {\r\n    //if box is within horizontal bounds\r\n\r\n    let upBoxes = [];\r\n    let upArrows = [];\r\n    let downBoxes = [];\r\n    let downArrows = [];\r\n    let leftBoxes = [];\r\n    let leftArrows = [];\r\n    let rightBoxes = [];\r\n    let rightArrows = [];\r\n    let [bigBox, smallBox] = checkBoxSizesAndReturnBigBox(previousObject, secondObject);\r\n\r\n    //grab all arrows connected to either object\r\n    //Index 0 means down index 1 means up\r\n\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.constructor.name === \"Arrow\") {\r\n            //get the big box because it has all the arrows connected\r\n            if (bigBox.y + bigBox.height + 10 < smallBox.y && smallBox.x > bigBox.x && smallBox.x + smallBox.width < bigBox.x + bigBox.width) {\r\n                [downBoxes, downArrows] = collectMehBox(downBoxes, downArrows, bigBox, item, 0);\r\n\r\n\r\n            } else if (bigBox.y > (smallBox.y + smallBox.height + 10) && smallBox.x > bigBox.x && smallBox.x + smallBox.width < bigBox.x + bigBox.width) {\r\n                [upBoxes, upArrows] = collectMehBox(upBoxes, upArrows, bigBox, item, 1);\r\n\r\n            } else if (bigBox.x > smallBox.x + smallBox.width && smallBox.y > bigBox.y && smallBox.y + smallBox.height + 10 < bigBox.y + bigBox.height + 10) {\r\n                console.log(\"left ran\");\r\n                [leftBoxes, leftArrows] = collectsidebox(leftBoxes, leftArrows, bigBox, item, 1);\r\n\r\n            } else if (bigBox.x + bigBox.width < smallBox.x && smallBox.y > bigBox.y && smallBox.y + smallBox.height + 10 < bigBox.y + bigBox.height + 10) {\r\n                console.log(\"right ran\");\r\n                [rightBoxes, rightArrows] = collectsidebox(rightBoxes, rightArrows, bigBox, item, 0);\r\n            }\r\n        }\r\n    });\r\n    //Do stuff to boxes\r\n    //1 = up\r\n    //0 = down\r\n    arrangeboxesandarrows(bigBox, downBoxes, downArrows, 0);\r\n    arrangeboxesandarrows(bigBox, upBoxes, upArrows, 1);\r\n\r\n    arrangeboxesandarrowshorizontal(bigBox, leftBoxes, leftArrows, 1);\r\n    arrangeboxesandarrowshorizontal(bigBox, rightBoxes, rightArrows, 0);\r\n\r\n    //console.log(downboxes.length);\r\n\r\n\r\n\r\n}\r\n\r\nexport function onLeftMouseRelease(canvas, x, y) {\r\n\r\n\r\n    if (cancelDraw) {\r\n        cancelDraw = false;\r\n        return;\r\n    }\r\n\r\n    if (resizing === true) {\r\n        resizing = false;\r\n        canvasElement.onmousemove = null;\r\n        return\r\n    }\r\n\r\n    // Disable example draw\r\n    canvasElement.onmousemove = null;\r\n\r\n    if (arrowToolSelected()) {\r\n        \r\n\r\n        if (getConnectionDataForArrow(x, y).snapped && !firstArrowJoint) {\r\n            // Create\r\n            let secondObject = findIntersected(x, y);\r\n            let newObject = null;\r\n            let firstObject = arrowPath[0] // the first position in the arrowpath array will either be null or the first vertex that is clicked with an arrow. \r\n                                            // therefor the arrow will not be created unless the first object that is clicked with the arrow tool is a vertex. - cooper\r\n            \r\n            if (firstObject !== null && secondObject !== null && savedArrows !== null) {\r\n                // create the arrow using the createObject function rather than the other function they were using as this seems much more stable - cooper\r\n                // also deleted a weird forloop that they had that i assume was for stopping the arrow overlap issue, but they themselves commented that it doesnt work\r\n                newObject = createObject(canvas, mouseStartX, mouseStartY, x, y); \r\n               \r\n            } \r\n\r\n            // Reset path\r\n            arrowPath = [];\r\n            firstArrowJoint = true;\r\n\r\n\r\n            if (newObject !== null) {\r\n                addObject(newObject);\r\n            }\r\n\r\n\r\n            drawAll(currentObjects);\r\n\r\n\r\n\r\n            //converting all arrows to savedArrows array\r\n            let i = 0;\r\n            currentObjects.flatten().forEach((item) => {\r\n                if (item.constructor.name === \"Arrow\") {\r\n                    savedArrows[i] = item.path;\r\n                    i++;\r\n                }\r\n\r\n            });\r\n\r\n            if (newObject !== null) {\r\n                canvas.props.setLeftMenu(newObject);\r\n            }\r\n\r\n            canvas.props.setMode(Tool.Select);\r\n            if (previousObject !== null && secondObject !== null) {\r\n                shiftBoxes(secondObject);\r\n            }\r\n            previousObject = null;\r\n\r\n\r\n        } else {\r\n            //maybe here where we can disable compound lines\r\n\r\n            //save object here\r\n            previousObject = findIntersected(x, y);\r\n            \r\n        \r\n\r\n            arrowPath.push(getConnectionDataForArrow(x, y).coord);\r\n            lastX = x;\r\n            lastY = y;\r\n            canvasElement.onmousemove = function (e) {\r\n                onMouseMove(e, canvas)\r\n            };\r\n            firstArrowJoint = false;\r\n        }\r\n\r\n    }\r\n\r\n    if (canvas.tool === Tool.Vertex) {\r\n        let newObject = createObject(canvas, mouseStartX, mouseStartY, x, y);\r\n        addObject(newObject);\r\n\r\n        canvas.props.setLeftMenu(newObject);\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n    if (canvas.tool === Tool.Artifact) {\r\n        let newObject = createArtifact(canvas, mouseStartX, mouseStartY);\r\n        addObject(newObject);\r\n\r\n        canvas.props.setLeftMenu(newObject);\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n    if (canvas.tool === Tool.Container) {\r\n        let newObject = createContainer(canvas, mouseStartX, mouseStartY);\r\n        newObject.setColour(\"#FFFFFF\");\r\n        addObject(newObject);\r\n        canvas.props.setLeftMenu(newObject);\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n\r\n\r\n\r\n\r\n    drawAll(currentObjects);\r\n\r\n}\r\n\r\nfunction onMouseMove(e, canvas) {\r\n    let position = getGraphXYFromMouseEvent(e);\r\n\r\n    // Redraw Existing Objects\r\n    drawAll(currentObjects);\r\n\r\n    // Draw the new object\r\n    let newObject = createObject(canvas, mouseStartX, mouseStartY, position[0], position[1]);\r\n\r\n    canvasContext.globalAlpha = 0.75;\r\n    if (newObject !== null) {\r\n        newObject.draw(canvasContext);\r\n    }\r\n    canvasContext.globalAlpha = 1.0;\r\n}\r\n\r\nexport function onMiddleClick(canvas, x, y, savedObjects = null, shiftDown = false) {\r\n    // for arrows\r\n    startMoveX = x;\r\n    startMoveY = y;\r\n    // selecting the object based on coordinate\r\n    // if it doesnt find an object dont run it\r\n\r\n    let selectedObject = findIntersected(x, y);\r\n\r\n    //compareSizesToMoveAll returns any connected vertices to the selected along with the arrows themselves to be updated\r\n    let [friendObject, arrowsVert, arrowsHoriz] = compareSizesToMoveAll(selectedObject);\r\n\r\n        //If the selected block has a friend (connected by arrow) it will begin to try and identify friends of friends\r\n    if (friendObject !== null || friendObject.length >= 1) {\r\n        let ObjectsToCheck = friendObject;\r\n        let nextObjects = [];\r\n\r\n        //For loop to check all the closest friends (connected directly to selected )\r\n        for (let n = 0; n < ObjectsToCheck.length; n++) {\r\n            let [newfriendObject, newarrowsVert, newarrowsHoriz] = compareSizesToMoveAll(ObjectsToCheck[n]);\r\n            if (newfriendObject !== null) {\r\n\r\n                //for loop to check for duplicates and remove if any\r\n                for (let nf = 0; nf < newfriendObject.length; nf++) {\r\n                    console.log(ObjectsToCheck.length)\r\n                    for (let of = 0; of < ObjectsToCheck.length; of++) {\r\n                        //doesn't get run?:\r\n                        if (newfriendObject[nf].semanticIdentity.UUID === ObjectsToCheck[of].semanticIdentity.UUID) {\r\n                            newfriendObject.splice(nf, 1);\r\n                        }\r\n                    }\r\n                }\r\n                //Adds the objects that are connected to the friends to the friend list.\r\n                if (newfriendObject.length >= 1) {\r\n                    for (let p = 0; p < newfriendObject.length; p++) {\r\n                        nextObjects.push(newfriendObject[p]);\r\n                        friendObject.push(newfriendObject[p]);\r\n                    }\r\n\r\n                } \r\n            }\r\n           \r\n        }\r\n        //Updates the friendlist to begin a new search. \r\n        ObjectsToCheck = nextObjects; \r\n\r\n\r\n\r\n    }\r\n    let F = [];\r\n    if (friendObject !== null) {\r\n        let i = 0;\r\n        for (i; i < friendObject.length; i++) {\r\n            F.push([x - friendObject[i].x, y - friendObject[i].y]); //distance from mouse to actual object's x, y\r\n            //console.log(F);\r\n        }\r\n    }\r\n\r\n    let S = []; //previous coords\r\n    if (savedObjects !== null) {\r\n        let i = 0;\r\n        for (i; i < savedObjects.length; i++) {\r\n            S.push([x - savedObjects[i].x, y - savedObjects[i].y]);\r\n            //console.log(F);\r\n        }\r\n    }\r\n\r\n    if (selectedObject !== null) {\r\n        saveBlockStates(canvas, x, y);\r\n        // check the distance between the mouse and the object\r\n        let saveDisX = x - selectedObject.x;\r\n        let saveDisY = y - selectedObject.y;\r\n\r\n\r\n        canvasElement.onmousemove = function (e) { moveObject(e, selectedObject, friendObject, F, savedObjects, S, saveDisX, saveDisY, arrowsVert, arrowsHoriz, shiftDown) }\r\n    }\r\n\r\n}\r\n\r\nexport function onMouseLeave() {\r\n    canvasElement.onmousemove = {};\r\n    firstArrowJoint = true;\r\n    drawAll()\r\n}\r\n\r\n// moving objects in respect to cursor values saveDisX, saveDisY\r\n// friends = the smaller boxes that are connected to the bigger box\r\nfunction moveObject(e, object, friends, F, savedObjects = null, S, saveDisX, saveDisY, arrowsVert, arrowsHoriz, shiftDown) {\r\n    if (object != null) {\r\n        if (object.constructor.name === \"Vertex\") {\r\n            let position = getGraphXYFromMouseEvent(e);\r\n            let x = position[0] - saveDisX;\r\n            let y = position[1] - saveDisY;\r\n\r\n            //for loop iterate through all boxes assume they not empty\r\n            if (shiftDown) {\r\n                if (friends !== null) {\r\n                    let i = 0;\r\n                    //check friends' previous location and cursors location\r\n                    for (i; i < friends.length; i++) {\r\n                        friends[i].x = position[0] - F[i][0];\r\n                        friends[i].y = position[1] - F[i][1];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (savedObjects !== null) {\r\n                let i = 0;\r\n                //check friends' previous location and cursors location\r\n                for (i; i < savedObjects.length; i++) {\r\n                    savedObjects[i].x = position[0] - S[i][0];\r\n                    savedObjects[i].y = position[1] - S[i][1];\r\n                }\r\n            }\r\n\r\n\r\n\r\n            if (arrowsVert !== null) {\r\n                let conData = 0;\r\n                let j = 0;\r\n\r\n                for (j; j < arrowsVert.length; j++) {\r\n                    // source = one that's been clicked\r\n                    arrowsVert[j].path[1][0] = arrowsVert[j].path[0][0];\r\n                    conData = getConnectionDataForArrow(arrowsVert[j].path[1][0], arrowsVert[j].path[1][1]);\r\n\r\n\r\n\r\n                    if (conData['nearest'] !== null) {\r\n\r\n                        arrowsVert[j].pathData[1] = conData['nearest'];\r\n                        StickArrowToObject(conData, arrowsVert[j], 0);\r\n                        //console.log(arrowsVert[j].path);\r\n                    } else {\r\n                        //delete arrow                        \r\n                        deleteElement(arrowsVert[j]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (arrowsHoriz !== null) {\r\n                let conData = 0;\r\n                let k = 0;\r\n                for (k; k < arrowsHoriz.length; k++) {\r\n                    // source = one that's been clicked\r\n                    arrowsHoriz[k].path[1][1] = arrowsHoriz[k].path[0][1];\r\n                    conData = getConnectionDataForArrow(arrowsHoriz[k].path[1][0], arrowsHoriz[k].path[1][1]);\r\n\r\n                    if (conData['nearest'] !== null) {\r\n\r\n                        arrowsHoriz[k].pathData[1] = conData['nearest'];\r\n                        StickArrowToObject(conData, arrowsHoriz[k], 0);\r\n                        //console.log(arrowsHoriz[k].path);\r\n                    } else {\r\n                        //delete arrow\r\n                        deleteElement(arrowsHoriz[k]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            object.x = x;\r\n            object.y = y;\r\n\r\n            updateArrows();\r\n\r\n\r\n        } else if (object.constructor.name === \"Arrow\") {\r\n            return;\r\n\r\n        }\r\n    }\r\n}\r\nexport function updateArrows() {\r\n    let flattenedObjects = currentObjects.flatten();\r\n    flattenedObjects.forEach((item) => {\r\n        if (item !== null) {\r\n            if (item.constructor.name === \"Arrow\") {\r\n                item.rebuildPath();\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function solidifyObject() {\r\n    canvasElement.onmousemove = null;\r\n}\r\n\r\n// Zoom and pan\r\nexport function setZoom(newZoom) {\r\n    zoom = newZoom;\r\n\r\n    resetMouseOrigin();\r\n\r\n    drawAll();\r\n}\r\n\r\n// Useful for debugging\r\nexport function drawMarker(xpos, ypos) {\r\n    const radius = 2;\r\n    const lineWidth = 0.5;\r\n    const strokeColour = \"#007ACC\";\r\n    const fillColour = \"#007ACC55\";\r\n\r\n    let oldLineWidth = canvasContext.lineWidth;\r\n    canvasContext.lineWidth = lineWidth;\r\n    let oldStrokeStyle = canvasContext.strokeStyle;\r\n    canvasContext.strokeStyle = strokeColour;\r\n    let oldFillStyle = canvasContext.fillStyle;\r\n    canvasContext.fillStyle = fillColour;\r\n\r\n    canvasContext.globalAlpha = 1.0;\r\n    canvasContext.beginPath();\r\n    canvasContext.arc(xpos, ypos, radius, 0, Math.PI * 2, false);\r\n    canvasContext.fill();\r\n    canvasContext.stroke();\r\n    canvasContext.closePath();\r\n\r\n    canvasContext.lineWidth = oldLineWidth;\r\n    canvasContext.strokeStyle = oldStrokeStyle;\r\n    canvasContext.fillStyle = oldFillStyle;\r\n}\r\n\r\n// Gets the distance between x1, y1 and x2, y2\r\nexport function getDistance(x1, y1, x2, y2) {\r\n    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\r\n}\r\n\r\n// Finds the object that is intersected with the cursor, returns null if no objects are intersected\r\nexport function findIntersected(x, y) {\r\n    let selectedItem = null;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item !== null) {\r\n            if (item.intersects(x, y)) {\r\n                //console.log(\"Intersection detected with \", item.constructor.name);\r\n                selectedItem = item;\r\n            }\r\n        }\r\n    });\r\n    return selectedItem;\r\n}\r\n\r\nfunction createArtifact(canvas, x1, y1) {\r\n    let newPath;\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    if (canvas.tool === Tool.Artifact) {\r\n        // Get positions\r\n        let pos = orderCoordinates(x1, y1, x1 + 450, y1 + 50);\r\n        let vy1 = findNearestGridY(pos[1], 0);\r\n        let vy2 = findNearestGridY(pos[3], 0);\r\n\r\n        // Add vertex\r\n        return new Vertex(\"\", [\"\"], pos[0], findNearestGridY(y1, 1), pos[2] - pos[0], vy2 - vy1);\r\n\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction createContainer(canvas, x1, y1) {\r\n    let newPath;\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    if (canvas.tool === Tool.Container) {\r\n        // Get positions\r\n        let pos = orderCoordinates(x1, y1, x1 + 100, y1 + 60);\r\n        let vy1 = findNearestGridY(pos[1], 0);\r\n        let vy2 = findNearestGridY(pos[3], 0);\r\n\r\n        // Add vertex\r\n        return new Vertex(\"\", [\"\"], pos[0], findNearestGridY(y1, 1), pos[2] - pos[0], vy2 - vy1);\r\n\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction createObject(canvas, x1, y1, x2, y2) {\r\n    let newPath;\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    if (canvas.tool === \"Vertex\") {\r\n        // Get positions\r\n        let pos = orderCoordinates(x1, y1, x2 + 10, y2);\r\n        let vy1 = findNearestGridY(pos[1], 0);\r\n        let vy2 = findNearestGridY(pos[3], 0);\r\n\r\n        // Add vertex\r\n        return new Vertex(\"\", [\"\"], pos[0], findNearestGridY(y1, 1), pos[2] - pos[0], vy2 - vy1);\r\n\r\n    } else if (arrowToolSelected()) {\r\n        // Generate path\r\n\r\n        newPath = arrowPath.concat([getConnectionDataForArrow(x2, y2).coord]);\r\n\r\n        // Check if first path connects to a vertex, and ignore if it doesn't\r\n        // Should be 0 if the connectable connects to a vertex\r\n        //\r\n        //\r\n        //because createObject is always running when moving mouse\r\n        //\r\n        // if current mouse pos is not over a box, don't create arrow\r\n        // if removed here, it is still removed in another function \r\n        //let intersection = findIntersected(x2, y2);\r\n        if (newPath[0][0] !== 0) {\r\n            return null;\r\n        }\r\n\r\n        // Create arrow\r\n        \r\n        let arrow = new Arrow(currentObjectsFlattened, newPath, arrowType);\r\n        arrow.rebuildPath(currentObjectsFlattened);\r\n        return arrow;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function getGraphXYFromMouseEvent(e) {\r\n    resetMouseOrigin();\r\n\r\n    let x = (e.clientX - mouseOriginX) / getEffectiveZoom();\r\n    let y = (e.clientY - mouseOriginY) / getEffectiveZoom();\r\n\r\n    return [x, y];\r\n}\r\n\r\nexport function getDownload() {\r\n\r\n    let DLelement = document.createElement(\"a\");\r\n    DLelement.href = canvasElement.toDataURL(\"image/png\").replace(/^data:image\\/[^;]/, 'data:application/octet-stream');\r\n    DLelement.download = \"Graph.png\";\r\n    document.body.appendChild(DLelement);\r\n    DLelement.click();\r\n\r\n}\r\n\r\nfunction orderCoordinates(sx, sy, ex, ey) {\r\n    // This code also ensures x1 < x2 and y1 < y2\r\n    let x1 = Math.min(sx, ex);\r\n    let y1 = Math.min(sy, ey);\r\n    let x2 = Math.max(sx, ex);\r\n    let y2 = Math.max(sy, ey);\r\n\r\n    return [x1, y1, x2, y2];\r\n}\r\n\r\n// Gets the effective (percentage) zoom from the current zoom\r\nfunction getEffectiveZoom() {\r\n    return zoom / 100;\r\n}\r\n\r\n// This should be used whenever the window itself resizes\r\nfunction recalculateScale() {\r\n    // Adjusts the aspect ratio so it is 1:1 instead of matching the windows.\r\n    // Also removes blurry rendering\r\n    //let dpi = window.devicePixelRatio;\r\n    let canvasContainer = document.getElementsByClassName(\"Canvas\")[0];\r\n    let styleHeight = +getComputedStyle(canvasContainer).getPropertyValue(\"height\").slice(0, -2);\r\n    let styleWidth = +getComputedStyle(canvasContainer).getPropertyValue(\"width\").slice(0, -2);\r\n\r\n    canvasElement.setAttribute('height', styleHeight * getEffectiveZoom());\r\n    canvasElement.setAttribute('width', styleWidth * getEffectiveZoom());\r\n\r\n    // Configurable\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n}\r\n\r\nfunction clearCanvas() {\r\n    // Fill base canvas\r\n    canvasContext.fillStyle = \"#ffffff\";\r\n    canvasContext.fillRect(0, 0, canvasWidth, canvasHeight);\r\n}\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { SemanticIdentity } from \"./SemanticIdentity\";\r\nimport {drawMarker, getDistance, getCurrentRenderKey} from \"../UIElements/CanvasDraw\";\r\nimport {getModelRenderKey} from \"../UIElements/ContainmentTree\";\r\nimport * as ArrowProps from \"./ArrowProperties\";\r\nimport { EdgeEnd } from \"./EdgeEnd\";\r\nimport {Tool} from \"../UIElements/LeftMenu\";\r\nimport * as canvasDraw from \"../UIElements/CanvasDraw\"\r\n\r\nexport class Arrow {\r\n    // Connects an arrow fromVertex to toVertex\r\n    // pathData is an array of objects that can either be a:\r\n    //      0) Vertex Data\r\n    //         [0, UUID, xPercentage, yPercentage]\r\n    //         The Percentage data is the relative percentage\r\n    //              e.g. 0,0 represents top left, 1,1 bottom right etc\r\n    //      1) Array containing an x and y element\r\n    //         [1, x, y]\r\n    constructor(objectsList, pathData, type, semanticIdentity) {\r\n        this.typeName = \"Arrow\";\r\n\r\n        if (semanticIdentity !== undefined || objectsList === null){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            if (objectsList.length > 1) {\r\n                this.semanticIdentity = new SemanticIdentity(\"Arrow from \" + objectsList[0].semanticIdentity.UUID + \" to \" + objectsList[1].semanticIdentity.UUID, \"\", \"\", \"\", undefined, []);\r\n            } else if (objectsList.length === 1) {\r\n                this.semanticIdentity = new SemanticIdentity(\"Arrow connecting \" + objectsList[0].semanticIdentity.UUID, \"\", \"\", \"\", undefined, []);\r\n            } else {\r\n                this.semanticIdentity = new SemanticIdentity(\"Arrow connecting 1 or less vertices\", \"\", \"\", \"\", undefined, []);\r\n            }\r\n        }\r\n\r\n        this.sourceEdgeEnd = new EdgeEnd(this.semanticIdentity.UUID);\r\n        this.destEdgeEnd = new EdgeEnd(this.semanticIdentity.UUID);\r\n\r\n        // Ensure there are at least 2 points\r\n        if (pathData.length === 1) pathData.push(pathData[0]);\r\n        // Save pathData for later\r\n        this.pathData = pathData;\r\n\r\n        this.sourceVertexUUID = null;\r\n        this.destVertexUUID = null;\r\n        this.updateAttachedVertices();\r\n\r\n        // Construct Path\r\n        this.rebuildPath();\r\n        \r\n        // Type\r\n\r\n        this.lineColour = ArrowProps.LineColour.BLACK;\r\n        this.lineType = ArrowProps.LineType.SOLID;\r\n\r\n        if (type === Tool.Edge || type === Tool.Specialisation || type === Tool.Visibility) {\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n        }else{\r\n            console.log(\"Failed to find correct tool\");\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n        }\r\n\r\n        if (type === Tool.Edge) {\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n            this.typeName = \"Edge\";\r\n        }else if (type === Tool.Specialisation){\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.TRIANGLE\r\n            this.typeName = \"Specialisation\";\r\n        }else if (type === Tool.Visibility){\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            this.lineType = ArrowProps.LineType.DASHED\r\n            this.typeName = \"Visibility\";\r\n        }else{\r\n            console.log(\"Failed to find correct tool\");\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n        }\r\n\r\n        this.edgeType = type;\r\n\r\n        this.selected = false;\r\n\r\n        this.sourceIsNavigable = false;\r\n        this.destIsNavigable = false;\r\n        this.sourceIsAggregation = false;\r\n        this.destIsAggregation = false;\r\n\r\n        // Model key for rendering\r\n        this.arrowModelKey = canvasDraw.getCurrentModel();\r\n\r\n        // Render key for the arrow for placing in tree\r\n        this.arrowRenderKey = getModelRenderKey(this.arrowModelKey);\r\n    }\r\n\r\n    // Set the model key\r\n    setModelKey(key){\r\n        this.arrowModelKey = key;\r\n    }\r\n\r\n    getModelKey(){\r\n        return this.arrowModelKey;\r\n    }\r\n\r\n    // Set the render key. This is done in ContainmentTree.js\r\n    setRenderKey(key){\r\n        this.arrowRenderKey = key;\r\n    }\r\n\r\n    // Return the render key. This is called in CanvasDraw\r\n    getRenderKey(){\r\n        return this.arrowRenderKey;\r\n    }\r\n\r\n    toggleNavigable(side){\r\n        if(side === 0) {\r\n            this.sourceIsNavigable = !this.sourceIsNavigable;\r\n        }else if(side === 1){\r\n            this.destIsNavigable = !this.destIsNavigable;\r\n        }\r\n        if(this.sourceIsAggregation){\r\n            this.sourceIsNavigable = true;\r\n        }\r\n        if(this.destIsAggregation){\r\n            this.destIsNavigable = true;\r\n        }\r\n\r\n        if(this.sourceIsNavigable && this.destIsNavigable){\r\n            if(this.sourceIsAggregation){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }\r\n            else if(this.destIsAggregation){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n            }else{\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }\r\n        }else if(this.sourceIsNavigable){\r\n            if(this.sourceIsAggregation){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }else {\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }\r\n        }else if(this.destIsNavigable){\r\n            if(this.destIsAggregation){\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }else {\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }\r\n        }else{\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n        }\r\n\r\n    }\r\n\r\n    toggleAggregation(side){\r\n        if(side === 0){\r\n            this.sourceIsAggregation = !this.sourceIsAggregation;\r\n            if(this.destIsAggregation && this.sourceIsAggregation){\r\n                this.destIsAggregation = false;\r\n            }\r\n        }else{\r\n            this.destIsAggregation = !this.destIsAggregation;\r\n            if(this.destIsAggregation && this.sourceIsAggregation){\r\n                this.sourceIsAggregation = false;\r\n            }\r\n        }\r\n\r\n\r\n        if(this.sourceIsAggregation) {\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n            if(this.destIsNavigable){\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }else{\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n            }\r\n        }else if(this.destIsAggregation){\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n            if(this.sourceIsNavigable){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }else{\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n            }\r\n        }else{\r\n            // this updates the arrow heads so they are correct\r\n            this.toggleNavigable(100)\r\n        }\r\n    }\r\n\r\n    getNavigable(side){\r\n        if(side === 0){\r\n            return this.sourceIsNavigable;\r\n        }else{\r\n            return this.destIsNavigable;\r\n        }\r\n\r\n    }\r\n\r\n    getAggregation(side){\r\n        if(side === 0){\r\n            return this.sourceIsAggregation\r\n        }else{\r\n            return this.destIsAggregation\r\n        }\r\n\r\n    }\r\n\r\n    trimPath(){\r\n        this.pathData = [this.pathData[0], this.pathData[this.pathData.length-1]];\r\n        this.path = [this.path[0], this.path[this.path.length-1]];\r\n    }\r\n\r\n    // Rebuilds path from cached pathData\r\n    rebuildPath() {\r\n\r\n        let connectedObjectUUIDs = this.getObjectUUIDList();\r\n        let objects = [];\r\n\r\n        connectedObjectUUIDs.forEach((UUID) => {\r\n            objects.push(canvasDraw.getObjectFromUUID(UUID))\r\n        });\r\n\r\n        // X, Y data for path\r\n        this.path = [];\r\n\r\n        for (let i = 0; i < this.pathData.length; i++) {\r\n            // Check if its case 0 or 1\r\n            let pathItem = this.pathData[i];\r\n\r\n            //If the first element of a PathItem is 0, the second element contains the UUID of an object\r\n            if (pathItem[0] === 0) {\r\n                this.path.push(this.getZerothCasePathItem(objects, pathItem));\r\n            }\r\n            //If the first element is 1, the next two elements are the X and Y points, respectively\r\n            else if (pathItem[0] === 1) {\r\n                this.path.push([pathItem[1], pathItem[2]]);\r\n            } else {\r\n                console.error(\"Invalid PathData case, wrong case\", pathItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Gets pathItem from object (hopefully a vertex) based on UUID\r\n    // will come back to this to sort out arrows overlapping on creation\r\n    // for extra clarity pathItem[2] is where the arrow from/end is on the x axis of the vertex(0..1)\r\n    // and pathItem[3] is where the arrow is from/end is on the y axis of the vertex(0..1) - cooper\r\n    getZerothCasePathItem(objects, pathItem) {\r\n        for (let i = 0; i < objects.length; i++) {\r\n           // if(objects[0].semanticIdentity.UUID === objects[1].semanticIdentity.UUID){\r\n\r\n           // }\r\n            if (objects[i] !== null && objects[i] !== undefined) {\r\n                if (objects[i].semanticIdentity.UUID === pathItem[1]) {\r\n                    let x = pathItem[2]*objects[i].width + objects[i].x;\r\n                    let y = pathItem[3]*objects[i].realHeight + objects[i].y;\r\n                    return [x, y]\r\n                }\r\n            }\r\n        }\r\n\r\n        console.error(\"Could not find vertex to connect for pathItem\", pathItem);\r\n        return null;\r\n    }\r\n\r\n    getObjectUUIDList(){\r\n        let output = [];\r\n            this.pathData.forEach((item) => {\r\n                let index = this.pathData.indexOf(item);\r\n                if(item == null){\r\n                    this.pathData[index] = [1,this.path[index][0],this.path[index][1]]\r\n                }\r\n                if (this.pathData[index][0] === 0) {\r\n                    output.push(item[1])\r\n                }\r\n            });\r\n        return output\r\n    }\r\n\r\n    updateAttachedVertices() {\r\n        var pathStart = this.pathData[0];\r\n        var pathEnd = this.pathData[this.pathData.length - 1];\r\n\r\n        if (pathStart[0] === 0) {\r\n            this.sourceVertexUUID = pathStart[1];\r\n        } else {\r\n            this.sourceVertexUUID = null;\r\n        }\r\n\r\n        if (pathEnd[0] === 0) {\r\n            this.destVertexUUID = pathEnd[1];\r\n        } else {\r\n            this.destVertexUUID = null;\r\n        }\r\n    }\r\n\r\n    setSelected(selected) {\r\n        this.selected = selected;\r\n    }\r\n\r\n    updateSourceCardinality(lowerBound, upperBound, visibility) {\r\n        this.sourceEdgeEnd.updateCardinality(lowerBound, upperBound, visibility);\r\n    }\r\n\r\n    getSourceCardinalityVisibility() {\r\n        return this.sourceEdgeEnd.cardinality.isVisible;\r\n    }\r\n\r\n    toggleSourceCardinalityVisibility() {\r\n        this.sourceEdgeEnd.cardinality.toggleVisibility();\r\n    }\r\n\r\n    getSourceCardinalityLowerBound() {\r\n        return this.sourceEdgeEnd.cardinality.lowerBound;\r\n    }\r\n\r\n    getSourceCardinalityUpperBound() {\r\n        return this.sourceEdgeEnd.cardinality.upperBound;\r\n    }\r\n\r\n    updateDestCardinality(lowerBound, upperBound, visibility) {\r\n        this.destEdgeEnd.updateCardinality(lowerBound, upperBound, visibility);\r\n    }\r\n\r\n    getDestCardinalityVisibility() {\r\n        return this.destEdgeEnd.cardinality.isVisible;\r\n    }\r\n\r\n    toggleDestCardinalityVisibility() {\r\n        this.destEdgeEnd.cardinality.toggleVisibility();\r\n    }\r\n\r\n    getDestCardinalityLowerBound() {\r\n        return this.destEdgeEnd.cardinality.lowerBound;\r\n    }\r\n\r\n    getDestCardinalityUpperBound() {\r\n        return this.destEdgeEnd.cardinality.upperBound;\r\n    }\r\n\r\n    setStartLabel(label) {\r\n        this.sourceEdgeEnd.label = label;\r\n    }\r\n\r\n    setEndLabel(label) {\r\n        this.destEdgeEnd.label = label;\r\n    }\r\n\r\n    setLineColour(lineColour) {\r\n        let val = ArrowProps.StringNameToLineColour[lineColour];\r\n        if (val !== undefined) {\r\n            this.lineColour = val;\r\n        } else {\r\n            console.log(\"Attempted to assign invalid lineColour: %s\", lineColour);\r\n        }\r\n    }\r\n\r\n    setLineType(lineType) {\r\n        let val = ArrowProps.StringToLineType[lineType];\r\n        if (val !== undefined) {\r\n            this.lineType = val;\r\n        } else {\r\n            console.log(\"Attempted to assign invalid lineType: %s\", lineType);\r\n        }\r\n    }\r\n\r\n    // Creates nodes for an algorithmn to path find around a vertex\r\n    createPathNodesForVertex(vertex, nodeIndex, d) {\r\n        // Set ids\r\n        let topLeft     = nodeIndex++;\r\n        let top         = nodeIndex++;\r\n        let topRight    = nodeIndex++;\r\n        let right       = nodeIndex++;\r\n        let bottomRight = nodeIndex++;\r\n        let bottom      = nodeIndex++;\r\n        let bottomLeft  = nodeIndex++;\r\n        let left        = nodeIndex++;\r\n\r\n        // Create nodes for: fromVertex\r\n        let vertexNodes = [];\r\n        vertexNodes.push([topLeft,     vertex.x-d,              vertex.y+vertex.height+d, [left, top]]);               // Top    Left\r\n        vertexNodes.push([top,         vertex.x+vertex.width/2, vertex.y+vertex.height+d, [topLeft, topRight]]);       // Top\r\n        vertexNodes.push([topRight,    vertex.x+vertex.width+d, vertex.y+vertex.height+d, [top, right]]);              // Top    Right\r\n        vertexNodes.push([right,       vertex.x+vertex.width+d, vertex.y+vertex.height/2, [topRight, bottomRight]]);   //        Right\r\n        vertexNodes.push([bottomRight, vertex.x+vertex.width+d, vertex.y-d,               [right, bottom]]);           // Bottom Right\r\n        vertexNodes.push([bottom,      vertex.x+vertex.width/2, vertex.y-d,               [bottomRight, bottomLeft]]); // Bottom\r\n        vertexNodes.push([bottomLeft,  vertex.x-d,              vertex.y-d,               [bottomRight, left]]);       // Bottom Left\r\n        vertexNodes.push([left,        vertex.x-d,              vertex.y+vertex.height/2, [bottomLeft, topLeft]]);     //        Left\r\n        return [nodeIndex, vertexNodes];\r\n    }\r\n\r\n    drawStartHead(canvasContext) {\r\n        let lineAngle = Math.atan2(this.getSY() - this.getNSY(), this.getSX() - this.getNSX());\r\n        this.sourceEdgeEnd.draw(canvasContext, this.getSX(), this.getSY(), lineAngle, this.lineColour);\r\n    }\r\n\r\n    drawEndHead(canvasContext) {\r\n        let lineAngle = Math.atan2(this.getEY() - this.getNEY(), this.getEX() - this.getNEX());\r\n        this.destEdgeEnd.draw(canvasContext, this.getEX(), this.getEY(), lineAngle, this.lineColour);\r\n    }\r\n\r\n    isPathSegmentLR(startIndex,endIndex){\r\n        let indexSx = this.path[startIndex][0];\r\n        let indexEx = this.path[endIndex][0];\r\n        let indexSy = this.path[startIndex][1];\r\n        let indexEy = this.path[endIndex][1];\r\n\r\n        return Math.abs(indexSx-indexEx) > Math.abs(indexSy-indexEy)\r\n    }\r\n\r\n    getTextOffsets(canvasContext, sourceText, destText, sourceCtext, destCtext) {\r\n        let sourceTextWidth = canvasContext.measureText(sourceText).width;\r\n        let destTextWidth = canvasContext.measureText(destText).width;\r\n        let sourceCtextWidth = canvasContext.measureText(sourceCtext).width;\r\n        let destCtextWidth = canvasContext.measureText(destCtext).width;\r\n        let textHeight = 15;\r\n        // 'M' is the widest possible character\r\n        let charWidth = canvasContext.measureText(\"M\").width;\r\n\r\n        let sxOffset;\r\n        let syOffset;\r\n        let exOffset;\r\n        let eyOffset;\r\n\r\n        let sxOffsetc;\r\n        let syOffsetc;\r\n        let exOffsetc;\r\n        let eyOffsetc;\r\n\r\n        let sxFlip = true;\r\n        let syFlip = true;\r\n        let exFlip = true;\r\n        let eyFlip = true;\r\n\r\n        // true if arrow is landscape, false if arrow is portrait;\r\n        let E1index = this.path.length-2;\r\n        let E2index = this.path.length-1;\r\n\r\n        let startLRArrow = this.isPathSegmentLR(0,1);\r\n        let endLRArrow = this.isPathSegmentLR(E1index,E2index);\r\n\r\n        let SSX = this.path[0][0];\r\n        let SSY = this.path[0][1];\r\n        let SEX = this.path[1][0];\r\n        let SEY = this.path[1][1];\r\n\r\n        let ESX = this.path[E1index][0];\r\n        let ESY = this.path[E1index][1];\r\n        let EEX = this.path[E2index][0];\r\n        let EEY = this.path[E2index][1];\r\n\r\n        if (startLRArrow) {\r\n            if (SSX > SEX) {\r\n                sxFlip = !sxFlip;\r\n            }\r\n        } else {\r\n            if (SSY > SEY) {\r\n                syFlip = !syFlip;\r\n            }\r\n        }\r\n\r\n        if (endLRArrow) {\r\n            if (ESX > EEX) {\r\n                exFlip = !exFlip;\r\n            }\r\n        } else {\r\n            if (ESY > EEY) {\r\n                eyFlip = !eyFlip;\r\n            }\r\n        }\r\n\r\n\r\n        if (sxFlip) {\r\n            sxOffset = charWidth/2;\r\n            if (startLRArrow) {\r\n                sxOffsetc = charWidth/2;\r\n            } else {\r\n                sxOffsetc = -1*(sourceCtextWidth+charWidth/2)\r\n            }\r\n        } else {\r\n            sxOffset = -1*(sourceTextWidth+charWidth/2);\r\n            if (startLRArrow) {\r\n                sxOffsetc = -1*(sourceCtextWidth+charWidth/2)\r\n            } else {\r\n                sxOffsetc = charWidth/2;\r\n            }\r\n        }\r\n        \r\n\r\n        if (syFlip) {\r\n            syOffset = textHeight;\r\n            if (startLRArrow) {\r\n                syOffsetc = -1*(textHeight/2)\r\n            } else {\r\n                syOffsetc = syOffset;\r\n            }\r\n        } else {\r\n            syOffset = -1*(textHeight/2);\r\n            if (startLRArrow) {\r\n                syOffsetc = syOffset;\r\n            } else {\r\n                syOffsetc = -1*(textHeight/2)\r\n            }\r\n        }\r\n\r\n\r\n        //if true arrow moves more in x than in y\r\n        exFlip = !exFlip;\r\n        eyFlip = !eyFlip;\r\n\r\n        if (exFlip) {\r\n            exOffset = charWidth/2;\r\n            if (endLRArrow) {\r\n                exOffsetc = charWidth/2;\r\n            } else {\r\n                exOffsetc = -1*(destCtextWidth+charWidth/2)\r\n            }\r\n        } else {\r\n            exOffset = -1*(destTextWidth+charWidth/2);\r\n            if (endLRArrow) {\r\n                exOffsetc = -1*(destCtextWidth+charWidth/2)\r\n            } else {\r\n                exOffsetc = charWidth/2;\r\n            }\r\n        }\r\n\r\n\r\n        if (eyFlip) {\r\n            eyOffset = textHeight;\r\n            if (endLRArrow) {\r\n                eyOffsetc = -1*(textHeight/2);\r\n            } else {\r\n                eyOffsetc = eyOffset;\r\n            }\r\n        } else {\r\n            eyOffset = -1*(textHeight/2);\r\n            if (endLRArrow) {\r\n                eyOffsetc = textHeight;\r\n            } else {\r\n                eyOffsetc = eyOffset;\r\n            }\r\n        }\r\n\r\n\r\n        return [sxOffset,syOffset,exOffset,eyOffset,sxOffsetc,syOffsetc,exOffsetc,eyOffsetc]\r\n    }\r\n\r\n\r\n\r\n    drawLabelsAndCardinalities(canvasContext) {\r\n        let sourceCardText = this.sourceEdgeEnd.cardinality.toString();\r\n        let destCardText = this.destEdgeEnd.cardinality.toString();\r\n        let Offsets = this.getTextOffsets(canvasContext,this.sourceEdgeEnd.label,this.destEdgeEnd.label,sourceCardText,destCardText);\r\n\r\n        canvasContext.fillStyle = \"#000\";\r\n\r\n        //draw source text\r\n        canvasContext.fillText(this.sourceEdgeEnd.label, this.getSX() + Offsets[0], this.getSY() + Offsets[1]);\r\n\r\n        //draw destination text\r\n        canvasContext.fillText(this.destEdgeEnd.label, this.getEX() + Offsets[2], this.getEY() + Offsets[3]);\r\n\r\n        //draw source cardinality\r\n        if (this.getSourceCardinalityVisibility()) {\r\n            canvasContext.fillText(sourceCardText, this.getSX() + Offsets[4], this.getSY() + Offsets[5]);\r\n        }\r\n\r\n        //draw destination cardinality\r\n        if (this.getDestCardinalityVisibility()) {\r\n            canvasContext.fillText(destCardText, this.getEX() + Offsets[6], this.getEY() + Offsets[7]);\r\n        }\r\n    }\r\n\r\n    draw(canvasContext) {\r\n        let dashLength = 5;\r\n\r\n        switch (this.lineType) {\r\n            case ArrowProps.LineType.SOLID:\r\n                canvasContext.setLineDash([]);\r\n                break;\r\n            case ArrowProps.LineType.DASHED:\r\n                canvasContext.setLineDash([dashLength, dashLength]);\r\n                break;\r\n            default:\r\n                console.log(\"Arrow had invalid lineType: %s\", this.lineType);\r\n        }\r\n\r\n        // Draw\r\n        canvasContext.strokeStyle = this.lineColour;\r\n\r\n        // Draw Lines\r\n        for (let i = 0; i < this.path.length-1; i++) {\r\n            let from = this.path[i];\r\n            let to = this.path[i+1];\r\n\r\n            canvasContext.beginPath();\r\n            canvasContext.moveTo(from[0], from[1]);\r\n            canvasContext.lineTo(to[0], to[1]);\r\n            canvasContext.stroke();\r\n        }\r\n\r\n        canvasContext.strokeStyle = \"#000\";\r\n        canvasContext.setLineDash([]);\r\n\r\n        this.drawStartHead(canvasContext);\r\n        this.drawEndHead(canvasContext);\r\n        //store which labels were flipped and in which direction (x/y)\r\n        this.drawLabelsAndCardinalities(canvasContext);\r\n\r\n        if (this.selected) {\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                let pos = this.path[i];\r\n                drawMarker(pos[0], pos[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    intersects(cx, cy) {\r\n        for (let i = 0; i < this.path.length-1; i++) {\r\n            let from = this.path[i];\r\n            let to = this.path[i+1];\r\n\r\n            if (this.intersectsSegment(cx, cy, from, to)) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Checks if it intersects with one of the line segments\r\n    intersectsSegment(cx, cy, from, to) {\r\n        let m = getDistance(cx, cy, from[0], from[1]);\r\n        let n = getDistance(cx, cy, to[0], to[1]);\r\n        let l = getDistance(from[0], from[1], to[0], to[1]);\r\n\r\n        let threshold = 1;\r\n\r\n        return (m+n-threshold < l);\r\n    }\r\n\r\n    // Get first x/y\r\n    getSX() {\r\n        return this.path[0][0];\r\n    }\r\n    getSY() {\r\n        return this.path[0][1];\r\n    }\r\n\r\n    // Get second x/y\r\n    getNSX() {\r\n        return this.path[1][0];\r\n    }\r\n    getNSY() {\r\n        return this.path[1][1];\r\n    }\r\n\r\n    // Get second last x/y\r\n    getNEX() {\r\n        let index = this.path.length-2;\r\n        if (index < 0) index = 0;\r\n        return this.path[index][0];\r\n    }\r\n    getNEY() {\r\n        let index = this.path.length-2;\r\n        if (index < 0) index = 0;\r\n        return this.path[index][1];\r\n    }\r\n\r\n    // Get last x/y\r\n    getEX() {\r\n        return this.path[this.path.length-1][0];\r\n    }\r\n    getEY() {\r\n        return this.path[this.path.length-1][1];\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { CollectionsBookmarkOutlined } from \"@material-ui/icons\";\r\nimport { currentObjects, getModelName } from \"../UIElements/CanvasDraw\";\r\n\r\n\r\nexport class VertexNode {\r\n    constructor(vertex) {\r\n        this.vertex = vertex;\r\n        this.children = new Set();\r\n        this.typeName = \"Vertex\";\r\n\r\n        //The path of this particular vertex node for displaying on the tree view element\r\n        this.cleanObjectPath = (getModelName(),\"/\",\"Vertices\")\r\n        this.vertexObjectPath = (getModelName(),\"/\",\"Vertices\")\r\n    }\r\n\r\n    add(node) {\r\n        this.children.add(node);\r\n    }\r\n\r\n    remove(traversedVertices, node) {\r\n        console.log(\"remove is called\")\r\n        let isRemoved = false;\r\n        traversedVertices.add(this);\r\n\r\n        //Remove from the current vertex\r\n        isRemoved = this.children.has(node);\r\n        this.children.delete(node);\r\n\r\n        //Continue to remove from anywhere deeper in the tree\r\n        for (let child of this.children) {\r\n            if (!traversedVertices.has(child)) {\r\n                traversedVertices.add(child);\r\n                isRemoved = child.remove(traversedVertices, node);\r\n            }\r\n        }\r\n\r\n        return isRemoved;\r\n    }\r\n\r\n    getVertexNode(traversedVertices, vertex, recursive = true) {\r\n        for (let child of this.children) {\r\n            if (!traversedVertices.has(child)) {\r\n                traversedVertices.add(child);\r\n\r\n                if (child.vertex.semanticIdentity.UUID === vertex.semanticIdentity.UUID) {\r\n                    return child;\r\n                } else if (recursive) {\r\n                    let node = child.getVertexNode(traversedVertices, vertex);\r\n                    if (node !== null) {\r\n                        return node;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    //Remove from just the children of this object, without removing from deeper in the tree\r\n    removeFromChildren(node) {\r\n        if (this.children.has(node)) {\r\n            this.children.delete(node);\r\n            return true;\r\n\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    flatten(traversedVertices) {\r\n        var flattenedArray = [];\r\n\r\n        for (let childNode of this.children) {\r\n            if (!traversedVertices.has(childNode)) {\r\n                traversedVertices.add(childNode);\r\n                flattenedArray.push(childNode.vertex);\r\n\r\n                if (childNode !== null) {\r\n                    flattenedArray.push(...childNode.flatten(traversedVertices));\r\n                }\r\n            }\r\n        }\r\n\r\n        return flattenedArray;\r\n    }\r\n\r\n    flattenVertexNodes(traversedVertices) {\r\n        var flattenedArray = [];\r\n\r\n        for (let childNode of this.children) {\r\n            if (!traversedVertices.has(childNode)) {\r\n                traversedVertices.add(childNode);\r\n                flattenedArray.push(childNode);\r\n\r\n                if (childNode !== null) {\r\n                    flattenedArray.push(...childNode.flattenVertexNodes(traversedVertices));\r\n                }\r\n            }\r\n        }\r\n\r\n        return flattenedArray;\r\n    }\r\n\r\n    has(traversedVertices, node) {\r\n        //Search for object in children\r\n        if (this.children.has(node)) {\r\n            return true;\r\n\r\n        } else {\r\n\r\n            //Search for object in children of children\r\n            for (let child of this.children) {\r\n                if (!traversedVertices.has(child)) {\r\n                    traversedVertices.add(child);\r\n                    if (child.has(traversedVertices, node)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    toTreeViewElement(returnOption, parsedRenderKey, parsedModelKey) { //added the model key parameter to we can specifiy what models vertexes belong to\r\n        //console.log(\"toTreeViewElement called successfully\")\r\n        //Pretty much everything that's currently on the canvas is searched and then converted into the tree appropriate struct in the below if else statements.\r\n        //Then, the vertices and arrows folder nodes can display their appropriate children.\r\n        let ArrowChildren = [];\r\n        let VertexChildren = [];\r\n    \r\n\r\n        //These are no longer needed due to rework of assigning model children - Lachlan\r\n        /*\r\n        let verticies = []; // need to store the 'verticies folder' in an array for it to be iterable in a for loop - cooper\r\n        let arrows = []; // same issue as vertices not being iterable - Lachlan\r\n        */\r\n        \r\n\r\n\r\n        //Check which folder we're sticking these things into\r\n        if (returnOption === \"Vertex Folder\"){                  // they had a different spelling for vertex folder :DDDDD - cooper\r\n            //All objects currently on the canvas (excluding things like folders which only exist as tree view elements)\r\n            for(let i = 0; i < currentObjects.flatten().length; i++){\r\n\r\n                //We onlt want the vertices in this folder\r\n                if (currentObjects.flatten()[i].typeName === \"Vertex\" && currentObjects.flatten()[i].getRenderKey() === parsedRenderKey){\r\n                    if(currentObjects.flatten()[i].getModelKey() === parsedModelKey){\r\n                    //Set the append the name of the path to include the vertex name\r\n                    if(currentObjects.flatten()[i].title === \"\"){\r\n                        this.setVertexTreePath(\"Unnamed Vertex\");\r\n                    }\r\n\r\n                    else{\r\n                        this.setVertexTreePath(currentObjects.flatten()[i].title);\r\n                    }\r\n                \r\n                \r\n\r\n\r\n                    //Create the appropriate struct for a tree view element from the vertex data\r\n                    let tempTreeObj = {\r\n                        text: currentObjects.flatten()[i].title,\r\n                        children: [],\r\n                        data: currentObjects.flatten()[i],\r\n                        renderkey: currentObjects.flatten()[i].getRenderKey(),\r\n                        modelkey: currentObjects.flatten()[i].getModelKey(),\r\n                        state: {opened: false}\r\n                    };\r\n\r\n                    //So you don't have vertices that are completely blank in the tree, looks kinda weird\r\n                    if (tempTreeObj.text === \"\"){\r\n                        tempTreeObj.text = \"Unnamed Vertex\";\r\n                    }\r\n                    \r\n                    //Finally, push to children. Makes it look like the following:\r\n                    //\r\n                    //  Vertex --+\r\n                    //           |\r\n                    //           +-- Unnamed Vertex   \r\n                    \r\n                    VertexChildren.push(tempTreeObj);\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n            return{\r\n                text: \"Vertices &#128193\",\r\n                children: VertexChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Vertex Folder\"\r\n            }\r\n        }\r\n\r\n        //No longer necessary due to the rework of assigning model children - Lachlan\r\n            /*\r\n            let verticiesObject = { // push the vertex folder into an array of vertex folders - cooper\r\n                text: \"Vertices\",\r\n                children: VertexChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Vertex Folder\"\r\n            }\r\n            verticies.push(verticiesObject)\r\n            //vertices folder\r\n            return verticies\r\n                \r\n            \r\n        }\r\n        */\r\n\r\n        //same typo as above if statement but for arrows\r\n        else if (returnOption === \"Arrow Folder\"){ //same thing but arrows folder - Lachlan\r\n            for(let i = 0; i < currentObjects.flatten().length; i++){\r\n\r\n                if (currentObjects.flatten()[i].typeName !== \"Vertex\" && currentObjects.flatten()[i].getRenderKey() === parsedRenderKey){\r\n                    //console.log(\"arrow key\")\r\n                    //console.log(currentObjects.flatten()[i].getModelKey())\r\n                    //console.log(parsedModelKey)\r\n\r\n\r\n                    if(currentObjects.flatten()[i].getModelKey() === parsedModelKey){\r\n                        \r\n\r\n                        // Find the source and destination vertex as Keith defined in spec\r\n                        let ourSourceEnd = currentObjects.flatten()[i].pathData[1][1]\r\n                        let ourDestEnd = currentObjects.flatten()[i].pathData[0][1]\r\n\r\n                        let textSource = \"N/A\"\r\n                        let textDest = \"N/A\"\r\n                        let finalString = \"N/A\"\r\n\r\n                        // Looking through all of the current objects and matching the uuids\r\n                        for (let j = 0; j <currentObjects.flatten().length; j++){\r\n                        \r\n                            let someObject = currentObjects.flatten()[j]\r\n                            \r\n                            if (someObject.typeName === \"Vertex\"){\r\n                            \r\n                                if (ourSourceEnd === someObject.semanticIdentity.UUID){\r\n                                    console.log(\"Matched1\")\r\n                                    textDest = someObject.title\r\n                                }\r\n\r\n                                else if (ourDestEnd === someObject.semanticIdentity.UUID){\r\n                                    console.log(\"Matched2\")\r\n                                    textSource = someObject.title\r\n                                }\r\n                            }\r\n                            \r\n                        }\r\n\r\n                        //this array stores whether source/destination is Navigable/Aggregation so we can display the required icons in the tree\r\n                        //array is ordered source nav, dest nav, source agg, dest agg \r\n                        //if adding more properties, such ass a dotted arrow, just increase array size and adjust the if statements for constructing icon\r\n                        let treeAppearanceSwitches = [false,false,false,false]\r\n                        treeAppearanceSwitches[0] = currentObjects.flatten()[i].getNavigable(0)\r\n                        treeAppearanceSwitches[1] = currentObjects.flatten()[i].getNavigable(1)\r\n                        treeAppearanceSwitches[2] = currentObjects.flatten()[i].getAggregation(0)\r\n                        treeAppearanceSwitches[3] = currentObjects.flatten()[i].getAggregation(1)\r\n                        console.log(treeAppearanceSwitches);\r\n                        //unicode icon of the arrow properties/relations we want to display\r\n                        let arrowIcon = \"\";\r\n\r\n                        if(treeAppearanceSwitches[2] === true){\r\n                            arrowIcon = \"&#9670\"\r\n                            }\r\n                        else if(treeAppearanceSwitches[0] === true){\r\n                            arrowIcon = \"&#10229\"\r\n                        }\r\n\r\n                        arrowIcon += \"&#8213\"\r\n\r\n                        if(treeAppearanceSwitches[3] === true){\r\n                            arrowIcon += \"&#9670\"\r\n                            }\r\n                        else if(treeAppearanceSwitches[1] === true){\r\n                            arrowIcon += \"&#10230\"\r\n                        }\r\n\r\n                        finalString = textSource + \" \" + arrowIcon + \" \" + textDest\r\n\r\n                        let tempTreeObj = {\r\n                            text: currentObjects.flatten()[i].typeName + \" - \" + finalString,\r\n                            children: [],\r\n                            data: currentObjects.flatten()[i],\r\n                            renderkey: currentObjects.flatten()[i].getRenderKey(),\r\n                            modelkey: currentObjects.flatten()[i].getModelKey(),\r\n                            state: {opened: false}\r\n                        };\r\n\r\n                        ArrowChildren.push(tempTreeObj);\r\n                    \r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            return {\r\n                text: \"Arrows &#128193\",\r\n                children: ArrowChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Arrow Folder\"\r\n            }\r\n        }\r\n    \r\n\r\n        //No longer necessary due to the rework of assigning model children - Lachlan\r\n            /*\r\n            let arrowsObject = { //create the arrows folder as an object to push to the arrows array - Lachlan\r\n                text: \"Arrows\",\r\n                children: ArrowChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Arrow Folder\"\r\n            }\r\n\r\n            arrows.push(arrowsObject)\r\n            //vertices folder\r\n            return arrows\r\n        }\r\n            */\r\n            \r\n        \r\n        //This down here is for vertex heirarchy stuff, not really needed anymore.\r\n        /*\r\n        if (!traversed) {\r\n            traversedVertices.add(this);\r\n            \r\n            for (let child of this.children) {\r\n                //children.push(child.toTreeViewElement(traversedVertices));\r\n            }\r\n            \r\n        }\r\n\r\n        let text = this.vertex.title;\r\n\r\n        if (text === null || text === \"\") {\r\n            text = \"Unnamed Vertex\";\r\n        }\r\n\r\n        return {\r\n            text: text,\r\n            children: children,\r\n            data: this.vertex,\r\n            state: { opened: true }\r\n        };\r\n        */\r\n    }\r\n    \r\n    setTreeViewElement(folderTitle){ //For when you want to make a folder type of element\r\n        let fakeChildren = [];\r\n        return{\r\n            text: folderTitle,\r\n            children: fakeChildren,\r\n            state: {opened: true}\r\n        };\r\n    }\r\n\r\n    //this function sets the path of a particular vertex node so that you can \r\n    //1. Display that item's path in the actual vertex (if you want)\r\n    //2. Show a tree view that only contains the path to a desired vertex \r\n    setVertexTreePath(treePath){\r\n        this.vertexObjectPath = this.cleanObjectPath + \"/\" + treePath;\r\n    }\r\n\r\n    //Return the vertice's object path\r\n    returnVertexTreePath(){\r\n        return this.vertexObjectPath;\r\n    }\r\n\r\n}\r\n\r\nclass ArrowEdge {\r\n    constructor(flattenedVertexNodes, arrow) {\r\n        this.arrow = arrow;\r\n        this.updateVertices(flattenedVertexNodes);\r\n    }\r\n\r\n    updateVertices(flattenedVertexNodes) {\r\n        this.sourceVertexNodeObject = null;\r\n        this.destVertexNodeObject = null;\r\n\r\n        if (this.arrow !== null) {\r\n            let isSourceFound = this.arrow.sourceVertexUUID === null;\r\n            let isDestFound = this.arrow.destVertexUUID === null;\r\n\r\n            for (let vertexNode of flattenedVertexNodes) {\r\n                if (isSourceFound && isDestFound) {\r\n                    break;\r\n                }\r\n\r\n                if (vertexNode !== null) {\r\n                    if (vertexNode.vertex.semanticIdentity.UUID === this.arrow.sourceVertexUUID) {\r\n                        this.sourceVertexNodeObject = vertexNode;\r\n                        isSourceFound = true;\r\n\r\n                    } else if (vertexNode.vertex.semanticIdentity.UUID === this.arrow.destVertexUUID) {\r\n                        this.destVertexNodeObject = vertexNode;\r\n                        isDestFound = true;\r\n                    }\r\n                }\r\n            }\r\n        \r\n        }\r\n    }\r\n\r\n    set sourceVertexNode(vertexNode) {\r\n        this.sourceVertexNodeObject = vertexNode;\r\n\r\n        if (vertexNode !== null) {\r\n            this.arrow.sourceVertexUUID = vertexNode.vertex.semanticIdentity.UUID;\r\n        } else {\r\n            this.arrow.sourceVertexUUID = null;\r\n        }\r\n    }\r\n\r\n    get sourceVertexNode() {\r\n        return this.sourceVertexNodeObject;\r\n    }\r\n\r\n    get sourceVertex() {\r\n        if (this.sourceVertexNodeObject !== null) {\r\n            return this.sourceVertexNodeObject.vertex;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    set destVertexNode(vertexNode) {\r\n        this.destVertexNodeObject = vertexNode;\r\n\r\n        if (vertexNode !== null) {\r\n            this.arrow.destVertexUUID = vertexNode.vertex.semanticIdentity.UUID;\r\n        } else {\r\n            this.arrow.destVertexUUID = null;\r\n        }\r\n    }\r\n\r\n    get destVertexNode() {\r\n        return this.destVertexNodeObject;\r\n    }\r\n\r\n    get destVertex() {\r\n        if (this.destVertexNodeObject !== null) {\r\n            return this.destVertexNodeObject.vertex;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n//Supply with an array/set of Vertex objects or Arrow objects (NOT ArrowEdge objects)\r\nexport class Graph {\r\n    constructor(vertexArrayFlattened, arrowArrayFlattened) {\r\n        this.rootVertices = new Set();\r\n        if (vertexArrayFlattened !== undefined) {\r\n            this.add(vertexArrayFlattened);\r\n        }\r\n\r\n        this.arrows = new Set();\r\n        if (arrowArrayFlattened !== undefined) {\r\n            this.add(arrowArrayFlattened);\r\n        }\r\n    }\r\n\r\n    add(objects) {\r\n        if (!Array.isArray(objects)) {\r\n            objects = [objects];\r\n        }\r\n\r\n        for (let object of objects) {\r\n            switch (object.constructor.name) {\r\n                case \"Vertex\":\r\n                    this.addVertex(object);\r\n                    break;\r\n                case \"Arrow\":\r\n                    this.addArrow(object);\r\n                    break;\r\n                case \"VertexNode\":\r\n                    this.rootVertices.add(object);\r\n                    break;\r\n                case \"ArrowEdge\":\r\n                    this.arrows.add(object);\r\n                    break;\r\n                default:\r\n                    console.error(\"Attempted to add object to unknown type %s to Graph\", object.constructor.name)\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addVertex(vertex) {\r\n        if (this.getVertexNode(vertex) === null) {\r\n            vertex = new VertexNode(vertex);\r\n            this.rootVertices.add(vertex);\r\n        } else {\r\n            console.error(\"Attempted to add duplicate vertex\");\r\n        }\r\n    }\r\n\r\n    //NOTE: Graph direction is inverted, flowing from the dest to source of arrows\r\n    //This is intentional behaviour of the modelling spec\r\n    addArrow(arrow) {\r\n        if (this.getArrowEdge(arrow) === null) {\r\n            arrow = new ArrowEdge(this.flattenVertexNodes(), arrow);\r\n            this.arrows.add(arrow);\r\n\r\n            if (arrow.destVertexNode !== null && arrow.sourceVertexNode !== null) {\r\n                arrow.destVertexNode.add(arrow.sourceVertexNode);\r\n\r\n                //If the destination of the arrow is currently a root vertex,\r\n                //search for if the destination has any other possible roots,\r\n                //and remove from the root ONLY IF another root is found\r\n                //This retains an entry point for the graph even if there is a cycle back to root\r\n                if (this.rootVertices.has(arrow.sourceVertexNode)) {\r\n                    let isAnotherRoot = false;\r\n\r\n                    for (let vertexNode of this.rootVertices) {\r\n                        if (vertexNode.vertex.semanticIdentity.UUID === arrow.sourceVertex.semanticIdentity.UUID) {\r\n                            continue;\r\n                        }\r\n\r\n                        if (vertexNode.has(new Set(), arrow.sourceVertexNode)) {\r\n                            isAnotherRoot = true;\r\n                        }\r\n                    }\r\n\r\n                    if (isAnotherRoot) {\r\n                        this.rootVertices.delete(arrow.sourceVertexNode);\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n            console.error(\"Attempted to add duplicate arrow\");\r\n        }\r\n    }\r\n\r\n    //A way of returning the arrow UUID's associated with the deleted vertex. For some reason the source and ending\r\n    //UUID data isn't being saved properly upstream, so this is a way around that.\r\n    ArrowUUIDSource(object){\r\n        object = this.getVertexNode(object);\r\n        //first index is source, second is destination\r\n        let returnArray = [];\r\n\r\n        //Match an arrow\r\n        let i = 0;\r\n        for (let arrow of this.arrows) {\r\n            if (arrow.sourceVertexNode !== null && arrow.sourceVertex.semanticIdentity.UUID === object.vertex.semanticIdentity.UUID) {\r\n                returnArray[i] = arrow;\r\n                i += 1;\r\n            }\r\n        }\r\n\r\n        return returnArray;\r\n    }\r\n\r\n    ArrowUUIDDest(object){\r\n        object = this.getVertexNode(object);\r\n        //first index is source, second is destination\r\n        let returnArray = [];\r\n\r\n        //Match an arrow\r\n        let i = 0;\r\n        for (let arrow of this.arrows) {\r\n            if (arrow.destVertexNode !== null && arrow.destVertex.semanticIdentity.UUID === object.vertex.semanticIdentity.UUID) {\r\n                returnArray[i] = arrow;\r\n                i += 1;\r\n            }\r\n        }\r\n\r\n        return returnArray;\r\n    }\r\n\r\n    //Removes and object while shifting it's children's position in the tree\r\n    remove(object) {\r\n        console.log(\"remove 2 is called\")\r\n        //By this point rootVertices doesnt actually contain the vertex we want to delete which makes the isRemoved Logic hard to follow as has returns true when the item is present- Lachlan\r\n        console.log(this.rootVertices)\r\n        if (object.constructor.name === \"Vertex\") {\r\n            let newobject = this.getVertexNode(object);\r\n            let isRemoved = this.rootVertices.has(newobject);\r\n            console.log(isRemoved)\r\n\r\n\r\n            //Remove from the root\r\n            this.rootVertices.delete(newobject);\r\n            for (let child of newobject.children) {\r\n                this.rootVertices.add(child);\r\n            }\r\n            //console.log(\"It removes from the root fine\")\r\n\r\n            \r\n            //Remove from anywhere deeper in the tree\r\n            let traversedVertices = new Set();\r\n            for (let vertexNode of this.rootVertices) {\r\n                if (!traversedVertices.has(vertexNode)) {\r\n                    traversedVertices.add(vertexNode);\r\n                    vertexNode.remove(traversedVertices, newobject);\r\n                    console.log(isRemoved)\r\n                }\r\n            }\r\n            \r\n            if (isRemoved) {\r\n                //Remove the vertex from being the source or dest of any arrow\r\n                for (let arrow of this.arrows) {\r\n                    if (arrow.sourceVertexNode !== null && arrow.sourceVertex.semanticIdentity.UUID === newobject.vertex.semanticIdentity.UUID) {\r\n                        arrow.sourceVertexNode = null;\r\n                    }\r\n                    \r\n                    if (arrow.destVertexNode !== null && arrow.destVertex.semanticIdentity.UUID === newobject.vertex.semanticIdentity.UUID) {\r\n                        arrow.destVertexNode = null;\r\n                    }\r\n                }\r\n            }\r\n            \r\n\r\n            return isRemoved;\r\n\r\n        } else if (object.constructor.name === \"Arrow\") {\r\n            let newobject = this.getArrowEdge(object);\r\n\r\n            if (newobject !== null) {\r\n                this.arrows.delete(newobject);\r\n                //IF arrow has a sourceVertex AND destVertex\r\n                if (newobject.sourceVertexNode !== null && newobject.destVertexNode !== null) {\r\n                    //IF there is no other arrow from sourceVertex to destVertex, remove the sourceVertex from the children of destVertex\r\n                    //AND move the sourceVertex to root, if there is no other arrow with the same sourceVertex\r\n                    let isEquivalentArrow = false;\r\n                    let isArrowWithSameSource = false;\r\n                    \r\n                    for (let arrow of this.arrows) {\r\n                        let isEquivalentSource = arrow.sourceVertexNode !== null && arrow.sourceVertex.semanticIdentity.UUID === newobject.sourceVertex.semanticIdentity.UUID;\r\n                        let isEquivalentDest = arrow.destVertexNode !== null && arrow.destVertex.semanticIdentity.UUID === newobject.destVertex.semanticIdentity.UUID;\r\n                        \r\n                        if (isEquivalentSource && isEquivalentDest) {\r\n                            isEquivalentArrow = true;\r\n                        }\r\n                        if (isEquivalentSource && arrow.destVertexNode !== null) {\r\n                            isArrowWithSameSource = true;\r\n                        }\r\n                    }\r\n                    \r\n                    if (!isEquivalentArrow) {\r\n                        newobject.destVertexNode.removeFromChildren(newobject.sourceVertexNode);\r\n                    }\r\n                    if (!isArrowWithSameSource) {\r\n                        this.add(newobject.sourceVertexNode);\r\n                    }\r\n\r\n                    //Remove vertex from the root if removing this arrow has resolved a cycle\r\n                    if (newobject.sourceVertexNode.has(new Set(), newobject.destVertexNode)) {\r\n                        this.rootVertices.delete(newobject.destVertexNode);\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n        } else {\r\n            if (object !== null) {\r\n                console.error(\"Attempted to remove object of invalid type %s to Graph\", object.constructor.name);\r\n            } else {\r\n                console.error(\"Attempted to remove null from Graph\");\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    has(object) {\r\n        //Search for object in root vertices\r\n        if (this.rootVertices.has(object)) {\r\n            return true;\r\n\r\n        } else {\r\n            let traversedVertices = new Set();\r\n\r\n            //Search for object in children of root vertices\r\n            for (let vertex of this.rootVertices) {\r\n                if (!traversedVertices.has(vertex)) {\r\n                    traversedVertices.add(vertex);\r\n                    if (vertex.has(traversedVertices, object)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getVertexNode(vertex) {\r\n        let traversedVertices = new Set();\r\n\r\n        for (let rootNode of this.rootVertices) {\r\n            if (!traversedVertices.has(rootNode)) {\r\n                traversedVertices.add(rootNode);\r\n                if (rootNode.vertex.semanticIdentity.UUID === vertex.semanticIdentity.UUID) {\r\n                    return rootNode;\r\n                } else {\r\n                    let node = rootNode.getVertexNode(traversedVertices, vertex);\r\n                    if (node !== null) {\r\n                        return node;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getArrowEdge(arrow) {\r\n        for (let arrowEdge of this.arrows) {\r\n            if (arrowEdge.arrow.semanticIdentity.UUID === arrow.semanticIdentity.UUID) {\r\n                return arrowEdge;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    flatten(doFlattenVertices = true, doFlattenArrows = true) {\r\n        let verticesSet = new Set();\r\n        let arrowsSet = new Set();\r\n\r\n        let traversedVertices = new Set();\r\n\r\n        if (doFlattenVertices) {\r\n            for (let vertexNode of this.rootVertices) {\r\n                if (!traversedVertices.has(vertexNode)) {\r\n                    traversedVertices.add(vertexNode);\r\n                    verticesSet.add(vertexNode.vertex);\r\n    \r\n                    if (vertexNode !== null) {\r\n                        for (let child of vertexNode.flatten(traversedVertices)) {\r\n                            verticesSet.add(child);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (doFlattenArrows) {\r\n            for (let arrowEdge of this.arrows) {\r\n                arrowsSet.add(arrowEdge.arrow);\r\n            }\r\n        }\r\n\r\n        let flattenedArray = Array.from(verticesSet);\r\n        return flattenedArray.concat(Array.from(arrowsSet));\r\n    }\r\n\r\n    flattenVertexNodes() {\r\n        var verticesSet = new Set();\r\n        let traversedVertices = new Set();\r\n\r\n        for (let vertexNode of this.rootVertices) {\r\n            if (!traversedVertices.has(vertexNode)) {\r\n                traversedVertices.add(vertexNode);\r\n                verticesSet.add(vertexNode);\r\n\r\n                if (vertexNode !== null) {\r\n                    for (let child of vertexNode.flattenVertexNodes(traversedVertices)) {\r\n                        verticesSet.add(child);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return Array.from(verticesSet);\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\n// React imports\r\nimport React, { useRef, useCallback, useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GridMUI from '@material-ui/core/Grid';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { EditingState } from '@devexpress/dx-react-grid';\r\n\r\nimport saveAs from 'file-saver';\r\n\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { GridExporter } from '@devexpress/dx-react-grid-export';\r\n\r\nimport {\r\n    Grid,\r\n    Table,\r\n    TableHeaderRow,\r\n    TableInlineCellEditing,\r\n    Toolbar,\r\n    ExportPanel,\r\n} from '@devexpress/dx-react-grid-material-ui';\r\n\r\nimport {\r\n    Plugin,\r\n    Template,\r\n    TemplatePlaceholder,\r\n} from '@devexpress/dx-react-core';\r\n\r\n// In program imports\r\nimport {currentObjects} from \"./CanvasDraw\";\r\n\r\n// Globals\r\nlet rows;\r\nlet setRows = null;\r\nlet setColumns = null;\r\nlet textInput = React.createRef();\r\nexport var translationColumns = [];\r\n\r\nconst onSave = (workbook) => {\r\n    workbook.xlsx.writeBuffer().then((buffer) => {\r\n        saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n    });\r\n};\r\n\r\nconst getRowId = row => row.id;\r\n\r\nconst styles = () => ({\r\n    input: {\r\n        fontSize: '14px',\r\n        width: '90px',\r\n    },\r\n    label: {\r\n        fontSize: '14px',\r\n    },\r\n    container: {\r\n        maxWidth: '18em',\r\n    },\r\n    selector: {\r\n        height: '32px',\r\n    },\r\n});\r\n\r\n// #FOLD_BLOCK\r\nconst StartEditActionSelectorBase = (props) => {\r\n    const { defaultAction, changeAction, classes } = props;\r\n    return (\r\n        <GridMUI\r\n            container\r\n            alignItems=\"center\"\r\n            className={classes.container}\r\n        >\r\n            <Typography\r\n                className={classes.label}\r\n            >\r\n                Start Edit Action:\r\n                &nbsp;\r\n            </Typography>\r\n            <Select\r\n                onChange={e => changeAction(e.target.value)}\r\n                value={defaultAction}\r\n                className={classes.selector}\r\n                input={(\r\n                    <OutlinedInput\r\n                        classes={{ input: classes.input }}\r\n                        labelWidth={0}\r\n                        margin=\"dense\"\r\n                    />\r\n                )}\r\n            >\r\n                <MenuItem value=\"click\">Click</MenuItem>\r\n                <MenuItem value=\"doubleClick\">Double Click</MenuItem>\r\n            </Select>\r\n        </GridMUI>\r\n    );\r\n};\r\nconst StartEditActionSelector = withStyles(styles, { name: 'StartEditActionSelector' })(StartEditActionSelectorBase);\r\n\r\n// #FOLD_BLOCK\r\nconst SelectTextCheckerBase = (props) => {\r\n    const { isSelectText, changeSelectText, classes } = props;\r\n    return (\r\n        <FormControlLabel\r\n            control={(\r\n                <Checkbox\r\n                    checked={isSelectText}\r\n                    onChange={e => changeSelectText(e.target.checked)}\r\n                    color=\"primary\"\r\n                />\r\n            )}\r\n            classes={{ label: classes.label }}\r\n            label=\"Select Text On Focus\"\r\n        />\r\n    );\r\n};\r\nconst SelectTextChecker = withStyles(styles, { name: 'SelectTextChecker' })(SelectTextCheckerBase);\r\n\r\nconst EditPropsPanel = props => (\r\n    <Plugin name=\"EditPropsPanel\">\r\n        <Template name=\"toolbarContent\">\r\n            <SelectTextChecker {...props} />\r\n            <TemplatePlaceholder />\r\n            <StartEditActionSelector {...props} />\r\n        </Template>\r\n    </Plugin>\r\n);\r\n\r\nconst FocusableCell = ({ onClick, ...restProps }) => (\r\n    <Table.Cell {...restProps} tabIndex={0} onFocus={onClick} />\r\n);\r\n\r\nexport default () => {\r\n    // Create columns\r\n    let [columns, setColumnsRet] = useState(createColumns());\r\n    setColumns = setColumnsRet;\r\n\r\n    // Disable editing state\r\n    const [editingStateColumnExtensions] = useState([\r\n        { columnName: 'UUID', editingEnabled: false },\r\n        { columnName: 'type', editingEnabled: false },\r\n    ]);\r\n\r\n    // Rows\r\n    const [generatedRows, setRowsRet] = useState([]);\r\n    rows = generatedRows;\r\n    setRows = setRowsRet;\r\n\r\n    // Enable/Disable word Wrap\r\n    const [tableColumnExtensions] = useState([\r\n        { columnName: 'UUID', wordWrapEnabled: true },\r\n        { columnName: 'type', wordWrapEnabled: true },\r\n        { columnName: 'name', wordWrapEnabled: true },\r\n        { columnName: 'description', wordWrapEnabled: true },\r\n        { columnName: 'abbreviation', wordWrapEnabled: true },\r\n        { columnName: 'shortAbbreviation', wordWrapEnabled: true },\r\n    ]);\r\n\r\n    // Editable\r\n    const [startEditAction, setStartEditAction] = useState('click');\r\n    const [selectTextOnEditStart, setSelectTextOnEditStart] = useState(true);\r\n\r\n    const commitChanges = ({ added, changed, deleted}) => {\r\n        let changedRows;\r\n        if (added) {\r\n            const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n            changedRows = [\r\n                ...rows,\r\n                ...added.map((row, index) => ({\r\n                    id: startingAddedId + index,\r\n                    ...row,\r\n                })),\r\n            ];\r\n        }\r\n        if (changed) {\r\n            changedRows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));\r\n            updateChangedObjects(changedRows);\r\n        }\r\n        if (deleted) {\r\n            const deletedSet = new Set(deleted);\r\n            changedRows = rows.filter(row => !deletedSet.has(row.id));\r\n        }\r\n\r\n        setRows(changedRows);\r\n    };\r\n\r\n    // Export functionality\r\n    const exporterRef = useRef(null);\r\n\r\n    const startExport = useCallback(() => {\r\n        exporterRef.current.exportGrid();\r\n    }, [exporterRef]);\r\n\r\n    // Return\r\n    return (\r\n        <Paper>\r\n            <InputGroup>\r\n                <FormControl\r\n                    ref={textInput}\r\n                    placeholder=\"Column name\"\r\n                    aria-label=\"Column name\"\r\n                    aria-describedby=\"basic-addon2\"\r\n                />\r\n                <InputGroup.Append>\r\n                    <Button variant=\"outline-secondary\" onClick={() => addColumn()}>Add</Button>\r\n                    <Button variant=\"outline-secondary\" onClick={() => removeColumn()}>Remove</Button>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n            <Grid\r\n                rows={rows}\r\n                columns={columns}\r\n                getRowId={getRowId}\r\n            >\r\n                <EditingState\r\n                    onCommitChanges={commitChanges}\r\n                    columnExtensions={editingStateColumnExtensions}\r\n                />\r\n                <Table cellComponent={FocusableCell} columnExtensions={tableColumnExtensions} />\r\n                <TableHeaderRow />\r\n                <Toolbar />\r\n                <EditPropsPanel\r\n                    defaultAction={startEditAction}\r\n                    changeAction={setStartEditAction}\r\n                    isSelectText={selectTextOnEditStart}\r\n                    changeSelectText={setSelectTextOnEditStart}\r\n                />\r\n                <ExportPanel startExport={startExport} />\r\n                <TableInlineCellEditing\r\n                    startEditAction={startEditAction}\r\n                    selectTextOnEditStart={selectTextOnEditStart}\r\n                />\r\n            </Grid>\r\n            <GridExporter\r\n                ref={exporterRef}\r\n                rows={rows}\r\n                columns={columns}\r\n                onSave={onSave}\r\n            />\r\n        </Paper>\r\n    );\r\n};\r\n\r\nfunction addColumn() {\r\n    // Get\r\n    const value = textInput.current.value\r\n\r\n    // Clear column name\r\n    textInput.current.value = \"\";\r\n\r\n    // Check if value is empty\r\n    if (value === \"\" || value === null || value === undefined) {\r\n        return;\r\n    }\r\n\r\n    // Add column\r\n    translationColumns.push(value);\r\n    updateColumns();\r\n}\r\n\r\nfunction removeColumn() {\r\n    // Get\r\n    const value = textInput.current.value\r\n\r\n    // Clear column name\r\n    textInput.current.value = \"\";\r\n\r\n    // Delete from currentObjects\r\n    for (let object of currentObjects.flatten()) {\r\n        object.semanticIdentity.translations.delete(value);\r\n    }\r\n\r\n    // Delete column\r\n    translationColumns.splice(translationColumns.indexOf(value), 1);\r\n    updateColumns();\r\n}\r\n\r\nfunction updateColumns() {\r\n    setColumns(createColumns());\r\n}\r\n\r\nfunction getRowForObject(object) {\r\n    const row = {};\r\n\r\n    // Constants\r\n    row['id'] = object.semanticIdentity.UUID; // Just going to be based on UUID since it's easy and unique\r\n    row['UUID'] = object.semanticIdentity.UUID;\r\n    row['type'] = object.constructor.name;\r\n    row['name'] = object.semanticIdentity.name;\r\n    row['description'] = object.semanticIdentity.description;\r\n    row['abbreviation'] = object.semanticIdentity.abbreviation;\r\n    row['shortAbbreviation'] = object.semanticIdentity.shortAbbreviation;\r\n\r\n    // Translations\r\n    for (let o = 0; o < object.semanticIdentity.translations.length; o++) {\r\n        let translation = object.semanticIdentity.translations[o];\r\n\r\n        row[translation[0]] = translation[1];\r\n    }\r\n\r\n    return row;\r\n}\r\n\r\nexport function resetRows() {\r\n    let newRows = [];\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    for (let i = 0; i < currentObjectsFlattened.length; i++) {\r\n        newRows.push(getRowForObject(currentObjectsFlattened[i]));\r\n\r\n        // Add Arrow Ends\r\n        if (currentObjectsFlattened[i].constructor.name === \"Arrow\") {\r\n            newRows.push(getRowForObject(currentObjectsFlattened[i].sourceEdgeEnd));\r\n            newRows.push(getRowForObject(currentObjectsFlattened[i].destEdgeEnd));\r\n        }\r\n    }\r\n\r\n    if (setRows === null) {\r\n        console.error(\"Cannot set rows\");\r\n        return;\r\n    }\r\n\r\n    setRows(newRows);\r\n}\r\n\r\nfunction createColumns() {\r\n    // Create default columns\r\n    let columnNames = [\r\n        {name: 'UUID', title: 'UUID'},\r\n        {name: 'type', title: 'Type'},\r\n        {name: 'name', title: 'Name'},\r\n        {name: 'description', title: 'Description'},\r\n        {name: 'abbreviation', title: 'Abbreviation'},\r\n        {name: 'shortAbbreviation', title: 'Short Abbreviation'},\r\n    ];\r\n\r\n    // Add translation columns\r\n    for (let translation of translationColumns) {\r\n        columnNames.push({name: translation, title: translation});\r\n    }\r\n\r\n    return columnNames;\r\n}\r\n\r\nfunction updateChangedObject(object, row) {\r\n    // If should update\r\n    if (object.semanticIdentity.UUID === row['UUID']) {\r\n        // Constants\r\n        object.semanticIdentity.abbreviation = row['abbreviation'];\r\n        object.semanticIdentity.shortAbbreviation = row['shortAbbreviation'];\r\n        object.semanticIdentity.name = row['name'];\r\n        object.semanticIdentity.description = row['description'];\r\n\r\n        // Translations\r\n        for (let translation of translationColumns) {\r\n            // Find translation in list\r\n            let set = false;\r\n            for (let i = 0; i < object.semanticIdentity.translations.length; i++) {\r\n                if (object.semanticIdentity.translations[i][0] === translation) {\r\n                    object.semanticIdentity.translations[i][1] = row[translation];\r\n                    set = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!set) {\r\n                object.semanticIdentity.translations.push([translation, row[translation]]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return row;\r\n}\r\n\r\nfunction updateChangedObjects(rows) {\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    // Iterate through all rows\r\n    for (let i = 0; i < rows.length; i++) {\r\n        // Iterate through all objects\r\n        for (let o = 0; o < currentObjectsFlattened.length; o++) {\r\n            // Update main objects\r\n            rows[i] = updateChangedObject(currentObjectsFlattened[o], rows[i]);\r\n\r\n            // Update edge ends\r\n            if (currentObjectsFlattened[o].constructor.name === \"Arrow\") {\r\n                rows[i] = updateChangedObject(currentObjectsFlattened[o].sourceEdgeEnd, rows[i]);\r\n                rows[i] = updateChangedObject(currentObjectsFlattened[o].destEdgeEnd, rows[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function setTranslationColumns(newColumns) {\r\n    translationColumns = newColumns;\r\n    updateColumns();\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport {currentObjects, setCurrentObjects, updateArrows} from \"../UIElements/CanvasDraw\"\r\nimport {version} from \"../UIElements/MainView\"\r\nimport {setTranslationColumns, translationColumns} from \"../UIElements/SemanticDomainEditor\"\r\nimport {getModelName} from \"../UIElements/CanvasDraw\";\r\n\r\nimport {Vertex} from \"../DataStructures/Vertex\";\r\nimport {Arrow} from \"../DataStructures/Arrow\";\r\nimport {Cardinality} from \"../DataStructures/Cardinality\";\r\nimport {EdgeEnd} from \"../DataStructures/EdgeEnd\";\r\nimport {Graph} from \"../DataStructures/Graph\";\r\nimport { SemanticIdentity } from \"../DataStructures/SemanticIdentity\";\r\n\r\nexport function getSaveData() {\r\n    let vertexObjects = currentObjects.flatten(true, false);\r\n    let arrowObjects = currentObjects.flatten(false, true);\r\n\r\n    // Combine into save data\r\n    let saveData = {\r\n        // The version is being saved in the savefile\r\n        // this is so in future versions, if the serialisation changes\r\n        // They can upgrade the the file to one compatibile with the newer version\r\n        version: version,\r\n\r\n        // Translations for semantic domain editor\r\n        translationColumns: translationColumns,\r\n\r\n        // The data here should all have uuids and should be convertible back into their objects.\r\n        vertices: vertexObjects,\r\n        arrows: arrowObjects,\r\n\r\n        \"modelName\":getModelName()\r\n    };\r\n\r\n\r\n    return saveData;\r\n}\r\n\r\nexport function save() {\r\n    let JSONdata = getSaveData();\r\n    let dataStr = JSON.stringify(JSONdata);\r\n\r\n    let DLelement = document.createElement(\"a\");\r\n    let dataFile = new Blob([dataStr], {type: 'text/json'});\r\n\r\n    DLelement.href = URL.createObjectURL(dataFile);\r\n    let title = getModelName();\r\n    if (title === \"\") {\r\n        title = \"untitled\";\r\n    }\r\n    DLelement.download = title + \".json\";\r\n    document.body.appendChild(DLelement);\r\n    DLelement.click();\r\n}\r\n\r\n// This is done since serialised objects lose their methods\r\n// verticesArray parameter is only used when rebuilding an Arrow type\r\nexport function rebuildObject(item, verticesArray) {\r\n    switch (item.typeName) {\r\n        case \"Vertex\":\r\n            var vertex = new Vertex(item.title, item.content, item.x, item.y, item.width, item.height, item.semanticIdentity);\r\n            return vertex;\r\n\r\n        case \"Arrow\":\r\n        case \"Edge\":\r\n        case \"Specialisation\":\r\n        case \"Visibility\":\r\n            var arrow = new Arrow(verticesArray, item.pathData, item.edgeType, rebuildObject(item.semanticIdentity));\r\n            arrow.sourceEdgeEnd = rebuildObject(item.sourceEdgeEnd);\r\n            arrow.destEdgeEnd = rebuildObject(item.destEdgeEnd);\r\n            return arrow;\r\n\r\n        case \"Cardinality\":\r\n            return new Cardinality(item.numLowerBound, item.numUpperBound, item.attachedToUUID, item.isVisible, rebuildObject(item.semanticIdentity));\r\n\r\n        case \"EdgeEnd\":\r\n            return new EdgeEnd(item.attachedToUUID, item.headType, rebuildObject(item.cardinality), item.label, rebuildObject(item.semanticIdentity));\r\n\r\n        case \"SemanticIdentity\":\r\n            return new SemanticIdentity(item.name, item.description, item.abbreviation, item.shortAbbreviation, item.UUID, item.translations);\r\n        default:\r\n            console.error(\"Unknown object to deserialise \", item);\r\n            break;\r\n    }\r\n}\r\n\r\nexport function open(jsonString) {\r\n    if (jsonString == null) return;\r\n    try {\r\n        var loadedJSON = JSON.parse(jsonString);\r\n\r\n        // Loaded objects ONLY with variables\r\n        setTranslationColumns(loadedJSON.translationColumns);\r\n\r\n        // Update current objects\r\n        var newVertices = [];\r\n        var newArrows = [];\r\n        for (let serialisedVertex of loadedJSON.vertices) {\r\n            if (serialisedVertex !== null) {\r\n                newVertices.push(rebuildObject(serialisedVertex));\r\n            }\r\n        }\r\n\r\n        for (let serialisedArrow of loadedJSON.arrows) {\r\n            if (serialisedArrow !== null) {\r\n                newArrows.push(rebuildObject(serialisedArrow, newVertices));\r\n            }\r\n        }\r\n\r\n        setCurrentObjects(new Graph(newVertices, newArrows));\r\n\r\n        //Rebuild arrow paths\r\n        updateArrows();\r\n\r\n    } catch (e) {\r\n        alert(e);\r\n    }\r\n\r\n}","import React from 'react';\r\nimport * as canvasDraw from \"./CanvasDraw\";\r\nimport { Tool } from './LeftMenu';\r\n\r\nlet movingAllowed = false;\r\nlet selectMultiple = false;\r\nlet selectDown = false;\r\nlet savedObjects = [];\r\n\r\nexport class Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n\r\n        this.state = {}\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextContext) {\r\n        this.zoom = nextProps.mainState.zoomLevel;\r\n        this.tool = nextProps.mainState.drawMode;\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.zoom = this.props.mainState.zoomLevel;\r\n        this.tool = this.props.mainState.drawMode;\r\n\r\n    }\r\n\r\n    // prevent context (right-click) menu from appearing\r\n    ocm = (e) => {\r\n        e.preventDefault();\r\n    };\r\n    // What happens if u click anywhere on the canvas\r\n    mouseDown = (e, canvas) => {\r\n        let position = canvasDraw.getGraphXYFromMouseEvent(e);\r\n        let x = position[0]; let y = position[1];\r\n        this.setState({\r\n            startX: x,\r\n            startY: y\r\n        });\r\n\r\n        //toggle shift key to move all connected\r\n        if (e.shiftKey && !selectDown) {\r\n            selectDown = true;\r\n        }\r\n        // If it was a left click\r\n        if (e.button === 0 && !selectMultiple) {\r\n            let intersection = canvasDraw.findIntersected(x, y);\r\n            // check if there's an object\r\n            if (intersection !== null) {\r\n                //if object is a box, move the object\r\n                if (canvas.tool === Tool.Select && intersection.constructor.name === \"Vertex\") {\r\n                    e.preventDefault();\r\n                    // brings up the menu\r\n                    this.props.setLeftMenu(canvasDraw.findIntersected(x, y));\r\n                    canvasDraw.onMiddleClick(canvas, x, y,null,selectDown);\r\n                    //console.log(selectDown);\r\n\r\n                } else {\r\n                    this.props.setLeftMenu(canvasDraw.findIntersected(x, y));\r\n                    canvasDraw.saveBlockStates(canvas, x, y, 1);\r\n                    canvasDraw.onLeftMousePress(canvas, x, y);\r\n                }\r\n\r\n              } else { //clicked nothing\r\n            this.props.setLeftMenu(canvasDraw.findIntersected(x, y));\r\n            canvasDraw.saveBlockStates(canvas, x, y, 1);\r\n            canvasDraw.onLeftMousePress(canvas, x, y);\r\n            }\r\n        }\r\n        \r\n        //toggles ctrl key to be active for selecting multiple.\r\n        //detoggles in mouseup\r\n        if (e.ctrlKey && !selectMultiple) {\r\n            selectMultiple = true;\r\n        }\r\n\r\n        //mouse down\r\n        if (e.button === 0 && selectMultiple) {\r\n            \r\n            let intersection = canvasDraw.findIntersected(x, y);\r\n            // check if there's an object\r\n            if (intersection === null) {\r\n                this.props.setLeftMenu(intersection, false, savedObjects);\r\n                savedObjects = [];\r\n                selectMultiple = false;\r\n\r\n            }\r\n            if (intersection !== null) {\r\n                //console.log(selectMultiple);\r\n                // Remove dupes\r\n                let foundEnd = 0;\r\n                //start at 0\r\n                while (foundEnd < savedObjects.length-1){\r\n                    //stop @ second last one\r\n                    //check RHS for duplicates\r\n                    //found+1 because wanna look at box after the one we looking at\r\n                    for (let ob = foundEnd+1; ob < savedObjects.length; ob++){\r\n                        if(savedObjects[foundEnd].x === savedObjects[ob].x && savedObjects[foundEnd].y === savedObjects[ob].y ){\r\n                            savedObjects.splice(ob); // if it's the same, delete it and slide array back one\r\n                        }\r\n                    }\r\n                    foundEnd++;\r\n                }\r\n                //ideally want to push in the first object that has already been selected\r\n                console.log(savedObjects);\r\n                savedObjects.push(canvasDraw.findIntersected(x, y));\r\n                canvasDraw.onMiddleClick(canvas, x, y, savedObjects)\r\n                \r\n                for(let i = 0; i <savedObjects.length; i++) {\r\n                    this.props.setLeftMenu(savedObjects[i], selectMultiple);\r\n                }\r\n                \r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        // If it was a middle click\r\n        if (e.button === 1) {\r\n            e.preventDefault();\r\n            canvasDraw.onMiddleClick(canvas, x, y)\r\n        }\r\n\r\n\r\n    };\r\n\r\n    mouseUp = (e, canvas) =>{\r\n\r\n        canvasDraw.solidifyObject();\r\n\r\n        let position = canvasDraw.getGraphXYFromMouseEvent(e);\r\n        let x = position[0]; let y = position[1];\r\n\r\n        // If it was a left click\r\n        if (e.button === 0) {\r\n            if (canvas.tool === Tool.Select) {\r\n                canvasDraw.drawAll()\r\n            }\r\n\t\t\telse {\r\n                canvasDraw.onLeftMouseRelease(canvas, x, y);\r\n            }\r\n\r\n        }\r\n\r\n        // if it was a right click\r\n        if (e.button === 2) {\r\n\r\n           // deleted the old rightclick functionality and will leave this if statement here for when we implement right click menu - cooper\r\n           \r\n\t\t\t\r\n        }\r\n\t\tif (e.shiftKey && selectDown) {\r\n            selectDown = false;\r\n        }\r\n\r\n        if (e.button === 1) {\r\n            window.setTimeout(() => {canvasDraw.solidifyObject()},200)\r\n\r\n        }\r\n\t\tif (canvasDraw.blockBeenSelected === true){\r\n\t\t\tcanvasDraw.checkCollision(canvas, x, y);\r\n\t\t}\r\n\t\t\r\n    };\r\n\r\n    mouseLeave() {\r\n        canvasDraw.onMouseLeave()\r\n    }\r\n\r\n    render() {\r\n        return <canvas ref={this.canvasRef} id=\"drawCanvas\" onContextMenu={(e) => this.ocm(e)} onMouseDown={(e) => this.mouseDown(e, this)} onMouseUp={(e) => this.mouseUp(e, this)} onMouseLeave={(e) => this.mouseLeave(e,this)}>\r\n                <p> HTML5 Canvas elements are not supported by your browser</p>\r\n            </canvas>\r\n    }\r\n\r\n}\r\n\r\nwindow.addEventListener(\"resize\",canvasDraw.resetMouseOrigin);\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\nimport '../App.css';\r\nimport * as canvasDraw from \"./CanvasDraw\";\r\nimport * as fileManager from '../Serialisation/FileManager';\r\nimport {DropdownButton,Dropdown} from \"react-bootstrap\";\r\n\r\nimport {Canvas} from './Canvas';\r\nimport {LeftMenu, LeftMenuType, StringToLeftMenuType, Tool} from './LeftMenu';\r\n\r\n// Semantic domain editor\r\nimport SemanticDomainEditor from \"./SemanticDomainEditor\";\r\nimport {resetRows} from \"./SemanticDomainEditor\";\r\n\r\n//Adding folders to the tree view\r\nimport {handleAddFolder, handleDeleteModel, handleAddModel,handleRenameFolder, getSelectedFolderKey, handleRenameModel} from './ContainmentTree';\r\nimport { handleDeleteFolder } from './ContainmentTree';\r\n\r\nimport { showVertexPath } from './ContainmentTree';\r\nimport { someVertexPath } from './ContainmentTree';\r\nimport { ContextMenu } from './ContextMenu'\r\n\r\nimport iconNewFolder from \"../Resources/create_folder.svg\"\r\nimport iconDeleteFolder from \"../Resources/delete_folder.svg\"\r\nimport iconEditFolder from  \"../Resources/changeFolderName.svg\"\r\nimport iconNewModel from \"../Resources/NewModel.svg\"\r\nimport iconDeleteModel from \"../Resources/DeleteModel.svg\"\r\nimport iconEditModel from \"../Resources/editModel.svg\"\r\n\r\n\r\nexport const version = 1;\r\n\r\nlet folderName = \"Unnamed Folder\";\r\n\r\nexport class MainProgramClass extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            zoomLevel: 200,\r\n            drawMode: Tool.Vertex,\r\n            menu: LeftMenuType.TreeView,\r\n            selectedObject: null,\r\n        };\r\n\r\n        this.setMode = this.setMode.bind(this);\r\n        this.setLeftMenu = this.setLeftMenu.bind(this);\r\n        this.setLeftMenuToTree = this.setLeftMenuToTree.bind(this);\r\n        this.semanticTableEnabled = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setMode(Tool.Select);\r\n        console.log(\"Mounted\");\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let div = document.getElementById(prevState.SelectedTool);\r\n\r\n        if (div !== null) {\r\n            div.style.backgroundColor = \"#FFFFFF\";\r\n        }\r\n\r\n        div = document.getElementById(this.state.SelectedTool);\r\n\r\n        div.style.backgroundColor = \"#CFFFFF\";\r\n\r\n        //console.log(\"Mode set to: \" + this.state.SelectedTool);\r\n\r\n        // This bit of code here updates the path for whatever vertex is being updated\r\n        if (this.state.selectedObject !== null){\r\n            if (this.state.selectedObject.typeName === \"Vertex\"){\r\n                showVertexPath(this.state.selectedObject)\r\n                this.state.selectedObject.setPath(someVertexPath)\r\n            }\r\n        }\r\n\r\n        \r\n        \r\n    }\r\n\r\n\r\n\r\n    updateFolderName = () => {\r\n        folderName = document.getElementById(\"FolderName\").value\r\n    }\r\n\r\n    //The following add/delete functions Now reload the treeview on add/deleteing folders and models - Lachlan\r\n    //The async function is due to javascript executing SetLeftMenuToTree without waiting for handleadd/delete to manipulate data for the new tree - LAchlan\r\n    addFolder = () => {\r\n        //handleAddFolder({modelName:document.getElementById(\"FolderName\").value});\r\n        //ContainmentTree.state = ContainmentTree.state;\r\n        //LeftMenu.state = LeftMenu.state;\r\n        (async() => {\r\n        await handleAddFolder(folderName,getSelectedFolderKey());\r\n        this.setLeftMenuToTree();\r\n        })();\r\n        \r\n    }\r\n\r\n    deleteFolder = () => {\r\n        (async() => {\r\n            await handleDeleteFolder(getSelectedFolderKey());\r\n            this.setLeftMenuToTree();\r\n            })();\r\n    }\r\n\r\n    editFolderName = () => {\r\n        (async() => {\r\n            await handleRenameFolder(folderName,getSelectedFolderKey());\r\n            this.setLeftMenuToTree();\r\n        })();\r\n    }\r\n\r\n    addModel = () => {\r\n        (async() => {\r\n            await handleAddModel(folderName);\r\n            this.setLeftMenuToTree();\r\n            })();\r\n    }\r\n\r\n    deleteModel = () => {\r\n        \r\n        (async() => {\r\n            await handleDeleteModel(canvasDraw.getCurrentModel());\r\n            this.setLeftMenuToTree();\r\n            })();\r\n    }\r\n\r\n    editModelName = () => {\r\n        (async() => {\r\n            await handleRenameModel(folderName,canvasDraw.getCurrentModel());\r\n            this.setLeftMenuToTree();\r\n        })();\r\n    }\r\n\r\n    zoom = (type) => {\r\n        let cZoom = this.state.zoomLevel;\r\n        if (type === \"+\") {\r\n            if (this.state.zoomLevel < 500) {\r\n                this.setState({zoomLevel:cZoom += 25});\r\n                canvasDraw.setZoom(cZoom);\r\n            }\r\n        } else if (type === \"-\") {\r\n            if (this.state.zoomLevel > 100) {\r\n                this.setState({zoomLevel:cZoom -= 25});\r\n                canvasDraw.setZoom(cZoom);\r\n            }\r\n\r\n        } else {\r\n            console.log(\"Invalid Zoom Type\")\r\n        }\r\n    };\r\n\r\n    setMode(mode) {\r\n\r\n        if(mode === Tool.Visibility || mode === Tool.Edge || mode === Tool.Specialisation){\r\n            this.setState({drawMode: \"Arrow\"})\r\n        }else if (mode === Tool.Vertex){\r\n            this.setState({drawMode: \"Vertex\"})\r\n        }else if (mode === Tool.Select){\r\n            this.setState({drawMode: \"Select\"})\r\n        } else if (mode === Tool.Artifact) {\r\n            this.setState({ drawMode: \"Artifact\" })\r\n        } else if (mode === Tool.Container) {\r\n            this.setState({ drawMode: \"Container\" })\r\n        }\r\n\r\n        //console.log(Tool[mode]);\r\n\r\n        this.setState({SelectedTool: Tool[mode]});\r\n\r\n        canvasDraw.setArrowType(mode)\r\n\r\n    };\r\n\r\n    // chooses which left hand menu to display, based on the selected item\r\n    setLeftMenu(nearestObject, ctrl = false, OP = []) {\r\n        \r\n        if (OP !== null){\r\n            for(let i = 0;i<OP.length;i++){\r\n                OP[i].setSelected(false); //visually deselects elements\r\n            }\r\n        }\r\n        // checks if that specific object was clicked\r\n        // if it wasn't then deselect it\r\n        // i.e. determines if objects are selected or not\r\n        if (this.state.selectedObject !== null && ctrl === false) {\r\n            this.state.selectedObject.setSelected(false);\r\n            \r\n        }\r\n\r\n        // check if the nearest object was too far away or didnt exist\r\n        if (nearestObject === null) {\r\n            this.setState({\r\n                menu: LeftMenuType.TreeView,\r\n                selectedObject: null,\r\n            });\r\n\r\n        }\r\n\r\n        // if the selected object has a left menu,\r\n        else if (StringToLeftMenuType[nearestObject.constructor.name] !== null) {\r\n            this.setState({\r\n                menu: nearestObject.constructor.name,\r\n                selectedObject: nearestObject\r\n            });\r\n            console.log(\"below should be selectedObject\");\r\n            console.log(this.state.selectedObject)\r\n            nearestObject.setSelected(true);\r\n        } else {\r\n            if (this.state.selectedObject !== null) {\r\n                canvasDraw.drawAll();\r\n            }\r\n\r\n            this.setState({\r\n                menu: LeftMenuType.TreeView,\r\n                selectedObject: null\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    //Function for setting left menu to tree\r\n    //This function serves as a direct way to \"statechange\" the treeview menu - Lachlan\r\n    setLeftMenuToTree(){\r\n        \r\n        if (this.state.selectedObject !== null) {\r\n            \r\n            canvasDraw.drawAll();\r\n        }\r\n        this.setState({\r\n            \r\n            menu: LeftMenuType.None,\r\n        });\r\n        this.setState({\r\n            menu: LeftMenuType.TreeView,\r\n            selectedObject: null\r\n            \r\n        });\r\n        console.log(\"set left menu To Tree enacted\")\r\n        \r\n    }\r\n\r\n    setModelName = () => {\r\n        this.setState({modelName:document.getElementById(\"ModelName\").value})\r\n    };\r\n\r\n    // Code for file uploading\r\n    // If you know how to move it elsewhere to clean up this file\r\n    // Please move it to src/DataStructures/FileManager.js or similar\r\n    showFile = () => {\r\n        if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n            try {\r\n                let file = document.querySelector('input[type=file]').files[0];\r\n\r\n                let reader = new FileReader();\r\n                reader.readAsText(file);\r\n                reader.onload = function () {\r\n                    fileManager.open(reader.result)\r\n                }\r\n            }catch(e){\r\n                alert(e.text()+\" did you select a file?\")\r\n            }\r\n        } else {\r\n            alert(\"Your browser is too old to support HTML5 File API\");\r\n        }\r\n    };\r\n\r\n    // Used to enable/disable the semantic domain editor\r\n    toggleSemanticDomainState = () => {\r\n        if (this.semanticTableEnabled) {\r\n            this.semanticTableEnabled = false;\r\n            canvasDraw.drawAll();\r\n            this.setState(this.state);\r\n            console.log(\"Semantic Domain disabled\");\r\n        } else {\r\n            this.semanticTableEnabled = true;\r\n            resetRows();\r\n            this.setState(this.state);\r\n            console.log(\"Semantic Domain enabled\");\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    render() {\r\n        let GUI =\r\n        <><ContextMenu setLeftMenuToTree={this.setLeftMenuToTree} /><div className=\"Program\">\r\n                <div className={this.semanticTableEnabled ? \"SemanticDomain\" : \"hidden\"}>\r\n                    <SemanticDomainEditor />\r\n                </div>\r\n\r\n                <div className=\"TopMenus\">\r\n\r\n                    <DropdownButton variant=\"Primary\" id=\"File-Menu\" title=\"File\" size=\"lg\">\r\n\r\n                        <Dropdown.Item>\r\n                            <div className=\"TopBar\">\r\n                                <button id=\"file\" onClick={() => canvasDraw.newFile()}>New File</button>\r\n                            </div>\r\n                        </Dropdown.Item>\r\n\r\n                        <Dropdown.Item>\r\n                            <div className=\"TopBar\">\r\n                                <button id=\"downloader\" onClick={() => canvasDraw.getDownload()} download=\"image.png\">Export as .png</button>\r\n                            </div>\r\n                        </Dropdown.Item>\r\n\r\n\r\n                        <div className=\"TopBar\">\r\n                            <label>Load</label>\r\n                            <input type=\"file\" id=\"File-Select\" onChange={this.showFile} />\r\n                        </div>\r\n\r\n\r\n                        <Dropdown.Item>\r\n                            <div className=\"TopBar\">\r\n                                <button id=\"json-downloader\" onClick={() => fileManager.save()}>Save (as Json)</button>\r\n                            </div>\r\n                        </Dropdown.Item>\r\n\r\n                    </DropdownButton>\r\n\r\n                    <div className=\"TopBar\" onClick={() => this.toggleSemanticDomainState()}>\r\n                        Semantic Editor\r\n                    </div>\r\n\r\n                    <input className=\"TopBarSearch\" id=\"ModelName\" type=\"text\" name=\"modelName\" placeholder=\"Graph Name\" onChange={(e) => this.setModelName(e)} />\r\n                    <input className=\"TopBarSearch\" id=\"FolderName\" type=\"text\" name=\"folderName\" placeholder=\"New Container/Model\" onChange={(e) => this.updateFolderName(e)} />\r\n                    {/*<div className=\"TopBarIcon\">&nbsp;</div>*/}\r\n                    {/*The + and - are backwards on purpose here*/}\r\n                    <div className=\"TopBarIcon\" onClick={() => this.zoom('-')}> - </div>\r\n\r\n                    {/*<div className=\"TopBarLabel\"> {this.state.zoomLevel}% </div>*/}\r\n\r\n                    <div className=\"TopBarIcon\" onClick={() => this.zoom('+')}> + </div>\r\n\r\n\r\n                    {/*<div className=\"TopBarIdentifier\">Rows:&nbsp;</div>*/}\r\n                    {/*<input className=\"TopBarSelector\" style={{\"border-left\": \"0px\"}} type=\"number\" id = \"canvasRows\" defaultValue=\"70\" min=\"0\" max=\"105\" onChange={() => canvasDraw.updateRows()}/>*/}\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.addFolder()}><img src={iconNewFolder} alt=\"Add Container\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.deleteFolder()}><img src={iconDeleteFolder} alt=\"Delete Container\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.editFolderName()}><img src={iconEditFolder} alt=\"Edit Container\" /></div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.addModel()}><img src={iconNewModel} alt=\"Add Model\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.deleteModel()}><img src={iconDeleteModel} alt=\"Delete Model\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.editModelName()}><img src={iconEditModel} alt=\"Edit Model\" /></div>\r\n\r\n\r\n\r\n                </div>\r\n\r\n                <div className=\"LowerPanel\">\r\n                    <LeftMenu setMode={this.setMode} setLeftMenu={this.setLeftMenu} mainState={this.state} className=\"LeftMenus\" />\r\n                    {/*following 3 classes are temporary for displaying currently selected model and container(renderKey) and folder(selectedFolderKey) */}\r\n                    <input className=\"SelectedFolder\" id=\"SelectedFolder\" type=\"text\" name=\"selectedFolder\" readonly='readonly' />\r\n                    <input className=\"SelectedContainer\" id=\"SelectedContainer\" type=\"text\" name=\"selectedContainer\" readonly='readonly' />\r\n                    <input className=\"SelectedModel\" id=\"SelectedModel\" type=\"text\" name=\"selectedModel\" readonly='readonly' />\r\n\r\n                    <div className=\"Canvas\">\r\n                        <Canvas setLeftMenu={this.setLeftMenu} setMode={this.setMode} mainState={this.state} />\r\n                    </div>\r\n                </div>\r\n            </div></>;\r\n        return GUI\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\n\r\nimport React from 'react';\r\nimport TreeView from 'react-simple-jstree';\r\n\r\n\r\n\r\n\r\nimport { currentObjects, getModelName, getCurrentRenderKey, setNewRenderKey, \r\n    getTotalRenderKeys, incrementTotalRenderKeys, \r\n    getCurrentModel, setNewModel, getTotalModels, incrementTotalModels, decreaseTotalModels, decreaseTotalRenderKeys, deleteElement} from \"./CanvasDraw\";\r\n\r\nimport { drawAll } from \"./CanvasDraw\";\r\nimport {VertexNode} from \"../DataStructures/Graph.js\"\r\nimport { ContactsOutlined } from '@material-ui/icons';\r\nimport { LeftMenu, LeftMenuType } from './LeftMenu';\r\nimport { MainProgramClass } from './MainView';\r\n//import { remove,toTreeViewElement } from \"../DataStructures/Graph\";\r\n//import { ContactsOutlined, Remove } from '@material-ui/icons';\r\n\r\n\r\n//import {currentRenderKey} from './CanvasDraw';\r\n\r\n// I need to export this so I can access it in the left menu and then set it to the correct vertex;\r\nexport var someVertexPath = \"\";\r\n\r\nlet focussed = false; //leftover from a depricated feature, should always be false until removed fully- Lachlan\r\nlet currentlySelectedObject = null; //The currently selected object\r\n//let lastSelectedObject = null; // The last selected object\r\n\r\nlet showingVertPath = false;\r\n\r\n// You could probably get away with not including this here, but it just makes it easier to access the tree\r\n// data from any function you like. It still needs to be emptied in the constructor though\r\nlet treeData = [];\r\n\r\n// I need this to store the folders. Initially, it has one folder simply titled 'Unnamed Folder'.\r\nlet folderData = [];\r\n\r\n//used as a container to seperate \"root\" folders and subfolders so that only the root folders are pushed to root.children in the constructor - Lachlan\r\nlet folderDataRoot = [];\r\n\r\n//This variable will be used to store the \"selected folder\" for creating new folders or models\r\n// As renderKey is tied too many methods related to syncing data between canvas and tree/ creating data in tree control of the current renderkey \r\n//has been taken away from the user and will always be set to the parent folder of the selected model (this happens in elementSelect on a model click) - Lachlan\r\nlet selectedFolderKey = 0;\r\n\r\n// This is to do with getting the data indexing to be\r\nlet decoyFolderData = [];\r\n\r\n// An array for holding model names\r\nlet modelObjects = [];\r\nlet decoyModelObjects = []; // doing the same data referencing as folder data because currently the data being referenced in the models is the model beforehand which\r\n                            // i dont tink is intended. - cooper\r\n\r\nlet folderAltered = false;\r\nlet modelAltered = false;\r\n\r\n// created a boolean which whill tell the leftmenu that the containment tree needs to update\r\nexport var treeNeedsUpdate = 0;\r\n\r\n\r\n\r\nexport function setSelectedFolderKey(newKey){\r\n    selectedFolderKey = newKey;\r\n}\r\n\r\nexport function getSelectedFolderKey(){\r\n    return selectedFolderKey;\r\n}\r\n\r\n\r\nexport function getFolderData(){\r\n    return folderData;\r\n}\r\n\r\nexport function setFolderData(newFolderData){\r\n    folderData = newFolderData;\r\n}\r\n\r\nexport function getModelData(){\r\n    return modelObjects;\r\n}\r\n\r\n//This function is used to load the first available model and canvas from the modelObjects array\r\n//Used to fix thye tree/canvas desync bug when deleting - Lachlan\r\nfunction loadFirstModel(){\r\n    //set selected model/render key to the 1st available as so a canvas isnt loaded for a nonexistant model\r\n    setNewRenderKey(modelObjects[0].data.renderKey)\r\n    setNewModel(modelObjects[0].data.modelKey)\r\n    setSelectedFolderKey(modelObjects[0].data.renderKey)\r\n\r\n    //taken from handleElementSelect for loading the new models canvas\r\n    for (let item of currentObjects.flatten()){\r\n        if (item.typeName === \"Vertex\" && item.getModelKey() === getCurrentModel()){\r\n            item.setPresent();\r\n        }\r\n        else if (item.getModelKey() !== getCurrentModel() && item.typeName === \"Vertex\"){\r\n            item.setAway();\r\n        }\r\n    }\r\n    drawAll()\r\n    document.getElementById(\"SelectedFolder\").value = folderData.find(folder => { return folder.renderKey === getSelectedFolderKey()}).text\r\n    document.getElementById(\"SelectedContainer\").value = folderData.find(folder => { return folder.renderKey === getCurrentRenderKey()}).text\r\n    document.getElementById(\"SelectedModel\").value = modelObjects.find(model => { return model.modelKey === getCurrentModel()}).text\r\n}\r\n\r\n\r\n//parent key is for dictating subfolders where 0 is root, else pKey is a folder renderKey - Lachlan\r\nexport function handleAddFolder(folderName, parentKey = 0){\r\n    //Create a new folder using the known node type\r\n\r\n    incrementTotalRenderKeys();\r\n\r\n    let tempFolderThing = {\r\n        text: folderName + \" 📁\",\r\n        children: treeData[getTotalRenderKeys()],\r\n        data: NaN,\r\n        state: {opened: true},\r\n        type: \"Folder\",\r\n        renderKey: getTotalRenderKeys(),\r\n        parentRenderKey: parentKey\r\n    }\r\n\r\n    decoyFolderData.push(tempFolderThing)\r\n\r\n    let folderThing2 = {\r\n        text: folderName + \" 📁\",\r\n        children: treeData[getTotalRenderKeys()],\r\n        data: decoyFolderData[folderData.length],\r\n        state: {opened: true},\r\n        type: \"Folder\",\r\n        renderKey: getTotalRenderKeys(),\r\n        parentRenderKey: parentKey\r\n    }\r\n    \r\n    //console.log(\"theActualData: \" + folderData.length)\r\n    folderData.push(folderThing2);\r\n    //console.log(\"Folder data apparent: \" + folderData[folderData.length-1].data)\r\n    //console.log(folderData)\r\n    //console.log(folderThing2.renderKey)\r\n\r\n    folderAltered = true;\r\n    \r\n}\r\n\r\n// Function to remove a folder in the tree\r\nexport function handleDeleteFolder(selectedRenderKey){ // changing the deleting functions to delete based on renderkey & modelkeys - cooper\r\n    console.log(\"below is the selected render key\")\r\n    console.log(selectedRenderKey)\r\n    if(folderData.length > 1){ //cannot delete folder if it is the only one excluding root - Lachlan\r\n        for (let i = 0; i < folderData.length; i++){\r\n            if (folderData[i].renderKey === selectedRenderKey){\r\n                console.log(\"below is folderdata\")\r\n                console.log(folderData)\r\n                deleteFolderChildren(folderData[i]);\r\n                decoyFolderData.splice(i,1); // have to delete from this array as well because this is where folders obtain the data of themselves \r\n                folderData.splice(i,1); \r\n            }\r\n        }\r\n    \r\n    folderAltered = true;\r\n    }\r\n    else{console.log(\"Cannot delete only folder\")}\r\n    \r\n    loadFirstModel()\r\n}\r\n\r\nfunction deleteFolderChildren(selectedFolder){ // function for deleting all the children of a folder.\r\n    let folderChildren = selectedFolder.children;\r\n    for (let i = 0; i < folderChildren.length; i++){\r\n        if (folderChildren.type === \"Folder\"){\r\n            let selectedRenderKey = folderChildren[i].renderKey;\r\n            handleDeleteFolder(selectedRenderKey);\r\n\r\n        }\r\n        else if (folderChildren.type === \"Model\"){\r\n            let selectedModelKey = folderChildren[i].modelKey;\r\n            handleDeleteModel(selectedModelKey);\r\n        }\r\n    }\r\n}\r\n\r\nfunction deleteModelChildren(selectedModel){ // function for deleting all the children of the model.\r\n    if(selectedModel.children.length > 0){\r\n        let verticesFolder = selectedModel.children;\r\n        for (let i = 0; i < verticesFolder.length; i++){ // had to make a nested for loop due to the encompassing 'vertices' folder\r\n            let vertices = verticesFolder[i].children;\r\n            for (let v = 0; v < vertices.length; v++){\r\n                if (vertices[v].modelkey === selectedModel.modelKey){\r\n                    let chosenObject = vertices[v].data\r\n                    deleteElement(chosenObject);\r\n                }\r\n            }    \r\n        }\r\n    }   \r\n}\r\n\r\n\r\nexport function handleRenameFolder(newName,rKey){\r\n    if(newName != \"\"){\r\n        for (let i = 0; i < folderData.length; i++){\r\n            if (folderData[i].renderKey === rKey){\r\n                folderData[i].text = newName + \" 📁\";\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        console.log(\"Cannot have empty name\")\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Added optional parameter render key, atm used to handle create a model with no folder selected - Lachlan\r\n//initial \"children\" are to prevent erros caused by children initialy not being iterable - Lachlan\r\nexport function handleAddModel(modelName, rKey=getSelectedFolderKey()){\r\n    incrementTotalModels();\r\n    let decoyModelThing = {\r\n        text: modelName + \" 📈\",\r\n        children: [\"Vertices 📁\",\"Arrows 📁\"],\r\n        data: NaN,\r\n        state: {opened: true},\r\n        type: \"Model\",\r\n        renderKey: rKey,\r\n        modelKey: getTotalModels()\r\n    }\r\n    decoyModelObjects.push(decoyModelThing);\r\n\r\n\r\n    let tempModelThing = {\r\n        text: modelName + \" 📈\",\r\n        children: [\"Vertices 📁\",\"Arrows 📁\"],\r\n        data: decoyModelObjects[modelObjects.length],\r\n        state: {opened: true},\r\n        type: \"Model\",\r\n        renderKey: rKey,\r\n        modelKey: getTotalModels()\r\n    };\r\n \r\n    modelObjects.push(tempModelThing);\r\n    console.log(modelObjects)\r\n\r\n    modelAltered = true;\r\n\r\n\r\n}\r\n\r\nexport function handleDeleteModel(selectedModelKey){\r\n\r\n\r\n    for (let i = 0; i < modelObjects.length; i++){\r\n        if (modelObjects[i].modelKey === selectedModelKey){\r\n            console.log(\"model deleted below\")\r\n            console.log(modelObjects[i])\r\n            deleteModelChildren(modelObjects[i]);\r\n            modelObjects.splice(i, 1);\r\n            decoyModelObjects.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    loadFirstModel()\r\n}\r\n\r\nexport function handleRenameModel(newName,mKey){\r\n    for (let i = 0; i < modelObjects.length; i++){\r\n        if (modelObjects[i].modelKey === mKey){\r\n            modelObjects[i].text = newName + \" 📈\";\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getModelRenderKey(selectedModelKey){ // this function is to fetch the renderkey of the selected model to ensure verticies get created with the correct renderkey -- cooper\r\n    for(let i = 0; i < modelObjects.length; i++){\r\n        if (modelObjects[i].modelKey === selectedModelKey){\r\n            return modelObjects[i].renderKey\r\n        }\r\n    }\r\n}\r\n\r\n//Function for changing the parent folder of a model - Lachlan\r\nexport function handleModelRebase(mKey,newRkey){\r\n    console.log(\"Rebase test\")\r\n    console.log(modelObjects)\r\n    for(let model of modelObjects){\r\n        if(model.modelKey === mKey){\r\n           for(let objectFolders of model.children){  \r\n                let objects = objectFolders.children\r\n                for(let object of objects){\r\n                    object.renderkey = newRkey;\r\n                    if(object.data.typeName === \"Vertex\"){\r\n                    object.data.vertexRenderKey = newRkey;\r\n                    }\r\n                    else{\r\n                    object.data.arrowRenderKey = newRkey;\r\n                    }\r\n                }\r\n            } \r\n            console.log(model)\r\n            model.renderKey = newRkey;\r\n            console.log(model)\r\n        }\r\n    }\r\n    console.log(modelObjects)\r\n    treeNeedsUpdate = 1;\r\n}\r\n\r\n\r\n\r\n// This is a function to display the path of a given vertex\r\n// It's called in the left menu of a vertex\r\nexport function showVertexPath(theObject){\r\n\r\n    if (currentObjects.flatten().length > 0){\r\n        currentlySelectedObject = theObject;\r\n        if (showingVertPath === false){\r\n            showingVertPath = true;\r\n\r\n        }\r\n    \r\n        else if (showingVertPath === true){\r\n            showingVertPath = false;\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// This function is used to determine which object should be owned by which folder object.\r\n// Works by taking a look at the children of the treeData array and seeing if their render \r\n// key matches the one parsed to the function\r\nfunction determineOwnership(parsedRenderKey){\r\n    let returnArray = []\r\n    let i = 0\r\n    for (let vertexOrArrow of treeData){\r\n        if(vertexOrArrow !== undefined){\r\n            //console.log(\"treeData object name: \" + vertexOrArrow.text)\r\n\r\n            if (vertexOrArrow.type === \"Model\"){\r\n                if (vertexOrArrow.renderKey === parsedRenderKey){\r\n                    returnArray.push(treeData[i])\r\n                }\r\n                \r\n            }\r\n/*\r\n            for (let child of vertexOrArrow.children){\r\n                // Check if the render key of the child matches \r\n                if (child.renderKey === parsedRenderKey){\r\n                    //console.log(\"Matched tree data: \" + treeData[i])\r\n                    returnArray.push(treeData[i])\r\n                    break\r\n                }\r\n            }\r\n            */\r\n        }\r\n        i += 1\r\n    }\r\n\r\n    return returnArray\r\n}\r\n\r\n//function used for determineing which folders are owned by a higher folder - Lachlan\r\nfunction determineSubFolders(parsedRenderKey){\r\n    let returnArray = []\r\n    for (let folder of folderData){\r\n        if(folder.parentRenderKey === parsedRenderKey)\r\n        returnArray.push(folder)\r\n    }\r\n    //console.log(\"subfolder return\")\r\n    //console.log(returnArray)\r\n    return returnArray\r\n}\r\n\r\n\r\n\r\nlet initialFolderAdded = false;\r\nexport class ContainmentTree extends React.Component {\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n    componentDidUpdate(){}\r\n    \r\n    componentWillUnmount() {\r\n        \r\n    }\r\n    \r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        treeData = []; \r\n        //let i = 0;\r\n        //console.log(\"props\")\r\n        //console.log(props)\r\n        \r\n\r\n        \r\n        if (initialFolderAdded === false){\r\n            setNewRenderKey(1);\r\n            setNewModel(1);\r\n            setSelectedFolderKey(1);\r\n            handleAddFolder(\"Folder\");\r\n            //The initial folder has render key 1, the initial model needs this to be specified as nothing is selected\r\n            handleAddModel(\"Model\",1) \r\n            initialFolderAdded = true;\r\n            handleAddFolder(\"Subfolder\",getCurrentRenderKey())\r\n        }\r\n        \r\n\r\n            // Push the model objects in. --- I moved the position of these for loops outside of the vertex for loop as it was creating a few problems - cooper\r\n        for (let model of modelObjects){\r\n            treeData.push(model);           \r\n            \r\n        }\r\n        for (let folder of folderData){ // this for loop is to define the ownership of the models - cooper\r\n                //folder.children = determineOwnership(folder.renderKey)  \r\n                //folder.children = determineSubFolders(folder.renderKey)\r\n                let canvasItems = determineOwnership(folder.renderKey) \r\n                let subFolderItems = determineSubFolders(folder.renderKey)\r\n                let combinedItems = canvasItems.concat(subFolderItems)\r\n                //console.log(\"test\")\r\n                //console.log(\"treedata\");\r\n                //console.log(treeData);\r\n                //console.log(combinedItems)\r\n                folder.children = combinedItems;\r\n\r\n            }\r\n               // treeData.push(vertex.toTreeViewElement(new Set())); --- not too sure what the point of this .push was - cooper   \r\n            \r\n        for (let folder of folderData){ // this for loop is to define the ownership of the vertices & arrows - cooper\r\n            for (let model of treeData){\r\n                //for (let vertex of currentObjects.flattenVertexNodes()){ - Loop removes as onyl calls toTreeview when currentObjects is not empty - Lachlan\r\n                    let vertex = new VertexNode() //we need a vertex object to call the toTreeViewElement function, however the function ignores the calling vertex so we just make an \r\n                    //empty one so that toTreeview will always be called regardless of what in \"currentObjects\" - Lachlan\r\n                        //Reverted the graph fix for the iteration problem caused by directly assigning model children as manually assigning the vertex folder \r\n                    //to index 0 and the arrow folder to index 1 (creating an interable by default) fixes this issue and prevents the folders overwriting eachother - Lachlan\r\n                    //removed alot of the weird renames and unnesecary logic and changed it so that multiples vert/arrow folders can exist in a parent folder ie. one set per model \r\n                    //and that verts/arrows are added only where they share a matching modelkey - Lachlan\r\n\r\n                    if (vertex.toTreeViewElement(\"Vertex Folder\", folder.renderKey, model.modelKey) !== undefined && model.renderKey === folder.renderKey){\r\n                    //console.log(\"a vertexorarrow: \",vertex)\r\n                        model.children[0] = vertex.toTreeViewElement(\"Vertex Folder\", folder.renderKey, model.modelKey)\r\n                    }\r\n\r\n                    if (vertex.toTreeViewElement(\"Arrow Folder\", folder.renderKey, model.modelKey) !== undefined && model.renderKey === folder.renderKey){\r\n                         //console.log(\"a vertexorarrow: \",vertex)\r\n                        model.children[1] = vertex.toTreeViewElement(\"Arrow Folder\", folder.renderKey, model.modelKey)\r\n                    }       \r\n                    //console.log(model.text,\" children: \",model.children)\r\n                    //break; //break exists as for loop is leftover and useless but we need the \"vertex\" object to be able to call toTreeviewElement and currentObjects isnt always indexable\r\n                //}\r\n            }\r\n        }\r\n\r\n        folderDataRoot = [];\r\n        for (let folder of folderData){\r\n            if(folder.parentRenderKey ===0){\r\n                folderDataRoot.push(folder)\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n            \r\n            \r\n            //console.log(currentObjects);\r\n            //console.log(treeData);\r\n            //console.log(currentObjects.flatten())\r\n        \r\n\r\n        \r\n        \r\n        this.state = {\r\n            data: {\r\n                core: {\r\n                    data: [\r\n                        { text: getModelName(), \r\n                        children: folderDataRoot, state: { opened: true }, \r\n                        root: true},\r\n                    ]\r\n                }\r\n            },\r\n            selectedVertex: null\r\n        }\r\n\r\n\r\n\r\n        if(showingVertPath === true){\r\n            /*\r\n            let highestLevel = getModelName();\r\n            let nextLevel = \"\";\r\n            let vertexOrEdge = \"\";\r\n            let actualObject = \"\";\r\n        \r\n            let b = 0;\r\n            //First, we need to actually determine where the vertex is\r\n            //Take a look at our container\r\n            for (let cont of folderData){\r\n                //Take a look at the children of the containers (arrows and such)\r\n                for (let treeDat of cont.children){\r\n                    //Why is the vertex folder coming up as undefined?????\r\n                    if(b === 0){\r\n                        //console.log(\"SECOND LAYER: \" + treeDat.children);\r\n                        for (let treeElement of treeDat.children){\r\n                            if ((treeElement.text === currentlySelectedObject.title || currentlySelectedObject.title === \"Unnamed Vertex\")){\r\n        \r\n                                nextLevel = cont.text;\r\n        \r\n                                vertexOrEdge = \"Vertices\";\r\n        \r\n                                actualObject = currentlySelectedObject.title;\r\n                            }\r\n                        }\r\n                        b = 1;\r\n                    }\r\n                    \r\n                }\r\n                someVertexPath = highestLevel +\"::\"+ nextLevel +\"::\"+ vertexOrEdge +\"::\"+ actualObject;\r\n            }\r\n            */\r\n\r\n            let highestLevel = getModelName();\r\n            let nextLevel = \"\";\r\n            let vertexOrEdge = \"\";\r\n            let actualObject = \"\";\r\n\r\n            let b = 0;\r\n            //First, we need to actually determine where the vertex is\r\n            //Take a look at our container\r\n            for (let cont of folderData){\r\n                //console.log(\"This is active test \". cont)\r\n                //console.log(\"folder text: \" + cont.text)\r\n                //Take a look at the children of the containers (arrows and such)\r\n                for (let treeDat of cont.children){\r\n                    //console.log(\"treeDat text: \" + treeDat.text) \r\n                    //console.log(\"num of rkeys is:\", getTotalRenderKeys())\r\n                    //console.log(folderData)\r\n                    //Why is the vertex folder coming up as undefined?????\r\n                    //console.log(cont.children)\r\n                    if(b === 0){\r\n                        //console.log(\"SECOND LAYER: \" + treeDat.children);\r\n                        for (let treeElement of treeDat.children){\r\n                            //console.log(\"Vertices text: \" + treeElement)\r\n                                if ((treeElement.text === currentlySelectedObject.title)){\r\n                                    \r\n                                    nextLevel = cont.text;\r\n                                    \r\n                                    vertexOrEdge = \"Vertices\"\r\n                                    \r\n                                    actualObject = currentlySelectedObject.title\r\n\r\n                                    someVertexPath = highestLevel +\"::\"+ nextLevel +\"::\"+ vertexOrEdge +\"::\"+ actualObject;\r\n                                    b = 1;\r\n\r\n                                \r\n                                }\r\n\r\n                        }\r\n                        \r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        if (folderAltered === true){\r\n\r\n           // this.forceUpdate()\r\n\r\n            folderAltered = false\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //Function called when an object in treeview is clicked\r\n    handleElementSelect(e, data) {\r\n\r\n\r\n        //console.log(\"Selected Length: \" + data.selected.length)\r\n\r\n        // Try catch used to catch error whe selecting a treeview item with no data type eg. root\r\n        \r\n        try{\r\n            //console.log(\"Selected Data 1: \" + data.node.data)\r\n            //console.log(\"Selected type 1: \" + data.node.original.type)\r\n            //console.log(\"Selected text 1: \" + data.node.text)\r\n            //console.log(data.node)\r\n            //console.log(\"Selected Type 2: \" + data.node.data.type)\r\n            //console.log(\"Selected Name 2: \" + data.node.data.text)\r\n            //console.log(folderData);\r\n            //console.log(data.node.data)\r\n\r\n            \r\n\r\n            if(data.node.type === \"Vertex Folder\"){\r\n                //console.log(\"You clicked a vertex folder\")\r\n            }\r\n\r\n            else if(data.node.data.type === \"Folder\"){\r\n                //console.log(\"Clicked Folder: \" + data.node.data.text)\r\n                //setNewRenderKey(data.node.data.renderKey)\r\n                setSelectedFolderKey(data.node.data.renderKey)\r\n                \r\n\r\n                //console.log(\"The render key is now \" + data.node.data.renderKey);\r\n\r\n\r\n            }\r\n\r\n            else if (data.node.data.type === \"Model\"){\r\n                //console.log(\"The selected model is: \" + data.node.data.text)\r\n                //console.log(\"The current folder is: \" + data.node.data.renderKey)\r\n                setNewModel(data.node.data.modelKey);\r\n                //console.log(\"The model key is now \" + getCurrentModel()); // there were issues here with camelCasing causing no modelKey to be selected- cooper\r\n                //setNewRenderKey(data.node.data.renderKey)\r\n                setNewRenderKey(data.node.data.renderKey); // automatically sets the renderkey to be the same as the models as this was causing issues - cooper\r\n                setSelectedFolderKey(data.node.data.renderKey)\r\n                //console.log(\"The render key is now \" + data.node.data.renderKey);\r\n                // Move everything away\r\n                for (let item of currentObjects.flatten()){\r\n                    if (item.typeName === \"Vertex\" && item.getModelKey() === getCurrentModel()){\r\n                        //console.log(\"Item is set as present\")\r\n                        item.setPresent();\r\n                    }\r\n\r\n                    else if (item.getModelKey() !== getCurrentModel() && item.typeName === \"Vertex\"){\r\n                        //console.log(\"Item is sent away\")\r\n                        item.setAway();\r\n                        //console.log(\"The item to not be rendered is\" + item.typeName);\r\n                    }\r\n                }\r\n            }\r\n            \r\n        //console.log(\"The data is: \" + data.node.data);\r\n\r\n            else if (data.selected.length === 1 && data.node.data !== null && data.node.data.type === undefined) {\r\n                let UUID = data.node.data.semanticIdentity.UUID;\r\n                //console.log(\"UUID: \" + UUID)\r\n                for (let vertex of currentObjects.flatten()) {\r\n                    if (vertex.semanticIdentity.UUID === UUID) {\r\n                        //setNewRenderKey(vertex.getRenderKey())\r\n                        //setNewModel(vertex.getModelKey())\r\n                        this.setState({\r\n                            \r\n                            selectedVertex: vertex\r\n                        });\r\n\r\n                        //The following is required to change canvas to the selected vertex's model preventing desync issues of tree and canvas - Lachlan\r\n                    \r\n                        setNewRenderKey(vertex.vertexRenderKey);\r\n                        setNewModel(vertex.vertexModelKey); \r\n                        setSelectedFolderKey(vertex.vertexRenderKey)\r\n                        \r\n                        for (let item of currentObjects.flatten()){\r\n                            if (item.typeName === \"Vertex\" && item.getModelKey() === getCurrentModel()){\r\n                                item.setPresent();\r\n                            }\r\n                            else if (item.getModelKey() !== getCurrentModel() && item.typeName === \"Vertex\"){\r\n                                item.setAway();\r\n                            }\r\n                        }\r\n                    \r\n\r\n                        this.props.setLeftMenu(this.state.selectedVertex);\r\n\r\n                        // Set the current render key to whatever object the person has clicked from\r\n                        // the tree view\r\n                        \r\n                        //console.log(\"The old render key is: \" + currentRenderKey);\r\n                        //this.currentRenderKey = this.state.selectedVertex.getRenderKey();\r\n                        //console.log(\"The new render key is: \" + currentRenderKey);\r\n                        \r\n\r\n                        //currentRenderKey = 1; \r\n                        //console.log(\"Render old key is \" + getCurrentRenderKey());\r\n                        //setNewRenderKey(this.state.selectedVertex.getRenderKey());\r\n                        //console.log(\"The new render key is : \" + getCurrentRenderKey());\r\n                        //currentRenderKey = 1;\r\n                        \r\n                        //console.log(\"The selected object is: \" + this.state.selectedVertex.getRenderKey())\r\n                    }\r\n                }\r\n                \r\n\r\n            } else {\r\n                this.setState({\r\n                    selectedVertex: null\r\n                });\r\n            }\r\n            \r\n\r\n            drawAll();\r\n        }\r\n        catch(e){\r\n            //console.log(e instanceof TypeError)\r\n            //console.log(\"If True,a null type error has been caught, If the selected object should be selectable, this is an issue\")\r\n        }\r\n\r\n        //If the user clicks the root folder       -Lachlan\r\n        try{\r\n            if(data.node.original.root === true){\r\n                //console.log(\"This is root\")\r\n                setSelectedFolderKey(0) //renderkey 0 will be used for root\r\n            }\r\n        }\r\n        catch(e){\r\n            //console.log(\"This is not root\")\r\n        }\r\n\r\n        //used to update the currently selected model/folders fields - Lachlan\r\n        if(getSelectedFolderKey() === 0){\r\n            document.getElementById(\"SelectedFolder\").value = \"Root\"\r\n        }\r\n        else{\r\n        document.getElementById(\"SelectedFolder\").value = folderData.find(folder => { return folder.renderKey === getSelectedFolderKey()}).text\r\n        }\r\n        document.getElementById(\"SelectedContainer\").value = folderData.find(folder => { return folder.renderKey === getCurrentRenderKey()}).text\r\n        document.getElementById(\"SelectedModel\").value = modelObjects.find(model => { return model.modelKey === getCurrentModel()}).text\r\n        //console.log(modelObjects)\r\n\r\n    }\r\n\r\n    handleContextMenu(){\r\n        console.log(\"CM triggered for tree\")\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const data = this.state.data;\r\n        //console.log(data)\r\n        /*\r\n        if (this.state.selectedObject !== null){\r\n            console.log(\"The old render key is: \" + currentRenderKey);\r\n            currentRenderKey = this.state.selectedObject.getRenderKey();\r\n            console.log(\"The new render key is: \" + currentRenderKey);\r\n        }\r\n        */\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <TreeView treeData={data} onChange={(e, data) => this.handleElementSelect(e, data)} className=\"treeview\" />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import { ClickAwayListener } from '@material-ui/core';\r\nimport React from 'react';\r\nimport {getFolderData,setFolderData,getModelData,getSelectedFolderKey,setSelectedFolderKey,handleModelRebase,handleRenameFolder} from \"./ContainmentTree\"\r\nimport {getCurrentRenderKey, setNewRenderKey, getCurrentModel, setNewModel, } from \"./CanvasDraw\";\r\nimport {setLeftMenuToTree} from \"./LeftMenu\"\r\nimport { LocalConvenienceStoreOutlined } from '@material-ui/icons';\r\n\r\nlet rightClickedItem = \"Default\"; //Name of the right clicked item where \"Default\" is a non-object such as empty canvas space\r\nlet rightClickedItemType = \"None\"\r\nlet rightClickedItemKey = 0; // Identifying key of selected item needed to use relating methods eg. selectedFolderKey, ModelKey,VertexKey.\r\nlet menuType = \"Default\"; //Which menu type to return based on the selected item and what operations are available to it\r\n\r\n//Right click menu component used to access certain function of program\r\nexport class ContextMenu extends React.Component {\r\n    constructor(props){ // added the constructer to drag props in from MainView class (setLeftMenuToTree function)\r\n        super(props);\r\n    }\r\n    \r\n    state = {\r\n        xPos: \"0px\",\r\n        yPos: \"0px\",\r\n        showMenu: false\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"click\", this.handleClick);\r\n        document.addEventListener(\"contextmenu\", this.handleContextMenu);\r\n        document.addEventListener(\"keypress\", this.handleKey);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"click\", this.handleClick);\r\n        document.removeEventListener(\"contextmenu\", this.handleContextMenu);\r\n        document.removeEventListener(\"keypress\", this.handleKey);\r\n    }\r\n\r\n    //The handle click method will check which option has been clicked and call the relevant method\r\n    handleClick = (e) => {\r\n        //ignore clicks if context menu closed\r\n        if (this.state.showMenu) {\r\n            //console.log(e.target.id)\r\n            \r\n            //If Move model was selected, create a new context menu with available folders\r\n            if(e.target.id === \"MoveModel\"){\r\n                menuType = \"MoveModel\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id.includes(\"Folder\")){\r\n                let newFolderKey = e.target.id.replace(\"Folder\",'')\r\n                //console.log(newFolderKey) \r\n                handleModelRebase(rightClickedItemKey,parseInt(newFolderKey));\r\n                console.log(\"model \", rightClickedItemKey, \" moved to folder id \",newFolderKey)\r\n                this.setState({showMenu: false})\r\n                this.props.setLeftMenuToTree();\r\n            }\r\n            else if(e.target.id === \"Rename\"){\r\n                menuType = \"Rename\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"RenameBox\" || e.target.id === \"CMSelected\"){ //This prevents the context menu closing when certain targets are clicked\r\n            }\r\n\r\n            \r\n            else{this.setState({ showMenu: false });}\r\n            \r\n        }\r\n    }\r\n\r\n    handleKey = (e) => {\r\n        if(e.key === 'Enter'){\r\n            if(menuType === \"Rename\"){\r\n                let newName = document.getElementById(\"RenameBox\").value\r\n                handleRenameFolder(newName,rightClickedItemKey)\r\n                console.log(\"menu change\")\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){ //Not sure why theres an error here as it performs the method, then says the method doesnt exists, doesnt trigger on other uses of method either.-Lachlan\r\n                    console.log(e)\r\n                }\r\n                console.log(\"menu change fin\")\r\n                this.setState({ showMenu: false })\r\n            }\r\n    }\r\n        /*if(e.key === 'Enter'){\r\n            console.log(\"enter pressed\")\r\n        }\r\n        */\r\n    }\r\n\r\n    \r\n    handleContextMenu = (e) => {\r\n        e.preventDefault();//prevent default stops the regular contextmenu from appearing\r\n\r\n        /*as alot of the \"data\" is in the back end and not in the html element displayed,\r\n         we need to simulate a left click to actually select what were right clicking on in the background \r\n         */\r\n        e.target.click();\r\n\r\n        menuType = \"Default\"; //reset the menu type\r\n        rightClickedItem = \"Default\" //reset the selected item\r\n        rightClickedItemKey = 0 //reset the index\r\n\r\n        //console.log(e.target.className)\r\n\r\n        //If target is tree node\r\n        if(e.target.className === \"jstree-anchor jstree-hovered jstree-clicked\"){\r\n            //console.log(\"clicked a tree object\")\r\n            //if target is existing folder, load the folder menu\r\n            if(e.target.text.includes(\"📁\")){\r\n                for(let folder of getFolderData()){\r\n                    if(e.target.text === folder.text){\r\n                        //console.log(\"matching folder found\")\r\n                        menuType = \"Folder\"\r\n                        rightClickedItem = e.target.text;\r\n                        rightClickedItemKey = getSelectedFolderKey();\r\n                    }\r\n                }\r\n            }\r\n\r\n            //if target is existing model, load model menu\r\n            if(e.target.text.includes(\"📈\")){\r\n                for(let model of getModelData()){\r\n                    if(e.target.text === model.text){\r\n                        //console.log(\"matching model found\")\r\n                        menuType = \"Model\"\r\n                        rightClickedItem = e.target.text;\r\n                        rightClickedItemKey = getCurrentModel();\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n        this.setState({\r\n            xPos: `${e.pageX}px`,\r\n            yPos: `${e.pageY}px`,\r\n            showMenu: true,\r\n          });\r\n        \r\n    };\r\n    \r\n\r\n    render() {\r\n        const { showMenu, yPos, xPos } = this.state;\r\n        if (showMenu){\r\n            if(menuType === \"Default\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\">Default</div>   \r\n\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Folder\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\">{rightClickedItem}</div>   \r\n                    <div className=\"CMitem\" id=\"Rename\"> Rename</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Model\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> {rightClickedItem} </div>   \r\n                    <div className=\"CMitem\" id=\"Navigate\"> Navigate (not implemented) </div>\r\n                    <div className=\"CMitem\" id=\"MoveModel\"> Move To </div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"MoveModel\"){\r\n\r\n                let renderedOutput = getFolderData().map(item => <div className=\"CMitem\" id={'Folder'+ item.renderKey} key={item.text}> {item.text} </div>);\r\n\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> Move \"{rightClickedItem}\" To:</div>   \r\n                    <div>{renderedOutput}</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Rename\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> {rightClickedItem} </div>   \r\n                    <input className=\"CMText\" id=\"RenameBox\" type=\"text\" name=\"renameItem\" placeholder='new Name'/>\r\n                    \r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    else return null;\r\n  }\r\n}\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\n\r\nimport './App.css';\r\nimport  {ContextMenu} from \"./UIElements/ContextMenu\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n \r\n        <div className=\"App\">\r\n            <div id='program'>\r\n            </div>\r\n            <ContextMenu/>\r\n        </div>\r\n\r\n  );\r\n\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// Resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as ServiceWorker from './ServiceWorker';\r\nimport {MainProgramClass} from './UIElements/MainView';\r\nimport {assignElement} from \"./UIElements/CanvasDraw\";\r\nimport {getSaveData} from \"./Serialisation/FileManager\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nReactDOM.render(<MainProgramClass />,document.getElementById(\"program\"));\r\nassignElement(\"drawCanvas\");\r\n\r\n// save to server every interval\r\n\r\n\r\n//setInterval(() => {\r\n//    let data = JSON.stringify(getSaveData());\r\n//\r\n//    fetch('http://localhost:8080/serialisation/save',{\r\n//        method:'POST',\r\n//        headers: {\r\n//            'Accept': '*/*',\r\n//            'Content-Type': 'application/json',\r\n//            'Content-Length':data.length\r\n//        },\r\n//        body: data\r\n//    });\r\n//},60000);\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nServiceWorker.unregister();\r\n\r\n"],"sourceRoot":""}