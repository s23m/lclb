{"version":3,"sources":["Resources/vertex.svg","Resources/edge.svg","Resources/select.svg","Resources/artifact.svg","Resources/container.svg","Resources/redo.svg","Resources/undo.svg","Resources/specialisation.svg","Resources/visibility.svg","Resources/create_folder.svg","Resources/delete_folder.svg","Resources/changeFolderName.svg","Resources/NewModel.svg","Resources/DeleteModel.svg","Resources/editModel.svg","Resources/createVertex.svg","App.js","ServiceWorker.js","DataStructures/SemanticIdentity.js","DataStructures/Graph.js","DataStructures/ArrowProperties.js","UIElements/LeftMenu.js","UIElements/SemanticDomainEditor.js","DataStructures/Cardinality.js","DataStructures/EdgeEnd.js","DataStructures/Arrow.js","Serialisation/NewFileManager.js","UIElements/ContainmentTree.js","DataStructures/Vertex.js","UIElements/Canvas.js","UIElements/CanvasDraw.js","UIElements/ContextMenu.js","UIElements/MainView.js","index.js"],"names":["module","exports","App","className","id","Boolean","window","location","hostname","match","SemanticIdentity","name","description","abbreviation","shortAbbreviation","UUID","translations","this","typeName","undefined","replace","c","crypto","getRandomValues","Uint8Array","toString","VertexNode","vertex","children","Set","cleanObjectPath","getModelName","vertexObjectPath","node","add","traversedVertices","isRemoved","has","delete","child","remove","recursive","semanticIdentity","getVertexNode","flattenedArray","childNode","push","flatten","flattenVertexNodes","returnOption","parsedRenderKey","ArrowChildren","VertexChildren","i","currentObjects","length","getRenderKey","title","setVertexTreePath","tempTreeObj","text","data","renderkey","modelkey","getModelKey","state","opened","type","ourSourceEnd","pathData","ourDestEnd","textSource","textDest","j","someObject","treeAppearanceSwitches","getNavigable","getAggregation","arrowIcon","folderTitle","treePath","ArrowEdge","flattenedVertexNodes","arrow","updateVertices","sourceVertexNodeObject","destVertexNodeObject","isSourceFound","sourceVertexUUID","isDestFound","destVertexUUID","vertexNode","Graph","vertexArrayFlattened","arrowArrayFlattened","rootVertices","arrows","objects","Array","isArray","object","addVertex","addArrow","originalUUID","newTitle","originalVertex","sID","console","log","getArrowEdge","destVertexNode","sourceVertexNode","isAnotherRoot","sourceVertex","error","returnArray","destVertex","newobject","isEquivalentArrow","isArrowWithSameSource","isEquivalentSource","isEquivalentDest","removeFromChildren","rootNode","arrowEdge","doFlattenVertices","doFlattenArrows","verticesSet","arrowsSet","from","concat","EdgeEnd","EdgeEndToString","StringToEdgeEnd","LineColour","LineColourToStringName","StringNameToLineColour","LineType","LineTypeToString","StringToLineType","LeftMenuType","TreeView","Vertex","Arrow","Artifact","Container","LeftMenuTypeToString","StringToLeftMenuType","rows","Tool","Select","Visibility","Edge","Specialisation","LeftMenu","props","testUpdateLabel","setPath","getVertexColour","selectedObject","getColour","setVertexColour","colour","setColour","hex","canvasDraw","deleteTitle","setState","getMenu","leftMenuContents","toolbar","onClick","setMode","src","iconSelect","alt","onKeyDown","onKeyPressed","iconVertex","iconArtifact","iconContainer","iconEdge","menu","setLeftMenu","value","onInput","handleChange","getContentAsString","getS23MIconsSelector","getColourPicker","defaultChecked","getAbstract","toggleAbstract","deselectElement","vertexDeleteElement","placeholder","defaultValue","vertexPath","onKeyUp","setTitle","setContent","deleteElement","edgeType","setNavigable","setAggregation","lineColour","onChange","getSourceCardinalityVisibility","toggleSourceCardinalityVisibility","getSourceCardinalityLowerBound","min","max","updateCardinality","getSourceCardinalityUpperBound","getDestCardinalityVisibility","toggleDestCardinalityVisibility","getDestCardinalityLowerBound","getDestCardinalityUpperBound","sourceEdgeEnd","label","setStartLabel","destEdgeEnd","setEndLabel","e","stripElement","ref","setFormRef","fileNames","content","bind","formRef","element","setIcons","event","target","mainState","selectedItem","drawMode","document","addEventListener","keyCode","nextProps","nextContext","prevProps","prevState","snapshot","leftMenu","getElementById","key","preventDefault","fetch","serverURL","method","headers","then","res","json","icons","forEach","icon","newContent","split","newLineType","setLineType","newColour","setLineColour","newLabel","sourceLowerBound","sourceUpperBound","currentSourceVisibility","destLowerBound","destUpperBound","currentDestVisibility","updateSourceCardinality","updateDestCardinality","dropdownOptions","fileName","slice","disabled","shouldIconBeSelected","setIcon","shouldTextBeSelected","setText","DropdownButton","color","onChangeComplete","presetColors","isTextSet","isIconSet","side","toggleNavigable","checked","toggleAggregation","SourceAggregation","DestAggregation","trimPath","reset","React","Component","setRows","setColumns","textInput","createRef","translationColumns","onSave","workbook","xlsx","writeBuffer","buffer","saveAs","Blob","getRowId","row","styles","input","fontSize","width","container","maxWidth","selector","height","StartEditActionSelector","withStyles","defaultAction","changeAction","classes","Grid","alignItems","Typography","OutlinedInput","labelWidth","margin","MenuItem","SelectTextChecker","isSelectText","changeSelectText","FormControlLabel","control","Checkbox","EditPropsPanel","FocusableCell","restProps","Cell","tabIndex","onFocus","useState","createColumns","columns","setColumnsRet","columnName","editingEnabled","editingStateColumnExtensions","generatedRows","setRowsRet","wordWrapEnabled","tableColumnExtensions","startEditAction","setStartEditAction","selectTextOnEditStart","setSelectTextOnEditStart","exporterRef","useRef","startExport","useCallback","current","exportGrid","Paper","InputGroup","FormControl","aria-label","aria-describedby","Append","Button","variant","updateColumns","addColumn","splice","indexOf","removeColumn","onCommitChanges","changedRows","added","changed","deleted","startingAddedId","map","index","currentObjectsFlattened","treeVert","vertexData","updateChangedObject","o","updateChangedObjects","deletedSet","filter","columnExtensions","cellComponent","getRowForObject","translation","columnNames","set","setTranslationColumns","newColumns","Cardinality","lowerBound","upperBound","attachedToUUID","isVisible","numLowerBound","numUpperBound","getDescription","lower","upper","headType","ArrowProps","cardinality","edgeEndRenderKey","getCurrentRenderKey","edgeEndModelKey","getCurrentModel","visibility","canvasContext","points","strokeColour","fillColour","strokeStyle","fillStyle","beginPath","moveTo","X","Y","lineTo","closePath","fill","stroke","x","y","angle","angleFromLine","Math","PI","angleInverted","arrowPoints","cos","sin","drawLines","sideLength","deg30","trianglePoints","deg20","diamondPoints","drawArrowEnd","drawTriangleEnd","drawDiamondEnd","newType","objectsList","updateAttachedVertices","rebuildPath","lineType","selected","sourceIsNavigable","destIsNavigable","sourceIsAggregation","destIsAggregation","arrowModelKey","arrowRenderKey","getModelRenderKey","path","connectedObjectUUIDs","getObjectUUIDList","pathItem","getZerothCasePathItem","realHeight","output","item","pathStart","pathEnd","toggleVisibility","val","nodeIndex","d","topLeft","top","topRight","right","bottomRight","bottom","bottomLeft","left","vertexNodes","lineAngle","atan2","getSY","getNSY","getSX","getNSX","draw","getEY","getNEY","getEX","getNEX","startIndex","endIndex","indexSx","indexEx","indexSy","indexEy","abs","sourceText","destText","sourceCtext","destCtext","sxOffset","syOffset","exOffset","eyOffset","sxOffsetc","syOffsetc","exOffsetc","eyOffsetc","sourceTextWidth","measureText","destTextWidth","sourceCtextWidth","destCtextWidth","charWidth","sxFlip","syFlip","exFlip","eyFlip","E1index","E2index","startLRArrow","isPathSegmentLR","endLRArrow","SSX","SSY","SEX","SEY","ESX","ESY","EEX","EEY","sourceCardText","destCardText","Offsets","getTextOffsets","fillText","setLineDash","to","drawStartHead","drawEndHead","drawLabelsAndCardinalities","pos","drawMarker","cx","cy","intersectsSegment","getDistance","getSaveData","vertexObjects","arrowObjects","treeData","JSON","parse","stringify","folderData","getFolderData","decoyFolderData","getVertexData","decoyVertexData","modelObjects","getModelData","decoyModelObjects","totalRenderKeys","getTotalRenderKeys","totalModels","getTotalModels","currentModel","currentKey","currentFolder","getSelectedFolderKey","vertices","tree","packages","dPackages","treeVertex","dTreeVertex","graph","dGrraph","renderKeys","modelKeys","currentMod","currentFol","load","jsonString","saveData","vert","newVertices","newArrows","newConstructor","loadedVertex","remakeArrow","setFolderData","setDecoyFolderData","setVertexData","setDecoyVertexData","setModelData","setDecoyModelData","setTreeData","setTotalRenderKey","setTotalModelKeys","setCurrentObjects","updateArrows","setSelectedFolderKey","setNewRenderKey","setNewModel","drawAll","remakeSemantic","semantic","remakeEdge","edge","newArrow","loadDirect","saveStates","currentState","createSaveState","newData","Object","assign","shift","unshift","pop","someVertexPath","currentlySelectedObject","showingVertPath","folderDataRoot","selectedFolderKey","folderAltered","newKey","newTreeData","newFolderData","getContainerData","loadFirstModel","renderKey","modelKey","setPresent","setAway","handleAddFolder","folderName","parentKey","incrementTotalRenderKeys","tempFolderThing","NaN","parentRenderKey","folderThing2","handleDeleteFolder","selectedRenderKey","deleteFolderChildren","selectedFolder","folderChildren","handleDeleteModel","deleteModelChildren","selectedModel","verticesFolder","v","handleRenameFolder","newName","rKey","handleAddVertex","vertexName","tempVertexThing","imageElements","vertexThing2","handleAddModel","modelName","semanticID","incrementTotalModels","decoyModelThing","tempModelThing","handleDeleteVertex","selectedUUID","selectedModelKey","handleRenameModel","mKey","determineOwnership","vertexOrArrow","determineSubFolders","folder","getModelNameFromKey","find","model","initialFolderAdded","ContainmentTree","canvasItems","subFolderItems","combinedItems","toTreeViewElement","core","root","selectedVertex","highestLevel","nextLevel","vertexOrEdge","actualObject","b","cont","treeDat","dragStart","removeEventListener","click","vertData","dataTransfer","setData","vertexRenderKey","vertexModelKey","original","handleElementSelect","draggable","padding","imageElement","orignalVertex","Origin","isAbstract","renderedx","renderedy","awayx","awayy","status","isContainer","floor","random","newSem","newOrigin","mergedContent","Icons","Text","ex","ey","pad","hasContent","iconAreaHeight","contentHeight","possibleWidth","iconListLen","increaseWidthIfNecessary","is","font","measuredNameText","measuredText","shadowOffsetX","shadowOffsetY","fillRect","strokeRect","yPos","xPos","loadImage","sh","sw","scale","drawImage","iconPadding","iconHeight","Image","crossOrigin","onload","dy","txPos","tyPos","cursorX","cursorY","getNearestSide","sides","xPercentage","yPercentage","goodSide","distanceThreshold","rightDist","topDist","leftDist","closestIndex","closestDistance","distArrays","shortest","selectMultiple","selectDown","savedObjects","Canvas","ocm","mouseDown","canvas","position","startX","startY","shiftKey","button","intersection","tool","ctrlKey","foundEnd","ob","mouseUp","cancelDraw","resizing","canvasElement","onmousemove","arrowToolSelected","getConnectionDataForArrow","snapped","firstArrowJoint","secondObject","findIntersected","newObject","arrowPath","savedArrows","createObject","mouseStartX","mouseStartY","addObject","previousObject","upBoxes","upArrows","downBoxes","downArrows","leftBoxes","leftArrows","rightBoxes","rightArrows","first","second","bigBox","smallBox","collectMehBox","collectsidebox","arrangeboxesandarrows","arrangeboxesandarrowshorizontal","shiftBoxes","coord","lastX","lastY","onMouseMove","x1","y1","orderCoordinates","vy1","findNearestGridY","vy2","createArtifact","newVert","setIsContainer","createContainer","setTimeout","CollideCount","past_location","past_size","blockBeenSelected","canvasRef","zoom","zoomLevel","dragEnter","dragOver","dragLeave","drop","alert","droppedSemanticID","getData","droppedVertex","mouseCoords","visibilityCheck","canvasVert","originText","setOrigin","onContextMenu","onMouseDown","onMouseUp","onMouseLeave","mouseLeave","mouseOriginX","mouseOriginY","canvasWidth","canvasHeight","dragging","yRows","currentRenderKey","getCurrentObjects","newModel","arrowType","nameElement","resetMouseOrigin","canvasRect","getBoundingClientRect","canvasContainer","getElementsByClassName","styleHeight","getComputedStyle","getPropertyValue","styleWidth","setAttribute","getEffectiveZoom","recalculateScale","clearCanvas","resetTransform","sourceUUIDs","ArrowUUIDSource","destUUIDs","ArrowUUIDDest","slotHeight","checkResizeBounds","bounds","getBounds","x2","y2","inYBounds","inXBounds","nearest","nearestDistance","sideData","getNearestSideFrom","coordinate","lastPathX","lastPathY","relAngle","l","angles","nearestAngle","nearestRad","xv","yv","getSelectedObject","resizeObjectOnMouseMove","resizeVars","coords","getGraphXYFromMouseEvent","expandSide","conData","StickArrowToObject","updateA","newObjects","getObjectFromUUID","foundObject","connectionData","onLeftMousePress","saveBlockStates","cDist","nearestPointIndex","nearestArrow","point","hypot","findNearestArrowPointIndex","func","moveArrowPointOnMouseMove","compareSizesToMoveAll","objectID","box","verticalArray","horizontalArray","boxArray","allArrows","boxes","bigbox","globalAlpha","onMiddleClick","shiftDown","friendObject","arrowsVert","arrowsHoriz","ObjectsToCheck","nextObjects","n","newfriendObject","nf","of","p","F","S","saveDisX","saveDisY","moveObject","friends","k","solidifyObject","setZoom","newZoom","xpos","ypos","oldLineWidth","lineWidth","oldStrokeStyle","oldFillStyle","arc","sqrt","pow","intersects","updateLinkedContainers","inputContainer","updateVertex","getLinkedVertex","verticies","newPath","clientX","clientY","sx","sy","rightClickedObject","elementID","rightClickedItem","rightClickedItemKey","menuType","ContextMenu","showMenu","handleClick","includes","newFolderKey","newRkey","handleModelRebase","parseInt","setLeftMenuToTree","baseUUID","mirrorUUID","baseSemantic","linkContainer","keys","handleKey","handleContextMenu","source","dest","sourceName","destName","pageX","pageY","style","renderedOutput","matchingContainers","matchingModels","matchingUUID","renderedContainers","renderedModels","MainProgramClass","updateFolderName","addFolder","a","deleteFolder","editFolderName","addModel","deleteModel","editModelName","cZoom","setModelName","showFile","refreshTree","File","FileReader","FileList","file","querySelector","files","reader","readAsText","result","importFile","folderKeyMap","modelKeyMap","folderKey","originalKey","originalParentKey","newParentKey","originalModeltKey","newModelKey","packagesCompare","models","importLoad","toggleSemanticDomainState","semanticTableEnabled","updateTree","newRows","resetRows","theObject","div","SelectedTool","backgroundColor","mode","nearestObject","ctrl","OP","setSelected","None","maxSavedStates","SemanticDomainEditor","size","Dropdown","Item","confirm","reload","DLelement","createElement","href","toDataURL","download","body","appendChild","JSONdata","dataTransformed","dataFile","prompt","URL","createObjectURL","removeChild","save","readonly","mainUndo","iconUndo","mainRedo","iconRedo","ReactDOM","render","StrictMode","getContext","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4d30976d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vertex.4937cefd.svg\";","module.exports = __webpack_public_path__ + \"static/media/edge.09e9d9dc.svg\";","module.exports = __webpack_public_path__ + \"static/media/select.8b3cad47.svg\";","module.exports = __webpack_public_path__ + \"static/media/artifact.91473c28.svg\";","module.exports = __webpack_public_path__ + \"static/media/container.ddecd459.svg\";","module.exports = __webpack_public_path__ + \"static/media/redo.a80ea341.svg\";","module.exports = __webpack_public_path__ + \"static/media/undo.5858a028.svg\";","module.exports = __webpack_public_path__ + \"static/media/specialisation.3320bc80.svg\";","module.exports = __webpack_public_path__ + \"static/media/visibility.5452d398.svg\";","module.exports = __webpack_public_path__ + \"static/media/create_folder.5ddfbbc9.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete_folder.ccd4d6e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/changeFolderName.d6c49e9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/NewModel.5f359781.svg\";","module.exports = __webpack_public_path__ + \"static/media/DeleteModel.8ff04828.svg\";","module.exports = __webpack_public_path__ + \"static/media/editModel.0c58ce6e.svg\";","module.exports = __webpack_public_path__ + \"static/media/createVertex.97bc72a7.svg\";","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\n\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n \r\n        <div className=\"App\">\r\n            <div id='program'>\r\n            </div>\r\n        </div>\r\n\r\n  );\r\n\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// Resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nexport function createUUID() {\r\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\r\n        // eslint-disable-next-line\r\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\r\n    );\r\n}\r\n\r\nexport class SemanticIdentity {\r\n    constructor(name, description, abbreviation, shortAbbreviation, UUID, translations){\r\n        this.typeName = \"SemanticIdentity\";\r\n        \r\n        if (UUID !== undefined){\r\n            this.UUID = UUID;\r\n        } else {\r\n            this.UUID = createUUID();\r\n        }\r\n\r\n        this.name = name;\r\n        this.description = description;\r\n        this.abbreviation = abbreviation;\r\n        this.shortAbbreviation = shortAbbreviation;\r\n\r\n        if (translations !== undefined){\r\n            this.translations = translations;\r\n        } else {\r\n            this.translations = [];\r\n        }\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { CollectionsBookmarkOutlined, ContactSupportOutlined } from \"@material-ui/icons\";\r\nimport { currentObjects, getModelName, createVertex } from \"../UIElements/CanvasDraw\";\r\nimport {SemanticIdentity} from \"./SemanticIdentity\";\r\n\r\n\r\n\r\nexport class VertexNode {\r\n    constructor(vertex) {\r\n        this.vertex = vertex;\r\n        this.children = new Set();\r\n        this.typeName = \"VertexNode\";\r\n\r\n        //The path of this particular vertex node for displaying on the tree view element\r\n        this.cleanObjectPath = (getModelName(),\"/\",\"Vertices\")\r\n        this.vertexObjectPath = (getModelName(),\"/\",\"Vertices\")\r\n    }\r\n\r\n    add(node) {\r\n        this.children.add(node);\r\n    }\r\n\r\n    remove(traversedVertices, node) {\r\n        //onsole.log(\"remove is called\")\r\n        let isRemoved = false;\r\n        traversedVertices.add(this);\r\n\r\n        //Remove from the current vertex\r\n        isRemoved = this.children.has(node);\r\n        this.children.delete(node);\r\n\r\n        //Continue to remove from anywhere deeper in the tree\r\n        for (let child of this.children) {\r\n            if (!traversedVertices.has(child)) {\r\n                traversedVertices.add(child);\r\n                isRemoved = child.remove(traversedVertices, node);\r\n            }\r\n        }\r\n\r\n        return isRemoved;\r\n    }\r\n\r\n    getVertexNode(traversedVertices, vertex, recursive = true) {\r\n        for (let child of this.children) {\r\n            if (!traversedVertices.has(child)) {\r\n                traversedVertices.add(child);\r\n\r\n                if (child.vertex.semanticIdentity.UUID === vertex.semanticIdentity.UUID) {\r\n                    return child;\r\n                } else if (recursive) {\r\n                    let node = child.getVertexNode(traversedVertices, vertex);\r\n                    if (node !== null) {\r\n                        return node;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    //Remove from just the children of this object, without removing from deeper in the tree\r\n    removeFromChildren(node) {\r\n        if (this.children.has(node)) {\r\n            this.children.delete(node);\r\n            return true;\r\n\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    flatten(traversedVertices) {\r\n        var flattenedArray = [];\r\n\r\n        for (let childNode of this.children) {\r\n            if (!traversedVertices.has(childNode)) {\r\n                traversedVertices.add(childNode);\r\n                flattenedArray.push(childNode.vertex);\r\n\r\n                if (childNode !== null) {\r\n                    flattenedArray.push(...childNode.flatten(traversedVertices));\r\n                }\r\n            }\r\n        }\r\n\r\n        return flattenedArray;\r\n    }\r\n\r\n    flattenVertexNodes(traversedVertices) {\r\n        var flattenedArray = [];\r\n\r\n        for (let childNode of this.children) {\r\n            if (!traversedVertices.has(childNode)) {\r\n                traversedVertices.add(childNode);\r\n                flattenedArray.push(childNode);\r\n\r\n                if (childNode !== null) {\r\n                    flattenedArray.push(...childNode.flattenVertexNodes(traversedVertices));\r\n                }\r\n            }\r\n        }\r\n\r\n        return flattenedArray;\r\n    }\r\n\r\n    has(traversedVertices, node) {\r\n        //Search for object in children\r\n        if (this.children.has(node)) {\r\n            return true;\r\n\r\n        } else {\r\n\r\n            //Search for object in children of children\r\n            for (let child of this.children) {\r\n                if (!traversedVertices.has(child)) {\r\n                    traversedVertices.add(child);\r\n                    if (child.has(traversedVertices, node)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    toTreeViewElement(returnOption, parsedRenderKey) { //added the model key parameter to we can specifiy what models vertexes belong to\r\n        //console.log(\"toTreeViewElement called successfully\")\r\n        //Pretty much everything that's currently on the canvas is searched and then converted into the tree appropriate struct in the below if else statements.\r\n        //Then, the vertices and arrows folder nodes can display their appropriate children.\r\n        let ArrowChildren = [];\r\n        let VertexChildren = [];\r\n    \r\n\r\n        //These are no longer needed due to rework of assigning model children - Lachlan\r\n        /*\r\n        let verticies = []; // need to store the 'verticies folder' in an array for it to be iterable in a for loop - cooper\r\n        let arrows = []; // same issue as vertices not being iterable - Lachlan\r\n        */\r\n        \r\n\r\n\r\n        //Check which folder we're sticking these things into\r\n        if (returnOption === \"Vertex Folder\"){                  // they had a different spelling for vertex folder :DDDDD - cooper\r\n            //All objects currently on the canvas (excluding things like folders which only exist as tree view elements)\r\n            for(let i = 0; i < currentObjects.flatten().length; i++){\r\n                \r\n\r\n                //We onlt want the vertices in this folder\r\n                if (currentObjects.flatten()[i].typeName === \"Vertex\" && currentObjects.flatten()[i].getRenderKey() === parsedRenderKey){\r\n                    //Set the append the name of the path to include the vertex name\r\n                    if(currentObjects.flatten()[i].title === \"\"){\r\n                        this.setVertexTreePath(\"Unnamed Vertex\");\r\n                    }\r\n\r\n                    else{\r\n                        this.setVertexTreePath(currentObjects.flatten()[i].title);\r\n                    }\r\n                \r\n                \r\n\r\n\r\n                    //Create the appropriate struct for a tree view element from the vertex data\r\n                    let tempTreeObj = {\r\n                        text: currentObjects.flatten()[i].title,\r\n                        children: [],\r\n                        data: currentObjects.flatten()[i],\r\n                        renderkey: currentObjects.flatten()[i].getRenderKey(),\r\n                        modelkey: currentObjects.flatten()[i].getModelKey(),\r\n                        state: {opened: false}\r\n                    };\r\n\r\n                    //So you don't have vertices that are completely blank in the tree, looks kinda weird\r\n                    if (tempTreeObj.text === \"\"){\r\n                        tempTreeObj.text = \"Unnamed Vertex\";\r\n                    }\r\n                    \r\n                    //Finally, push to children. Makes it look like the following:\r\n                    //\r\n                    //  Vertex --+\r\n                    //           |\r\n                    //           +-- Unnamed Vertex   \r\n                    \r\n                    VertexChildren.push(tempTreeObj);\r\n\r\n                \r\n            }\r\n        }\r\n\r\n            return{\r\n                text: \"Vertices &#128193\",\r\n                children: VertexChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Vertex Folder\"\r\n            }\r\n        }\r\n\r\n        //No longer necessary due to the rework of assigning model children - Lachlan\r\n            /*\r\n            let verticiesObject = { // push the vertex folder into an array of vertex folders - cooper\r\n                text: \"Vertices\",\r\n                children: VertexChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Vertex Folder\"\r\n            }\r\n            verticies.push(verticiesObject)\r\n            //vertices folder\r\n            return verticies\r\n                \r\n            \r\n        }\r\n        */\r\n\r\n        //same typo as above if statement but for arrows\r\n        else if (returnOption === \"Arrow Folder\"){ //same thing but arrows folder - Lachlan\r\n            for(let i = 0; i < currentObjects.flatten().length; i++){\r\n\r\n                if (currentObjects.flatten()[i].typeName !== \"Vertex\" && currentObjects.flatten()[i].getRenderKey() === parsedRenderKey){\r\n                    //console.log(\"arrow key\")\r\n                    //console.log(currentObjects.flatten()[i].getModelKey())\r\n\r\n                        // Find the source and destination vertex as Keith defined in spec\r\n                        let ourSourceEnd = currentObjects.flatten()[i].pathData[1][1]\r\n                        let ourDestEnd = currentObjects.flatten()[i].pathData[0][1]\r\n\r\n                        let textSource = \"N/A\"\r\n                        let textDest = \"N/A\"\r\n                        let finalString = \"N/A\"\r\n\r\n                        // Looking through all of the current objects and matching the uuids\r\n                        for (let j = 0; j <currentObjects.flatten().length; j++){\r\n                        \r\n                            let someObject = currentObjects.flatten()[j]\r\n                            \r\n                            if (someObject.typeName === \"Vertex\"){\r\n                            \r\n                                if (ourSourceEnd === someObject.semanticIdentity.UUID){\r\n                                    \r\n                                    textDest = someObject.title\r\n                                }\r\n\r\n                                else if (ourDestEnd === someObject.semanticIdentity.UUID){\r\n                                    \r\n                                    textSource = someObject.title\r\n                                }\r\n                            }\r\n                            \r\n                        }\r\n\r\n                        //this array stores whether source/destination is Navigable/Aggregation so we can display the required icons in the tree\r\n                        //array is ordered source nav, dest nav, source agg, dest agg \r\n                        //if adding more properties, such ass a dotted arrow, just increase array size and adjust the if statements for constructing icon\r\n                        let treeAppearanceSwitches = [false,false,false,false]\r\n                        treeAppearanceSwitches[0] = currentObjects.flatten()[i].getNavigable(0)\r\n                        treeAppearanceSwitches[1] = currentObjects.flatten()[i].getNavigable(1)\r\n                        treeAppearanceSwitches[2] = currentObjects.flatten()[i].getAggregation(0)\r\n                        treeAppearanceSwitches[3] = currentObjects.flatten()[i].getAggregation(1)\r\n                        \r\n                        //unicode icon of the arrow properties/relations we want to display\r\n                        let arrowIcon = \"\";\r\n\r\n                        if(treeAppearanceSwitches[2] === true){\r\n                            arrowIcon = \"&#9670\"\r\n                            }\r\n                        else if(treeAppearanceSwitches[0] === true){\r\n                            arrowIcon = \"&#10229\"\r\n                        }\r\n\r\n                        arrowIcon += \"&#8213\"\r\n\r\n                        if(treeAppearanceSwitches[3] === true){\r\n                            arrowIcon += \"&#9670\"\r\n                            }\r\n                        else if(treeAppearanceSwitches[1] === true){\r\n                            arrowIcon += \"&#10230\"\r\n                        }\r\n\r\n                        finalString = textSource + \" \" + arrowIcon + \" \" + textDest\r\n\r\n                        let tempTreeObj = {\r\n                            text: finalString,\r\n                            children: [],\r\n                            data: currentObjects.flatten()[i],\r\n                            renderkey: currentObjects.flatten()[i].getRenderKey(),\r\n                            modelkey: currentObjects.flatten()[i].getModelKey(),\r\n                            state: {opened: false}\r\n                        };\r\n\r\n                        ArrowChildren.push(tempTreeObj);\r\n                    \r\n                    \r\n                }\r\n\r\n            }\r\n\r\n            //console.log(ArrowChildren.length)\r\n\r\n            if(ArrowChildren.length === 0){\r\n                return;\r\n            }\r\n            else{\r\n            return {\r\n                text: \"Relations ⭲\",\r\n                children: ArrowChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Arrow Folder\"\r\n            }\r\n        }\r\n            \r\n        }\r\n    \r\n\r\n        //No longer necessary due to the rework of assigning model children - Lachlan\r\n            /*\r\n            let arrowsObject = { //create the arrows folder as an object to push to the arrows array - Lachlan\r\n                text: \"Arrows\",\r\n                children: ArrowChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Arrow Folder\"\r\n            }\r\n\r\n            arrows.push(arrowsObject)\r\n            //vertices folder\r\n            return arrows\r\n        }\r\n            */\r\n            \r\n        \r\n        //This down here is for vertex heirarchy stuff, not really needed anymore.\r\n        /*\r\n        if (!traversed) {\r\n            traversedVertices.add(this);\r\n            \r\n            for (let child of this.children) {\r\n                //children.push(child.toTreeViewElement(traversedVertices));\r\n            }\r\n            \r\n        }\r\n\r\n        let text = this.vertex.title;\r\n\r\n        if (text === null || text === \"\") {\r\n            text = \"Unnamed Vertex\";\r\n        }\r\n\r\n        return {\r\n            text: text,\r\n            children: children,\r\n            data: this.vertex,\r\n            state: { opened: true }\r\n        };\r\n        */\r\n    }\r\n    \r\n    setTreeViewElement(folderTitle){ //For when you want to make a folder type of element\r\n        let fakeChildren = [];\r\n        return{\r\n            text: folderTitle,\r\n            children: fakeChildren,\r\n            state: {opened: true}\r\n        };\r\n    }\r\n\r\n    //this function sets the path of a particular vertex node so that you can \r\n    //1. Display that item's path in the actual vertex (if you want)\r\n    //2. Show a tree view that only contains the path to a desired vertex \r\n    setVertexTreePath(treePath){\r\n        this.vertexObjectPath = this.cleanObjectPath + \"/\" + treePath;\r\n    }\r\n\r\n    //Return the vertice's object path\r\n    returnVertexTreePath(){\r\n        return this.vertexObjectPath;\r\n    }\r\n\r\n}\r\n\r\nclass ArrowEdge {\r\n    constructor(flattenedVertexNodes, arrow) {\r\n        this.arrow = arrow;\r\n        this.updateVertices(flattenedVertexNodes);\r\n    }\r\n\r\n    updateVertices(flattenedVertexNodes) {\r\n        this.sourceVertexNodeObject = null;\r\n        this.destVertexNodeObject = null;\r\n\r\n        if (this.arrow !== null) {\r\n            let isSourceFound = this.arrow.sourceVertexUUID === null;\r\n            let isDestFound = this.arrow.destVertexUUID === null;\r\n\r\n            for (let vertexNode of flattenedVertexNodes) {\r\n                if (isSourceFound && isDestFound) {\r\n                    break;\r\n                }\r\n\r\n                if (vertexNode !== null) {\r\n                    if (vertexNode.vertex.semanticIdentity.UUID === this.arrow.sourceVertexUUID) {\r\n                        this.sourceVertexNodeObject = vertexNode;\r\n                        isSourceFound = true;\r\n\r\n                    } else if (vertexNode.vertex.semanticIdentity.UUID === this.arrow.destVertexUUID) {\r\n                        this.destVertexNodeObject = vertexNode;\r\n                        isDestFound = true;\r\n                    }\r\n                }\r\n            }\r\n        \r\n        }\r\n    }\r\n\r\n    set sourceVertexNode(vertexNode) {\r\n        this.sourceVertexNodeObject = vertexNode;\r\n\r\n        if (vertexNode !== null) {\r\n            this.arrow.sourceVertexUUID = vertexNode.vertex.semanticIdentity.UUID;\r\n        } else {\r\n            this.arrow.sourceVertexUUID = null;\r\n        }\r\n    }\r\n\r\n    get sourceVertexNode() {\r\n        return this.sourceVertexNodeObject;\r\n    }\r\n\r\n    get sourceVertex() {\r\n        if (this.sourceVertexNodeObject !== null) {\r\n            return this.sourceVertexNodeObject.vertex;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    set destVertexNode(vertexNode) {\r\n        this.destVertexNodeObject = vertexNode;\r\n\r\n        if (vertexNode !== null) {\r\n            this.arrow.destVertexUUID = vertexNode.vertex.semanticIdentity.UUID;\r\n        } else {\r\n            this.arrow.destVertexUUID = null;\r\n        }\r\n    }\r\n\r\n    get destVertexNode() {\r\n        return this.destVertexNodeObject;\r\n    }\r\n\r\n    get destVertex() {\r\n        if (this.destVertexNodeObject !== null) {\r\n            return this.destVertexNodeObject.vertex;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n//Supply with an array/set of Vertex objects or Arrow objects (NOT ArrowEdge objects)\r\nexport class Graph {\r\n    constructor(vertexArrayFlattened, arrowArrayFlattened) {\r\n        this.rootVertices = new Set();\r\n        if (vertexArrayFlattened !== undefined) {\r\n            this.add(vertexArrayFlattened);\r\n        }\r\n\r\n        this.arrows = new Set();\r\n        if (arrowArrayFlattened !== undefined) {\r\n            this.add(arrowArrayFlattened);\r\n        }\r\n    }\r\n\r\n    add(objects) {\r\n        if (!Array.isArray(objects)) {\r\n            objects = [objects];\r\n        }\r\n\r\n        for (let object of objects) {\r\n            switch (object.typeName) {\r\n                case \"Vertex\":\r\n                    //console.log(\"add vert trigs\")\r\n                    this.addVertex(object);               \r\n                    break;\r\n                case \"Arrow\":\r\n                    this.addArrow(object);\r\n                    break;\r\n                case \"VertexNode\":\r\n                    this.rootVertices.add(object);\r\n                    break;\r\n                case \"ArrowEdge\":\r\n                    this.arrows.add(object);\r\n                    break;\r\n                default:\r\n                    //console.error(\"Attempted to add object to unknown type %s to Graph\", object.typeName)\r\n                    //console.log(object)\r\n                    //console.log(object.constructor)\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addVertex(vertex) {\r\n        if (this.getVertexNode(vertex) === null) { // if its the original vertex\r\n            vertex.originalUUID = vertex.semanticIdentity.UUID; \r\n            vertex = new VertexNode(vertex);\r\n            this.rootVertices.add(vertex);\r\n        } else { // else its a copy of the original\r\n            //console.log(\"a copy vertex was attempted\")\r\n            \r\n            let newTitle = \":: \" + vertex.title\r\n            vertex.title = newTitle\r\n            vertex.originalVertex = false;\r\n            /* For now im going to give the copies their own unique semantic UUID, as a lot of stuff in the program hinges off of vertex items\r\n            having their own unique sID. as a work around i've created a value in the vertex object to store the sID of the original vertex so that\r\n            any functions that require the original UUID of the original vertex can still be used. - cooper*/\r\n            vertex.originalUUID = vertex.semanticIdentity.UUID; \r\n            let sID = new SemanticIdentity(vertex.title,\"\",\"\",\"\", undefined ,[]) \r\n            vertex.semanticIdentity = sID;\r\n            vertex = new VertexNode(vertex);\r\n\r\n           \r\n            this.rootVertices.add(vertex);\r\n            console.log(vertex)\r\n        }\r\n    }\r\n\r\n    //NOTE: Graph direction is inverted, flowing from the dest to source of arrows\r\n    //This is intentional behaviour of the modelling spec\r\n    addArrow(arrow) {\r\n        if (this.getArrowEdge(arrow) === null) {\r\n            arrow = new ArrowEdge(this.flattenVertexNodes(), arrow);\r\n            this.arrows.add(arrow);\r\n\r\n            if (arrow.destVertexNode !== null && arrow.sourceVertexNode !== null) {\r\n                arrow.destVertexNode.add(arrow.sourceVertexNode);\r\n\r\n                //If the destination of the arrow is currently a root vertex,\r\n                //search for if the destination has any other possible roots,\r\n                //and remove from the root ONLY IF another root is found\r\n                //This retains an entry point for the graph even if there is a cycle back to root\r\n                if (this.rootVertices.has(arrow.sourceVertexNode)) {\r\n                    let isAnotherRoot = false;\r\n\r\n                    for (let vertexNode of this.rootVertices) {\r\n                        if (vertexNode.vertex.semanticIdentity.UUID === arrow.sourceVertex.semanticIdentity.UUID) {\r\n                            continue;\r\n                        }\r\n\r\n                        if (vertexNode.has(new Set(), arrow.sourceVertexNode)) {\r\n                            isAnotherRoot = true;\r\n                        }\r\n                    }\r\n\r\n                    if (isAnotherRoot) {\r\n                        this.rootVertices.delete(arrow.sourceVertexNode);\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n            console.error(\"Attempted to add duplicate arrow\");\r\n        }\r\n    }\r\n\r\n    //A way of returning the arrow UUID's associated with the deleted vertex. For some reason the source and ending\r\n    //UUID data isn't being saved properly upstream, so this is a way around that.\r\n    ArrowUUIDSource(object){\r\n        object = this.getVertexNode(object);\r\n        //first index is source, second is destination\r\n        let returnArray = [];\r\n\r\n        //Match an arrow\r\n        let i = 0;\r\n        for (let arrow of this.arrows) {\r\n            if (arrow.sourceVertexNode !== null && arrow.sourceVertex.semanticIdentity.UUID === object.vertex.semanticIdentity.UUID) {\r\n                returnArray[i] = arrow;\r\n                i += 1;\r\n            }\r\n        }\r\n\r\n        return returnArray;\r\n    }\r\n\r\n    ArrowUUIDDest(object){\r\n        object = this.getVertexNode(object);\r\n        //first index is source, second is destination\r\n        let returnArray = [];\r\n\r\n        //Match an arrow\r\n        let i = 0;\r\n        for (let arrow of this.arrows) {\r\n            if (arrow.destVertexNode !== null && arrow.destVertex.semanticIdentity.UUID === object.vertex.semanticIdentity.UUID) {\r\n                returnArray[i] = arrow;\r\n                i += 1;\r\n            }\r\n        }\r\n\r\n        return returnArray;\r\n    }\r\n\r\n    //Removes and object while shifting it's children's position in the tree\r\n    remove(object) {\r\n        console.log(\"remove 2 is called\")\r\n        //By this point rootVertices doesnt actually contain the vertex we want to delete which makes the isRemoved Logic hard to follow as has returns true when the item is present- Lachlan\r\n        console.log(this.rootVertices)\r\n        if (object.typeName === \"Vertex\") {\r\n            let newobject = this.getVertexNode(object);\r\n            let isRemoved = this.rootVertices.has(newobject);\r\n            console.log(isRemoved)\r\n\r\n\r\n            //Remove from the root\r\n            this.rootVertices.delete(newobject);\r\n            for (let child of newobject.children) {\r\n                this.rootVertices.add(child);\r\n            }\r\n            //console.log(\"It removes from the root fine\")\r\n\r\n            \r\n            //Remove from anywhere deeper in the tree\r\n            let traversedVertices = new Set();\r\n            for (let vertexNode of this.rootVertices) {\r\n                if (!traversedVertices.has(vertexNode)) {\r\n                    traversedVertices.add(vertexNode);\r\n                    vertexNode.remove(traversedVertices, newobject);\r\n                    console.log(isRemoved)\r\n                }\r\n            }\r\n            \r\n            if (isRemoved) {\r\n                //Remove the vertex from being the source or dest of any arrow\r\n                for (let arrow of this.arrows) {\r\n                    if (arrow.sourceVertexNode !== null && arrow.sourceVertex.semanticIdentity.UUID === newobject.vertex.semanticIdentity.UUID) {\r\n                        arrow.sourceVertexNode = null;\r\n                    }\r\n                    \r\n                    if (arrow.destVertexNode !== null && arrow.destVertex.semanticIdentity.UUID === newobject.vertex.semanticIdentity.UUID) {\r\n                        arrow.destVertexNode = null;\r\n                    }\r\n                }\r\n            }\r\n            \r\n\r\n            return isRemoved;\r\n\r\n        } else if (object.typeName === \"Arrow\") {\r\n            let newobject = this.getArrowEdge(object);\r\n\r\n            if (newobject !== null) {\r\n                this.arrows.delete(newobject);\r\n                //IF arrow has a sourceVertex AND destVertex\r\n                if (newobject.sourceVertexNode !== null && newobject.destVertexNode !== null) {\r\n                    //IF there is no other arrow from sourceVertex to destVertex, remove the sourceVertex from the children of destVertex\r\n                    //AND move the sourceVertex to root, if there is no other arrow with the same sourceVertex\r\n                    let isEquivalentArrow = false;\r\n                    let isArrowWithSameSource = false;\r\n                    \r\n                    for (let arrow of this.arrows) {\r\n                        let isEquivalentSource = arrow.sourceVertexNode !== null && arrow.sourceVertex.semanticIdentity.UUID === newobject.sourceVertex.semanticIdentity.UUID;\r\n                        let isEquivalentDest = arrow.destVertexNode !== null && arrow.destVertex.semanticIdentity.UUID === newobject.destVertex.semanticIdentity.UUID;\r\n                        \r\n                        if (isEquivalentSource && isEquivalentDest) {\r\n                            isEquivalentArrow = true;\r\n                        }\r\n                        if (isEquivalentSource && arrow.destVertexNode !== null) {\r\n                            isArrowWithSameSource = true;\r\n                        }\r\n                    }\r\n                    \r\n                    if (!isEquivalentArrow) {\r\n                        newobject.destVertexNode.removeFromChildren(newobject.sourceVertexNode);\r\n                    }\r\n                    if (!isArrowWithSameSource) {\r\n                        this.add(newobject.sourceVertexNode);\r\n                    }\r\n\r\n                    //Remove vertex from the root if removing this arrow has resolved a cycle\r\n                    if (newobject.sourceVertexNode.has(new Set(), newobject.destVertexNode)) {\r\n                        this.rootVertices.delete(newobject.destVertexNode);\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n        } else {\r\n            if (object !== null) {\r\n                console.error(\"Attempted to remove object of invalid type %s to Graph\", object.typeName);\r\n            } else {\r\n                console.error(\"Attempted to remove null from Graph\");\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    has(object) {\r\n        //Search for object in root vertices\r\n        if (this.rootVertices.has(object)) {\r\n            return true;\r\n\r\n        } else {\r\n            let traversedVertices = new Set();\r\n\r\n            //Search for object in children of root vertices\r\n            for (let vertex of this.rootVertices) {\r\n                if (!traversedVertices.has(vertex)) {\r\n                    traversedVertices.add(vertex);\r\n                    if (vertex.has(traversedVertices, object)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getVertexNode(vertex) {\r\n        let traversedVertices = new Set();\r\n\r\n        for (let rootNode of this.rootVertices) {\r\n            if (!traversedVertices.has(rootNode)) {\r\n                traversedVertices.add(rootNode);\r\n                if (rootNode.vertex.semanticIdentity.UUID === vertex.semanticIdentity.UUID) {\r\n                    return rootNode;\r\n                } else {\r\n                    let node = rootNode.getVertexNode(traversedVertices, vertex);\r\n                    if (node !== null) {\r\n                        return node;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getArrowEdge(arrow) {\r\n        for (let arrowEdge of this.arrows) {\r\n            if (arrowEdge.arrow.semanticIdentity.UUID === arrow.semanticIdentity.UUID) {\r\n                return arrowEdge;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    flatten(doFlattenVertices = true, doFlattenArrows = true) {\r\n        let verticesSet = new Set();\r\n        let arrowsSet = new Set();\r\n\r\n        let traversedVertices = new Set();\r\n\r\n        if (doFlattenVertices) {\r\n            for (let vertexNode of this.rootVertices) {\r\n                if (!traversedVertices.has(vertexNode)) {\r\n                    traversedVertices.add(vertexNode);\r\n                    verticesSet.add(vertexNode.vertex);\r\n    \r\n                    if (vertexNode !== null) {\r\n                        for (let child of vertexNode.flatten(traversedVertices)) {\r\n                            verticesSet.add(child);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (doFlattenArrows) {\r\n            for (let arrowEdge of this.arrows) {\r\n                arrowsSet.add(arrowEdge.arrow);\r\n            }\r\n        }\r\n\r\n        let flattenedArray = Array.from(verticesSet);\r\n        return flattenedArray.concat(Array.from(arrowsSet));\r\n    }\r\n\r\n    flattenVertexNodes() {\r\n        var verticesSet = new Set();\r\n        let traversedVertices = new Set();\r\n\r\n        for (let vertexNode of this.rootVertices) {\r\n            if (!traversedVertices.has(vertexNode)) {\r\n                traversedVertices.add(vertexNode);\r\n                verticesSet.add(vertexNode);\r\n\r\n                if (vertexNode !== null) {\r\n                    for (let child of vertexNode.flattenVertexNodes(traversedVertices)) {\r\n                        verticesSet.add(child);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return Array.from(verticesSet);\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\n //EDGE ENDS\r\nexport const EdgeEnd = {\r\n    NONE: \"None\",\r\n    ARROW: \"Arrow\",\r\n    TRIANGLE: \"Triangle\",\r\n    FILLED_TRIANGLE: \"Filled Triangle\",\r\n    DIAMOND: \"Diamond\",\r\n    FILLED_DIAMOND: \"Filled Diamond\"\r\n};\r\n\r\nexport const EdgeEndToString = {};\r\nEdgeEndToString[EdgeEnd.NONE] = \"None\";\r\nEdgeEndToString[EdgeEnd.ARROW] = \"Arrow\";\r\nEdgeEndToString[EdgeEnd.TRIANGLE] = \"Triangle\";\r\nEdgeEndToString[EdgeEnd.FILLED_TRIANGLE] = \"FilledTriangle\";\r\nEdgeEndToString[EdgeEnd.DIAMOND] = \"Diamond\";\r\nEdgeEndToString[EdgeEnd.FILLED_DIAMOND] = \"FilledDiamond\";\r\n\r\nexport const StringToEdgeEnd = {};\r\nStringToEdgeEnd[\"None\"] = EdgeEnd.NONE;\r\nStringToEdgeEnd[\"Arrow\"] = EdgeEnd.ARROW;\r\nStringToEdgeEnd[\"Triangle\"] = EdgeEnd.TRIANGLE;\r\nStringToEdgeEnd[\"FilledTriangle\"] = EdgeEnd.FILLED_TRIANGLE;\r\nStringToEdgeEnd[\"Diamond\"] = EdgeEnd.DIAMOND;\r\nStringToEdgeEnd[\"FilledDiamond\"] = EdgeEnd.FILLED_DIAMOND;\r\n\r\n//LINE COLOURS\r\nexport const LineColour = {\r\n    BLACK: \"#000000\",\r\n    RED: \"#FF0000\",\r\n    BLUE: \"#0000FF\",\r\n    GREEN: \"#00FF00\"\r\n};\r\n\r\nexport const LineColourToStringName = {};\r\nLineColourToStringName[LineColour.BLACK] = \"Black\";\r\nLineColourToStringName[LineColour.RED] = \"Red\";\r\nLineColourToStringName[LineColour.BLUE] = \"Blue\";\r\nLineColourToStringName[LineColour.GREEN] = \"Green\";\r\n\r\nexport const StringNameToLineColour = {};\r\nStringNameToLineColour[\"Black\"] = LineColour.BLACK;\r\nStringNameToLineColour[\"Red\"] = LineColour.RED;\r\nStringNameToLineColour[\"Blue\"] = LineColour.BLUE;\r\nStringNameToLineColour[\"Green\"] = LineColour.GREEN;\r\n\r\n//LINE TYPES\r\nexport const LineType = {\r\n    SOLID: 1,\r\n    DASHED: 2\r\n};\r\n\r\nexport const LineTypeToString = {};\r\nLineTypeToString[LineType.SOLID] = \"Solid\";\r\nLineTypeToString[LineType.DASHED] = \"Dashed\";\r\n\r\nexport const StringToLineType = {};\r\nStringToLineType[\"Solid\"] = LineType.SOLID;\r\nStringToLineType[\"Dashed\"] = LineType.DASHED;","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\nimport * as canvasDraw from \"./CanvasDraw\";\r\nimport {LineColourToStringName, LineTypeToString} from \"../DataStructures/ArrowProperties\"\r\nimport { ContainmentTree, handleAddVertex, handleDeleteVertex } from \"./ContainmentTree\";\r\nimport {serverURL} from \".//MainView\"\r\n\r\nimport { SketchPicker } from 'react-color';\r\n\r\n// Icons\r\nimport iconVertex from \"../Resources/vertex.svg\";\r\nimport iconEdge from \"../Resources/edge.svg\";\r\nimport iconSpecialisation from \"../Resources/specialisation.svg\";\r\nimport iconVisibility from \"../Resources/visibility.svg\"\r\nimport iconSelect from \"../Resources/select.svg\"\r\nimport iconArtifact from \"../Resources/artifact.svg\"\r\nimport iconContainer from \"../Resources/container.svg\"\r\n\r\n\r\nimport {deleteElement, currentObjects} from \"./CanvasDraw\";\r\nimport { vertexDeleteElement } from './CanvasDraw';\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport {vertexData} from \"./ContainmentTree.js\"\r\n\r\n// Show the vertex path\r\nimport {showVertexPath} from \"./ContainmentTree.js\";\r\n\r\n// The variable that contains the found path of a given vertex\r\nimport { someVertexPath } from './ContainmentTree';\r\nimport e from 'cors';\r\n\r\n//Property Enums\r\nexport const LeftMenuType = {\r\n    TreeView: \"TreeView\",\r\n    Vertex: \"Vertex\",\r\n    Arrow: \"Arrow\",\r\n\r\n    //FTreeView: \"FocussedTreeView\"\r\n\r\n    Artifact: \"Artifact\",\r\n    Container:\"Container\"\r\n\r\n};\r\n\r\nexport const LeftMenuTypeToString = {};\r\nLeftMenuTypeToString[LeftMenuType.TreeView] = \"TreeView\";\r\nLeftMenuTypeToString[LeftMenuType.Vertex] = \"Vertex\";\r\nLeftMenuTypeToString[LeftMenuType.Arrow] = \"Arrow\";\r\nLeftMenuTypeToString[LeftMenuType.Arrow] = \"Artifact\";\r\nLeftMenuTypeToString[LeftMenuType.Arrow] = \"Container\";\r\n\r\nexport const StringToLeftMenuType = {};\r\nLeftMenuTypeToString[\"TreeView\"] = LeftMenuType.TreeView;\r\nLeftMenuTypeToString[\"Vertex\"] = LeftMenuType.Vertex;\r\nLeftMenuTypeToString[\"Arrow\"] = LeftMenuType.Arrow;\r\nLeftMenuTypeToString[\"Artifact\"] = LeftMenuType.Artifact;\r\nLeftMenuTypeToString[\"Container\"] = LeftMenuType.Container;\r\n\r\nexport const Tool = {\r\n    Select: \"Select\",\r\n    Vertex: \"Vertex\",\r\n    Visibility: \"Visibility\",\r\n    Edge: \"Edge\",\r\n    Specialisation: \"Specialisation\",\r\n    Artifact: \"Artifact\",\r\n    Container: \"Container\",\r\n};\r\n\r\n// class to display the left hand menu, where we will be showing\r\n// object editing tools for now\r\nexport class LeftMenu extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            menu: LeftMenuType.TreeView,\r\n            selectedObject: null,\r\n            fileNames: [],\r\n            title: \"\",\r\n            content: [],\r\n\r\n        };\r\n        this.setTitle = this.setTitle.bind(this);\r\n        this.setContent = this.setContent.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        this.formRef = null;\r\n\r\n        this.setFormRef = element =>{\r\n            this.formRef = element;\r\n        };\r\n\r\n        this.setIcons();\r\n\r\n    }\r\n    handleChange(event){\r\n        this.setState({title: event.target.value})\r\n        this.setState({title:\"\"})\r\n        this.setTitle();\r\n        this.setContent();\r\n    }\r\n    /*\r\n    leftMenuContents = <form id = \"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.title} onKeyUp={() => this.setTitle()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n    \r\n                */\r\n               \r\n    /// This is a test function, remove it if I forget to\r\n    testUpdateLabel = () =>{\r\n        this.setPath(\"fffffffff\")\r\n        //document.getElementById(\"VertPath\").value = \"It doth been updated\";\r\n        \r\n        //console.log(\"RIGHT HERE \" + document.getElementById(\"VertPath\").value)\r\n    }\r\n\r\n\r\n\r\n    /// \r\n\r\n    componentDidMount() {\r\n        this.menu = this.props.mainState.menu;\r\n        this.selectedItem = this.props.mainState.drawMode;\r\n        this.props.setMode(this.selectedItem)\r\n\r\n        document.addEventListener(\"keydown\", this.onKeyPressed.bind(this));\r\n        \r\n    }\r\n\r\n\r\n    //For quickKeys\r\n\r\n\r\n    onKeyPressed(e) {\r\n        if (e.keyCode === 46){\r\n            console.log(this.state.selectedObject);\r\n            if(this.state.selectedObject.typeName === \"Vertex\"){\r\n                vertexDeleteElement(this.state.selectedObject);\r\n            }\r\n            else{\r\n                deleteElement(this.state.selectedObject);\r\n            }\r\n            this.setState({menu:\"TreeView\"});\r\n            canvasDraw.drawAll();\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n    componentWillReceiveProps(nextProps,nextContext) {\r\n        this.setState({menu:nextProps.mainState.menu,selectedObject:nextProps.mainState.selectedObject});\r\n        \r\n        //document.removeEventListener(\"keydown\", this.onKeyPressed.bind(this));\r\n\r\n    }\r\n    \r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        let leftMenu = document.getElementById(\"VertexMenu\");\r\n        if(leftMenu === null){\r\n            leftMenu = document.getElementById(\"ArrowMenu\");\r\n        }\r\n        if(leftMenu !== null){\r\n            leftMenu.addEventListener(\"keypress\", (e) => {\r\n                if(e.key === \"Enter\") {\r\n                    e.preventDefault();\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    setIcons() {\r\n        fetch(serverURL + '/icons/list',{\r\n            method:'GET',\r\n            headers: {\r\n                'Accept': '*/*',\r\n            },\r\n        })\r\n            .then((res) => {return res.json()})\r\n            .then((data) => {\r\n                let fileNames = [];\r\n                data.icons.forEach((icon) => {\r\n                    fileNames.push(icon)\r\n                });\r\n                this.setState({fileNames:fileNames})\r\n            })\r\n    }\r\n\r\n    //VERTEX SETTERS\r\n\r\n    \r\n    setTitle() {\r\n        let newTitle = document.getElementById(\"LeftTitle\").value;\r\n        this.state.selectedObject.setTitle(newTitle);\r\n        canvasDraw.updateVertex(this.state.selectedObject);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n\r\n    setContent() {\r\n        let newContent = document.getElementById(\"LeftContent\").value;\r\n        newContent = newContent.split(\"\\n\");\r\n        this.state.selectedObject.setContent(newContent);\r\n        canvasDraw.updateVertex(this.state.selectedObject);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    //ARROW SETTERS\r\n    setLineType() {\r\n        let newLineType = document.getElementById(\"LineType\").value;\r\n        this.state.selectedObject.setLineType(newLineType);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    setColour() {\r\n        let newColour = document.getElementById(\"LineColour\").value;\r\n        this.state.selectedObject.setLineColour(newColour);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    setStartLabel() {\r\n        let newLabel = document.getElementById(\"SourceLabel\").value;\r\n        this.state.selectedObject.setStartLabel(newLabel);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    setEndLabel() {\r\n        let newLabel = document.getElementById(\"DestLabel\").value;\r\n        this.state.selectedObject.setEndLabel(newLabel);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    updateCardinality() {\r\n        let sourceLowerBound = document.getElementById(\"sourceFromCardindality\").value;\r\n        let sourceUpperBound = document.getElementById(\"sourceToCardindality\").value;\r\n        let currentSourceVisibility = this.state.selectedObject.getSourceCardinalityVisibility();\r\n        let destLowerBound = document.getElementById(\"destFromCardindality\").value;\r\n        let destUpperBound = document.getElementById(\"destToCardindality\").value;\r\n        let currentDestVisibility = this.state.selectedObject.getDestCardinalityVisibility();\r\n\r\n        this.state.selectedObject.updateSourceCardinality(sourceLowerBound, sourceUpperBound, currentSourceVisibility);\r\n        this.state.selectedObject.updateDestCardinality(destLowerBound, destUpperBound, currentDestVisibility);\r\n\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    toggleSourceCardinalityVisibility() {\r\n        this.state.selectedObject.toggleSourceCardinalityVisibility();\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    toggleDestCardinalityVisibility() {\r\n        this.state.selectedObject.toggleDestCardinalityVisibility();\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    toggleAbstract(){\r\n        this.state.selectedObject.toggleAbstract()\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    getS23MIconsSelector() {\r\n        let dropdownOptions = [<div className=\"DropdownItem\"><div className=\"dropdownLabel\">Name</div><div className=\"checkBoxContainer\">Text</div><div className=\"checkBoxContainer\">Icon</div></div>];\r\n\r\n        let name = \"\";\r\n        this.state.fileNames.forEach(fileName => {\r\n            if (fileName.slice(-6, -4) === \"_n\") {\r\n                name = fileName.slice(0, -6);\r\n                dropdownOptions.push(<div className=\"DropdownItem\" ref={fileName}> <div className=\"dropdownLabel\">{name}</div> <div className=\"checkBoxContainer\"><input type='checkbox' disabled=\"disabled\" /> </div>  <div className=\"checkBoxContainer\"><input type='checkbox' defaultChecked={this.shouldIconBeSelected(fileName)} onClick={() => {this.setIcon(fileName)}}/></div> </div>)\r\n            } else {\r\n                name = fileName.slice(0, -4);\r\n                dropdownOptions.push(<div className=\"DropdownItem\" ref={fileName}> <div className=\"dropdownLabel\">{name}</div> <div className=\"checkBoxContainer\"><input type='checkbox' defaultChecked={this.shouldTextBeSelected(fileName)} onClick={() => {this.setText(fileName)}} /> </div>  <div className=\"checkBoxContainer\"><input type='checkbox' defaultChecked={this.shouldIconBeSelected(fileName)} onClick={() => {this.setIcon(fileName)}}/></div> </div>)\r\n            }\r\n        });\r\n\r\n        return <DropdownButton title=\"Category Selector\" name=\"Icons\" id=\"IconSelector\" className=\"IconSelector\">\r\n            {dropdownOptions}\r\n        </DropdownButton>;\r\n    }\r\n\r\n    getVertexColour = () => {\r\n        return this.state.selectedObject.getColour()\r\n    };\r\n\r\n    setVertexColour = (colour) =>{\r\n        this.state.selectedObject.setColour(colour.hex);\r\n        canvasDraw.updateVertex(this.state.selectedObject);\r\n        canvasDraw.drawAll()\r\n    };\r\n\r\n    getColourPicker() {\r\n        return <DropdownButton title = \"Colour Selector\" id = \"ColourSelector\">\r\n        <SketchPicker\r\n            color={this.getVertexColour}\r\n            onChangeComplete={this.setVertexColour}\r\n            presetColors = {[\"#FFD5A9\",\"#F5B942\",\"#FFFFFF\"]}\r\n        /></DropdownButton>\r\n    }\r\n\r\n    shouldTextBeSelected(fileName) {\r\n        return this.state.selectedObject.isTextSet(fileName)\r\n    }\r\n\r\n    shouldIconBeSelected(fileName) {\r\n        return this.state.selectedObject.isIconSet(fileName)\r\n    }\r\n\r\n    setText(fileName) {\r\n        this.state.selectedObject.setText(fileName);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    setIcon(fileName) {\r\n        this.state.selectedObject.setIcon(fileName);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    setNavigable(side){\r\n\r\n        this.state.selectedObject.toggleNavigable(side);\r\n\r\n        document.getElementById(\"SourceIsNavigable\").checked = this.state.selectedObject.getNavigable(0);\r\n        document.getElementById(\"DestIsNavigable\").checked = this.state.selectedObject.getNavigable(1);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    setAggregation(side){\r\n        if(!this.state.selectedObject.getNavigable(side)){\r\n            this.state.selectedObject.toggleNavigable(side);\r\n        }\r\n        this.state.selectedObject.toggleAggregation(side);\r\n        let SourceAggregation = this.state.selectedObject.getAggregation(0);\r\n        let DestAggregation = this.state.selectedObject.getAggregation(1);\r\n        if(SourceAggregation) {\r\n            document.getElementById(\"SourceIsNavigable\").checked = true;\r\n        }\r\n        if(DestAggregation){\r\n            document.getElementById(\"DestIsNavigable\").checked = true;\r\n        }\r\n        document.getElementById(\"SourceIsAggregation\").checked = SourceAggregation;\r\n        document.getElementById(\"DestIsAggregation\").checked = DestAggregation;\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    deselectElement(){\r\n        this.props.setLeftMenu(null);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    showTreeView(){\r\n        //this.state.menu = LeftMenuType.TreeView;\r\n        //console.log(\"HENLO: \" + this.state);\r\n        //leftMenuContents = <ContainmentTree setLeftMenu = {this.props.setLeftMenu} />;\r\n        this.state.selectedObject(null)\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    stripElement(e){\r\n        e.preventDefault()\r\n        this.state.selectedObject.trimPath();\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n   \r\n    deleteTitle = () => {\r\n        this.setState({title: \"\"})\r\n    };\r\n   \r\n\r\n// return the correct menu based on the selected item\r\n    getMenu = () =>{\r\n\r\n        \r\n\r\n        let leftMenuContents;\r\n\r\n        let toolbar = <div id = \"Toolbar\" className = \"Toolbar\">\r\n            <div id = \"Select\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Select)}><img src={iconSelect} alt =\"Select\"/></div>\r\n\r\n            <div id = \"Vertex\" className=\"ToolbarItem\" onClick={() => {this.props.setMode(Tool.Vertex); }} onKeyDown={() => this.onKeyPressed()}    ><img src={iconVertex} alt =\"Vertex\"/></div>\r\n\r\n            <div id=\"Artifact\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Artifact)} onKeyDown={() => this.onKeyPressed()}    ><img src={iconArtifact} alt=\"Artifact\" /></div>\r\n            <div id=\"Container\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Container)} onKeyDown={() => this.onKeyPressed()}    ><img src={iconContainer} alt=\"Container\" /></div>\r\n\r\n            <div id = \"Edge\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Edge)}><img src={iconEdge} alt =\"Edge\"/></div>\r\n\r\n        </div>;\r\n\r\n        if (this.state.menu === LeftMenuType.TreeView) {\r\n            leftMenuContents = <ContainmentTree setLeftMenu = {this.props.setLeftMenu} />\r\n            //console.log(\"A new tree has been created\");\r\n\r\n        } else if (this.state.menu === LeftMenuType.Vertex) {\r\n            canvasDraw.drawAll();\r\n            \r\n            leftMenuContents = <form id = \"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" value={this.state.selectedObject.title} onInput={this.handleChange}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Content</label>\r\n                <textarea id=\"LeftContent\" className =\"LeftContent\" value={this.state.selectedObject.getContentAsString()} onInput={this.handleChange}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getS23MIconsSelector()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getColourPicker()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Is Abstract?</label>\r\n                <input type=\"checkbox\" id=\"IsAbstract\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAbstract()} onClick={() => this.toggleAbstract()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => {/*deleteElement(this.state.selectedObject)*/vertexDeleteElement(this.state.selectedObject);this.setState({menu:\"TreeView\"})}} placeholder=\"NoTabIndex\">Remove</button>\r\n\r\n\r\n\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                \r\n    \r\n                <input id=\"VertPath\" className=\"vertexPath\" defaultValue={this.state.selectedObject.vertexPath}/>\r\n                \r\n\r\n\r\n            </form>;\r\n            \r\n        } else if (this.state.menu === LeftMenuType.Artifact) {\r\n            canvasDraw.drawAll();\r\n\r\n            leftMenuContents = <form id=\"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.title} onKeyUp={() => this.setTitle()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Content</label>\r\n                <textarea id=\"LeftContent\" className=\"LeftContent\" defaultValue={this.state.selectedObject.getContentAsString()} onKeyUp={() => this.setContent()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getS23MIconsSelector()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getColourPicker()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Is Abstract?</label>\r\n                <input type=\"checkbox\" id=\"IsAbstract\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAbstract()} onClick={() => this.toggleAbstract()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => { deleteElement(this.state.selectedObject); this.setState({ menu: \"TreeView\" }) }} placeholder=\"NoTabIndex\">Remove</button>\r\n            </form>;\r\n\r\n        } else if (this.state.menu === LeftMenuType.Container) {\r\n            canvasDraw.drawAll();\r\n            leftMenuContents = <form id=\"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.title} onKeyUp={() => this.setTitle()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Content</label>\r\n                <textarea id=\"LeftContent\" className=\"LeftContent\" defaultValue={this.state.selectedObject.getContentAsString()} onKeyUp={() => this.setContent()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getS23MIconsSelector()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Is Abstract?</label>\r\n                <input type=\"checkbox\" id=\"IsAbstract\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAbstract()} onClick={() => this.toggleAbstract()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => { deleteElement(this.state.selectedObject); this.setState({ menu: \"TreeView\" }) }} placeholder=\"NoTabIndex\">Remove</button>\r\n            </form>;\r\n\r\n        }else if (this.state.menu === LeftMenuType.Arrow) {\r\n            console.log(\"Arrow Selected\");\r\n            console.log(this.state.selectedObject)\r\n\r\n            if(this.state.selectedObject.edgeType === Tool.Edge){\r\n\r\n            leftMenuContents = <form id = \"ArrowMenu\">\r\n                <div className=\"LeftHeader\">Edge Properties</div>\r\n\r\n                <label className=\"LeftLabel\">Source Is Navigable?</label>\r\n                <input type=\"checkbox\" id=\"SourceIsNavigable\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getNavigable(0)} onClick={() => this.setNavigable(0)}/>\r\n\r\n                <label className=\"LeftLabel\">Destination Is Navigable?</label>\r\n                <input type=\"checkbox\" id=\"DestIsNavigable\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getNavigable(1)} onClick={() => this.setNavigable(1)}/>\r\n\r\n                <label className=\"LeftLabel\">Source Is Aggregation?</label>\r\n                <input type=\"checkbox\" id=\"SourceIsAggregation\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAggregation(0)} onClick={() => this.setAggregation(0)}/>\r\n\r\n                <label className=\"LeftLabel\">Destination Is Aggregation?</label>\r\n                <input type=\"checkbox\" id=\"DestIsAggregation\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAggregation(1)} onClick={() => this.setAggregation(1)}/>\r\n\r\n                <label className=\"LeftLabel\">Line Colour</label>\r\n                <select name=\"LineColour\" id=\"LineColour\" className=\"LeftSelector\" defaultValue={LineColourToStringName[this.state.selectedObject.lineColour]} onChange={() => this.setColour()}>\r\n                    <option value = \"Black\">Black</option>\r\n                    <option value = \"Red\">Red</option>\r\n                    <option value = \"Blue\">Blue</option>\r\n                    <option value = \"Green\">Green</option>\r\n                </select>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {/* -1 represents n or *  */}\r\n                <label className=\"LeftLabel\">Source Cardinality</label>\r\n                <div className=\"CardinalityArea\"> <div className=\"LeftCheckboxLabel\"> Visible: </div> <input type=\"checkbox\" id = \"sourceCardinalityShown\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getSourceCardinalityVisibility()} onChange={() => {this.toggleSourceCardinalityVisibility();canvasDraw.drawAll()}}/>\r\n                    <input type=\"number\" id = \"sourceFromCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getSourceCardinalityLowerBound()} min=\"0\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                    <label>..</label>\r\n                    <input type=\"number\" id = \"sourceToCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getSourceCardinalityUpperBound()} min=\"-1\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                </div>\r\n\r\n\r\n                <label className=\"LeftLabel\">Destination Cardinality</label>\r\n                <div className=\"CardinalityArea\"> <div className=\"LeftCheckboxLabel\">Visible:</div> <input type=\"checkbox\" id = \"destCardinalityShown\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getDestCardinalityVisibility()} onChange={() => {this.toggleDestCardinalityVisibility();canvasDraw.drawAll()}}/>\r\n                    <input type=\"number\" id = \"destFromCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getDestCardinalityLowerBound()} min=\"0\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                    <label>..</label>\r\n                    <input type=\"number\" id = \"destToCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getDestCardinalityUpperBound()} min=\"-1\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                </div>\r\n\r\n                <label className=\"LeftLabel\">Source Label</label>\r\n                    <input id=\"SourceLabel\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.sourceEdgeEnd.label} onKeyUp={() => this.setStartLabel()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Destination Label</label>\r\n                    <input id=\"DestLabel\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.destEdgeEnd.label} onKeyUp={() => this.setEndLabel()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => { deleteElement(this.state.selectedObject); this.setState({ menu: LeftMenuType.TreeView, selectedObject: null }) }}>Remove</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={(e) => this.stripElement(e)}>Make Straight</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => {deleteElement(this.state.selectedObject);this.setState({menu:LeftMenuType.TreeView,selectedObject:null})}}>Remove</button>\r\n\r\n            </form>\r\n            }else{\r\n                leftMenuContents = <form id = \"ArrowMenu\">\r\n                    <div className=\"LeftHeader\">Selected Edge</div>\r\n                    <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                    <label className=\"LeftSpacer\">&nbsp;</label>\r\n                    <button className=\"LeftMenuButton\" onClick={() => {deleteElement(this.state.selectedObject);this.setState({menu:LeftMenuType.TreeView,selectedObject:null})}}>Remove</button>\r\n\r\n                    \r\n\r\n                    </form>\r\n            }\r\n        }\r\n\r\n        return <div>{toolbar}<form ref={this.setFormRef} className={this.props.className}>\r\n            {leftMenuContents}\r\n            </form></div>;\r\n        \r\n    };\r\n\r\n    render() {\r\n        let menu = this.getMenu();\r\n        if (this.formRef !== null) {\r\n            this.formRef.reset();\r\n        }\r\n        return menu;\r\n    }\r\n\r\n\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\n// React imports\r\nimport React, { useRef, useCallback, useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GridMUI from '@material-ui/core/Grid';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { EditingState } from '@devexpress/dx-react-grid';\r\n\r\nimport saveAs from 'file-saver';\r\n\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { GridExporter } from '@devexpress/dx-react-grid-export';\r\n\r\nimport {\r\n    Grid,\r\n    Table,\r\n    TableHeaderRow,\r\n    TableInlineCellEditing,\r\n    Toolbar,\r\n    ExportPanel,\r\n} from '@devexpress/dx-react-grid-material-ui';\r\n\r\nimport {\r\n    Plugin,\r\n    Template,\r\n    TemplatePlaceholder,\r\n} from '@devexpress/dx-react-core';\r\n\r\n// In program imports\r\nimport {currentObjects, getSelectedObject, setSelectedObject, updateVertex} from \"./CanvasDraw\";\r\nimport {getTreeData, getVertexData, vertexData} from \"./ContainmentTree\"\r\nimport { Update } from '@material-ui/icons';\r\n\r\n// Globals\r\nlet rows;\r\nlet setRows = null;\r\nlet setColumns = null;\r\nlet textInput = React.createRef();\r\nexport var translationColumns = [];\r\n\r\nconst onSave = (workbook) => {\r\n    workbook.xlsx.writeBuffer().then((buffer) => {\r\n        saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n    });\r\n};\r\n\r\nconst getRowId = row => row.id;\r\n\r\nconst styles = () => ({\r\n    input: {\r\n        fontSize: '14px',\r\n        width: '90px',\r\n    },\r\n    label: {\r\n        fontSize: '14px',\r\n    },\r\n    container: {\r\n        maxWidth: '18em',\r\n    },\r\n    selector: {\r\n        height: '32px',\r\n    },\r\n});\r\n\r\n// #FOLD_BLOCK\r\nconst StartEditActionSelectorBase = (props) => {\r\n    const { defaultAction, changeAction, classes } = props;\r\n    return (\r\n        <GridMUI\r\n            container\r\n            alignItems=\"center\"\r\n            className={classes.container}\r\n        >\r\n            <Typography\r\n                className={classes.label}\r\n            >\r\n                Start Edit Action:\r\n                &nbsp;\r\n            </Typography>\r\n            <Select\r\n                onChange={e => changeAction(e.target.value)}\r\n                value={defaultAction}\r\n                className={classes.selector}\r\n                input={(\r\n                    <OutlinedInput\r\n                        classes={{ input: classes.input }}\r\n                        labelWidth={0}\r\n                        margin=\"dense\"\r\n                    />\r\n                )}\r\n            >\r\n                <MenuItem value=\"click\">Click</MenuItem>\r\n                <MenuItem value=\"doubleClick\">Double Click</MenuItem>\r\n            </Select>\r\n        </GridMUI>\r\n    );\r\n};\r\nconst StartEditActionSelector = withStyles(styles, { name: 'StartEditActionSelector' })(StartEditActionSelectorBase);\r\n\r\n// #FOLD_BLOCK\r\nconst SelectTextCheckerBase = (props) => {\r\n    const { isSelectText, changeSelectText, classes } = props;\r\n    return (\r\n        <FormControlLabel\r\n            control={(\r\n                <Checkbox\r\n                    checked={isSelectText}\r\n                    onChange={e => changeSelectText(e.target.checked)}\r\n                    color=\"primary\"\r\n                />\r\n            )}\r\n            classes={{ label: classes.label }}\r\n            label=\"Select Text On Focus\"\r\n        />\r\n    );\r\n};\r\nconst SelectTextChecker = withStyles(styles, { name: 'SelectTextChecker' })(SelectTextCheckerBase);\r\n\r\nconst EditPropsPanel = props => (\r\n    <Plugin name=\"EditPropsPanel\">\r\n        <Template name=\"toolbarContent\">\r\n            <SelectTextChecker {...props} />\r\n            <TemplatePlaceholder />\r\n            <StartEditActionSelector {...props} />\r\n        </Template>\r\n    </Plugin>\r\n);\r\n\r\nconst FocusableCell = ({ onClick, ...restProps }) => (\r\n    <Table.Cell {...restProps} tabIndex={0} onFocus={onClick} />\r\n);\r\n\r\nexport default () => {\r\n    \r\n    // Create columns\r\n    let [columns, setColumnsRet] = useState(createColumns());\r\n    setColumns = setColumnsRet;\r\n\r\n    // Disable editing state\r\n    const [editingStateColumnExtensions] = useState([\r\n        { columnName: 'UUID', editingEnabled: false },\r\n        { columnName: 'type', editingEnabled: false },\r\n    ]);\r\n\r\n    // Rows\r\n    const [generatedRows, setRowsRet] = useState([]);\r\n    rows = generatedRows;\r\n    setRows = setRowsRet;\r\n\r\n    // Enable/Disable word Wrap\r\n    const [tableColumnExtensions] = useState([\r\n        { columnName: 'UUID', wordWrapEnabled: true },\r\n        { columnName: 'type', wordWrapEnabled: true },\r\n        { columnName: 'name', wordWrapEnabled: true },\r\n        { columnName: 'description', wordWrapEnabled: true },\r\n        { columnName: 'abbreviation', wordWrapEnabled: true },\r\n        { columnName: 'shortAbbreviation', wordWrapEnabled: true },\r\n    ]);\r\n\r\n    // Editable\r\n    const [startEditAction, setStartEditAction] = useState('click');\r\n    const [selectTextOnEditStart, setSelectTextOnEditStart] = useState(true);\r\n\r\n    const commitChanges = ({ added, changed, deleted}) => {\r\n        let changedRows;\r\n        if (added) {\r\n            const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n            changedRows = [\r\n                ...rows,\r\n                ...added.map((row, index) => ({\r\n                    id: startingAddedId + index,\r\n                    ...row,\r\n                })),\r\n            ];\r\n        }\r\n        if (changed) {\r\n            changedRows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));\r\n            updateChangedObjects(changedRows);\r\n        }\r\n        if (deleted) {\r\n            const deletedSet = new Set(deleted);\r\n            changedRows = rows.filter(row => !deletedSet.has(row.id));\r\n        }\r\n\r\n        setRows(changedRows);\r\n    };\r\n\r\n    // Export functionality\r\n    const exporterRef = useRef(null);\r\n\r\n    const startExport = useCallback(() => {\r\n        exporterRef.current.exportGrid();\r\n    }, [exporterRef]);\r\n\r\n    // Return\r\n    return (\r\n        <Paper>\r\n            <InputGroup>\r\n                <FormControl\r\n                    ref={textInput}\r\n                    placeholder=\"Column name\"\r\n                    aria-label=\"Column name\"\r\n                    aria-describedby=\"basic-addon2\"\r\n                />\r\n                <InputGroup.Append>\r\n                    <Button variant=\"outline-secondary\" onClick={() => addColumn()}>Add</Button>\r\n                    <Button variant=\"outline-secondary\" onClick={() => removeColumn()}>Remove</Button>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n            <Grid\r\n                rows={rows}\r\n                columns={columns}\r\n                getRowId={getRowId}\r\n            >\r\n                <EditingState\r\n                    onCommitChanges={commitChanges}\r\n                    columnExtensions={editingStateColumnExtensions}\r\n                />\r\n                <Table cellComponent={FocusableCell} columnExtensions={tableColumnExtensions} />\r\n                <TableHeaderRow />\r\n                <Toolbar />\r\n                <EditPropsPanel\r\n                    defaultAction={startEditAction}\r\n                    changeAction={setStartEditAction}\r\n                    isSelectText={selectTextOnEditStart}\r\n                    changeSelectText={setSelectTextOnEditStart}\r\n                />\r\n                <ExportPanel startExport={startExport} />\r\n                <TableInlineCellEditing\r\n                    startEditAction={startEditAction}\r\n                    selectTextOnEditStart={selectTextOnEditStart}\r\n                />\r\n            </Grid>\r\n            <GridExporter\r\n                ref={exporterRef}\r\n                rows={rows}\r\n                columns={columns}\r\n                onSave={onSave}\r\n            />\r\n        </Paper>\r\n    );\r\n};\r\n\r\nfunction addColumn() {\r\n    // Get\r\n    const value = textInput.current.value\r\n\r\n    // Clear column name\r\n    textInput.current.value = \"\";\r\n\r\n    // Check if value is empty\r\n    if (value === \"\" || value === null || value === undefined) {\r\n        return;\r\n    }\r\n\r\n    // Add column\r\n    translationColumns.push(value);\r\n    updateColumns();\r\n}\r\n\r\nfunction removeColumn() {\r\n    // Get\r\n    const value = textInput.current.value\r\n\r\n    // Clear column name\r\n    textInput.current.value = \"\";\r\n\r\n    // Delete from currentObjects\r\n    for (let object of currentObjects.flatten()) {\r\n        object.semanticIdentity.translations.delete(value);\r\n    }\r\n\r\n    // Delete column\r\n    translationColumns.splice(translationColumns.indexOf(value), 1);\r\n    updateColumns();\r\n}\r\n\r\nfunction updateColumns() {\r\n    setColumns(createColumns());\r\n}\r\n\r\nfunction getRowForObject(object) {\r\n    const row = {};\r\n\r\n    // Constants\r\n    row['id'] = object.semanticIdentity.UUID; // Just going to be based on UUID since it's easy and unique\r\n    row['UUID'] = object.semanticIdentity.UUID;\r\n    row['type'] = object.typeName;\r\n    row['name'] = object.semanticIdentity.name;\r\n    row['description'] = object.semanticIdentity.description;\r\n    row['abbreviation'] = object.semanticIdentity.abbreviation;\r\n    row['shortAbbreviation'] = object.semanticIdentity.shortAbbreviation;\r\n\r\n    // Translations\r\n    for (let o = 0; o < object.semanticIdentity.translations.length; o++) {\r\n        let translation = object.semanticIdentity.translations[o];\r\n\r\n        row[translation[0]] = translation[1];\r\n    }\r\n\r\n    return row;\r\n}\r\n\r\nexport function resetRows() {\r\n    let newRows = [];\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    for (let i = 0; i < vertexData.length; i++) {\r\n        newRows.push(getRowForObject(vertexData[i]));\r\n    }\r\n    for(let i = 0; i < currentObjectsFlattened.length; i++){\r\n        // Add Arrow Ends\r\n        if (currentObjectsFlattened[i].typeName === \"Arrow\") {\r\n            newRows.push(getRowForObject(currentObjectsFlattened[i].sourceEdgeEnd));\r\n            newRows.push(getRowForObject(currentObjectsFlattened[i].destEdgeEnd));\r\n        }\r\n    }\r\n\r\n    if (setRows === null) {\r\n        console.error(\"Cannot set rows\");\r\n        return;\r\n    }\r\n\r\n    setRows(newRows);\r\n}\r\n\r\nfunction createColumns() {\r\n    // Create default columns\r\n    let columnNames = [\r\n        {name: 'UUID', title: 'UUID'},\r\n        {name: 'type', title: 'Type'},\r\n        {name: 'name', title: 'Name'},\r\n        {name: 'description', title: 'Description'},\r\n        {name: 'abbreviation', title: 'Abbreviation'},\r\n        {name: 'shortAbbreviation', title: 'Short Abbreviation'},\r\n    ];\r\n\r\n    // Add translation columns\r\n    for (let translation of translationColumns) {\r\n        columnNames.push({name: translation, title: translation});\r\n    }\r\n\r\n    return columnNames;\r\n}\r\n\r\nfunction updateChangedObject(object, row) {\r\n    // If should update\r\n    if (object.semanticIdentity.UUID === row['UUID']) {\r\n        \r\n        // Constants\r\n        object.semanticIdentity.abbreviation = row['abbreviation'];\r\n        object.semanticIdentity.shortAbbreviation = row['shortAbbreviation'];\r\n        object.semanticIdentity.name = row['name'];\r\n        object.title = row['name']; // update the title of the vertex to be the same as semantic name\r\n        object.semanticIdentity.description = row['description'];\r\n        object.text = row['name'] + \" 🟧\"\r\n        \r\n        // Translations\r\n        for (let translation of translationColumns) {\r\n            // Find translation in list\r\n            let set = false;\r\n            for (let i = 0; i < object.semanticIdentity.translations.length; i++) {\r\n                if (object.semanticIdentity.translations[i][0] === translation) {\r\n                    object.semanticIdentity.translations[i][1] = row[translation];\r\n                    set = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!set) {\r\n                object.semanticIdentity.translations.push([translation, row[translation]]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    return row;\r\n}\r\n\r\nfunction updateChangedObjects(rows) {\r\n    \r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n    let treeVert = vertexData\r\n\r\n    // Iterate through all rows\r\n    for (let i = 0; i < rows.length; i++) {\r\n\r\n        //itterate through tree verts\r\n        for (let j = 0; j < treeVert.length; j++) {\r\n            rows[i] = updateChangedObject(treeVert[j],rows[i])\r\n            console.log(treeVert[j])\r\n        }\r\n\r\n        // Iterate through all objects\r\n        for (let o = 0; o < currentObjectsFlattened.length; o++) {\r\n            // Update main objects\r\n            rows[i] = updateChangedObject(currentObjectsFlattened[o], rows[i]);\r\n\r\n            // Update edge ends\r\n            if (currentObjectsFlattened[o].typeName === \"Arrow\") {\r\n                rows[i] = updateChangedObject(currentObjectsFlattened[o].sourceEdgeEnd, rows[i]);\r\n                rows[i] = updateChangedObject(currentObjectsFlattened[o].destEdgeEnd, rows[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function setTranslationColumns(newColumns) {\r\n    translationColumns = newColumns;\r\n    updateColumns();\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { SemanticIdentity } from \"./SemanticIdentity\";\r\n\r\nexport class Cardinality {\r\n    constructor(lowerBound, upperBound, attachedToUUID, isVisible = false, semanticIdentity) {\r\n        this.typeName = \"Cardinality\";\r\n        \r\n        this.numLowerBound = lowerBound;\r\n        this.numUpperBound = upperBound;\r\n        this.attachedToUUID = attachedToUUID;\r\n        this.isVisible = isVisible;\r\n\r\n        if (semanticIdentity !== undefined){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            this.semanticIdentity = new SemanticIdentity(this.toString(), this.getDescription())\r\n        }\r\n    }\r\n\r\n    set lowerBound(value){\r\n        this.numLowerBound = value;\r\n        this.semanticIdentity.name = this.toString();\r\n    }\r\n\r\n    get lowerBound(){\r\n        return this.numLowerBound;\r\n    }\r\n\r\n    set upperBound(value){\r\n        this.numUpperBound = value;\r\n        this.semanticIdentity.name = this.toString();\r\n    }\r\n\r\n    get upperBound(){\r\n        return this.numUpperBound;\r\n    }\r\n\r\n    toggleVisibility() {\r\n        this.isVisible = !this.isVisible;\r\n    }\r\n\r\n    toString() {\r\n        var lower;\r\n        var upper;\r\n\r\n        if (this.lowerBound === '-1') {\r\n            lower = 'n'\r\n        } else {\r\n            lower = this.lowerBound;\r\n        }\r\n\r\n        if (this.upperBound === '-1') {\r\n            upper = 'n'\r\n        } else {\r\n            upper = this.upperBound;\r\n        }\r\n\r\n        if (lower === upper) {\r\n            return lower;\r\n        } else {\r\n            return lower + \" .. \" + upper\r\n        }\r\n    }\r\n\r\n    getDescription(){\r\n        return `Cardinality of Edge End ${this.attachedToUUID}`;\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { SemanticIdentity } from \"./SemanticIdentity\";\r\nimport { Cardinality } from \"./Cardinality\";\r\nimport * as ArrowProps from \"./ArrowProperties\";\r\nimport { getCurrentModel, getCurrentRenderKey } from \"../UIElements/CanvasDraw\";\r\n\r\n\r\n// Object that contains all the parts of an arrow ending including:\r\n// Head type\r\n// Cardinality\r\n// Label\r\n//\r\n// Used in the Arrow class\r\nexport class EdgeEnd {\r\n    constructor(attachedToUUID, headType = ArrowProps.EdgeEnd.NONE, cardinality, label = \"\", semanticIdentity) {\r\n        this.attachedToUUID = attachedToUUID;\r\n        this.typeName = \"EdgeEnd\";\r\n\r\n        if (semanticIdentity !== undefined){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            this.semanticIdentity = new SemanticIdentity(this.toString(), this.getDescription())\r\n        }\r\n        \r\n        this.headType = headType;\r\n        \r\n        if (cardinality !== undefined){\r\n            this.cardinality = cardinality;\r\n        } else {\r\n            this.cardinality = new Cardinality(1, 1, this.semanticIdentity.UUID);\r\n        }\r\n\r\n        this.label = label;\r\n\r\n        // For deciding where it goes in the graph\r\n        this.edgeEndRenderKey = getCurrentRenderKey();\r\n\r\n        // For rendering the object\r\n        this.edgeEndModelKey = getCurrentModel();\r\n    }\r\n\r\n    // Set the model key\r\n    setModelKey(key){\r\n        this.edgeEndModelKey = key;\r\n    }\r\n\r\n    // Return the model key\r\n    getModelKey(){\r\n        return this.edgeEndModelKey;\r\n    }\r\n\r\n    // Set the render key. Done in ContainmentTree.js\r\n    setRenderKey(key){\r\n        this.edgeEndRenderKey = key;\r\n    }\r\n\r\n    // Return the render key. Done in CanvasDraw.js\r\n    getRenderKey(key){\r\n        return this.edgeEndRenderKey;\r\n    }\r\n\r\n    set type(newType){\r\n        this.headType = newType;\r\n        this.semanticIdentity.name = this.toString();\r\n    }\r\n\r\n    get type(){\r\n        return this.headType;\r\n    }\r\n\r\n    toString(){\r\n        return `${this.type} type Edge End`;\r\n    }\r\n\r\n    getDescription(){\r\n        return `Edge end of ${this.attachedToUUID}`;\r\n    }\r\n\r\n    updateCardinality(lowerBound, upperBound, visibility){\r\n        this.cardinality.lowerBound = lowerBound;\r\n        this.cardinality.upperBound = upperBound;\r\n        this.cardinality.visibility = visibility;\r\n    }\r\n\r\n    drawLines(canvasContext, points, strokeColour, fillColour) {\r\n        canvasContext.strokeStyle = strokeColour;\r\n        if (fillColour !== undefined) {\r\n            canvasContext.fillStyle = fillColour;\r\n        }\r\n\r\n        canvasContext.beginPath();\r\n        canvasContext.moveTo(points[0].X, points[0].Y);\r\n        for (let i = 1; i < points.length; i++) {\r\n            canvasContext.lineTo(points[i].X, points[i].Y)\r\n        }\r\n        \r\n        if (fillColour !== undefined) {\r\n            canvasContext.closePath();\r\n            canvasContext.fill();\r\n        }\r\n        canvasContext.stroke();\r\n\r\n        canvasContext.fillStyle = \"#000\"\r\n        canvasContext.strokeStyle = \"#000\";\r\n    }\r\n\r\n    drawArrowEnd(canvasContext, x, y, angle, lineColour) {\r\n        //Constants\r\n        const strokeLength = 7;\r\n        const angleFromLine = Math.PI/6;\r\n        const angleInverted = angle + Math.PI;\r\n\r\n        //Generate points for the arrowhead\r\n        var arrowPoints = [];\r\n        arrowPoints.push({\r\n            X: x + strokeLength * Math.cos(angleInverted - angleFromLine),\r\n            Y: y + strokeLength * Math.sin(angleInverted - angleFromLine)\r\n        });\r\n        arrowPoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n        arrowPoints.push({\r\n            X: x + strokeLength * Math.cos(angleInverted + angleFromLine),\r\n            Y: y + strokeLength * Math.sin(angleInverted + angleFromLine)\r\n        });\r\n\r\n        //Arrowhead drawing\r\n        this.drawLines(canvasContext, arrowPoints, lineColour)\r\n    }\r\n\r\n    drawTriangleEnd(canvasContext, x, y, angle, lineColour, fillColour = \"#FFF\") {\r\n        //Constants\r\n        const sideLength = 7;\r\n        const deg30 = Math.PI / 6;\r\n        const angleInverted = angle + Math.PI;\r\n\r\n        //Generate points for the triangle\r\n        var trianglePoints = [];\r\n        trianglePoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n        trianglePoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted - deg30),\r\n            Y: y + sideLength * Math.sin(angleInverted - deg30)\r\n        });\r\n        trianglePoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted + deg30),\r\n            Y: y + sideLength * Math.sin(angleInverted + deg30)\r\n        });\r\n        trianglePoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n\r\n        //Triangle drawing\r\n        this.drawLines(canvasContext, trianglePoints, lineColour, fillColour);\r\n    }\r\n\r\n    drawDiamondEnd(canvasContext, x, y, angle, lineColour, fillColour = \"#FFF\") {\r\n        //Constants\r\n        const sideLength = 7;\r\n        const deg20 = Math.PI / 9;\r\n        const angleInverted = angle + Math.PI;\r\n\r\n        //Generate points for the diamond\r\n        var diamondPoints = [];\r\n        diamondPoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n        diamondPoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted - deg20),\r\n            Y: y + sideLength * Math.sin(angleInverted - deg20)\r\n        });\r\n        diamondPoints.push({\r\n            X: x + sideLength * 2 * Math.cos(angleInverted),\r\n            Y: y + sideLength * 2 * Math.sin(angleInverted)\r\n        });\r\n        diamondPoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted + deg20),\r\n            Y: y + sideLength * Math.sin(angleInverted + deg20)\r\n        });\r\n        diamondPoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n\r\n        //Diamond drawing\r\n        this.drawLines(canvasContext, diamondPoints, lineColour, fillColour);\r\n    }\r\n\r\n    draw(canvasContext, x, y, angle, lineColour){\r\n        switch (this.type) {\r\n            case ArrowProps.EdgeEnd.NONE:\r\n                break;\r\n            case ArrowProps.EdgeEnd.ARROW:\r\n                this.drawArrowEnd(canvasContext, x, y, angle, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.TRIANGLE:\r\n                this.drawTriangleEnd(canvasContext, x, y, angle, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.FILLED_TRIANGLE:\r\n                this.drawTriangleEnd(canvasContext, x, y, angle, lineColour, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.DIAMOND:\r\n                this.drawDiamondEnd(canvasContext, x, y, angle, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.FILLED_DIAMOND:\r\n                this.drawDiamondEnd(canvasContext, x, y, angle, lineColour, lineColour);\r\n                break;\r\n            default:\r\n                console.log(\"EdgeEnd had unexpected type: %s\", this.type);\r\n        }\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { SemanticIdentity } from \"./SemanticIdentity\";\r\nimport {drawMarker, getDistance, getCurrentRenderKey} from \"../UIElements/CanvasDraw\";\r\nimport {getModelRenderKey} from \"../UIElements/ContainmentTree\";\r\nimport * as ArrowProps from \"./ArrowProperties\";\r\nimport { EdgeEnd } from \"./EdgeEnd\";\r\nimport {Tool} from \"../UIElements/LeftMenu\";\r\nimport * as canvasDraw from \"../UIElements/CanvasDraw\"\r\n\r\nexport class Arrow {\r\n    // Connects an arrow fromVertex to toVertex\r\n    // pathData is an array of objects that can either be a:\r\n    //      0) Vertex Data\r\n    //         [0, UUID, xPercentage, yPercentage]\r\n    //         The Percentage data is the relative percentage\r\n    //              e.g. 0,0 represents top left, 1,1 bottom right etc\r\n    //      1) Array containing an x and y element\r\n    //         [1, x, y]\r\n    constructor(objectsList, pathData, type, semanticIdentity) {\r\n        this.typeName = \"Arrow\";\r\n\r\n        if (semanticIdentity !== undefined || objectsList === null){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            if (objectsList.length > 1) {\r\n                this.semanticIdentity = new SemanticIdentity(\"Arrow from \" + objectsList[0].semanticIdentity.UUID + \" to \" + objectsList[1].semanticIdentity.UUID, \"\", \"\", \"\", undefined, []);\r\n            } else if (objectsList.length === 1) {\r\n                this.semanticIdentity = new SemanticIdentity(\"Arrow connecting \" + objectsList[0].semanticIdentity.UUID, \"\", \"\", \"\", undefined, []);\r\n            } else {\r\n                this.semanticIdentity = new SemanticIdentity(\"Arrow connecting 1 or less vertices\", \"\", \"\", \"\", undefined, []);\r\n            }\r\n        }\r\n\r\n        this.sourceEdgeEnd = new EdgeEnd(this.semanticIdentity.UUID);\r\n        this.destEdgeEnd = new EdgeEnd(this.semanticIdentity.UUID);\r\n\r\n        // Ensure there are at least 2 points\r\n        if (pathData.length === 1) pathData.push(pathData[0]);\r\n        // Save pathData for later\r\n        this.pathData = pathData;\r\n\r\n        this.sourceVertexUUID = null;\r\n        this.destVertexUUID = null;\r\n        this.updateAttachedVertices();\r\n\r\n        // Construct Path\r\n        this.rebuildPath();\r\n        \r\n        // Type\r\n\r\n        this.lineColour = ArrowProps.LineColour.BLACK;\r\n        this.lineType = ArrowProps.LineType.SOLID;\r\n\r\n        if (type === Tool.Edge || type === Tool.Specialisation || type === Tool.Visibility) {\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n        }else{\r\n            console.log(\"Failed to find correct tool\");\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n        }\r\n\r\n        if (type === Tool.Edge) {\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n            this.typeName = \"Arrow\";\r\n        }else if (type === Tool.Specialisation){\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.TRIANGLE\r\n            this.typeName = \"Specialisation\";\r\n        }else if (type === Tool.Visibility){\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            this.lineType = ArrowProps.LineType.DASHED\r\n            this.typeName = \"Visibility\";\r\n        }else{\r\n            console.log(\"Failed to find correct tool\");\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n        }\r\n\r\n        this.edgeType = type;\r\n\r\n        this.selected = false;\r\n\r\n        this.sourceIsNavigable = false;\r\n        this.destIsNavigable = false;\r\n        this.sourceIsAggregation = false;\r\n        this.destIsAggregation = false;\r\n\r\n        // Model key for rendering\r\n        this.arrowModelKey = canvasDraw.getCurrentModel();\r\n\r\n        // Render key for the arrow for placing in tree\r\n        this.arrowRenderKey = getModelRenderKey(this.arrowModelKey);\r\n    }\r\n\r\n    // Set the model key\r\n    setModelKey(key){\r\n        this.arrowModelKey = key;\r\n    }\r\n\r\n    getModelKey(){\r\n        return this.arrowModelKey;\r\n    }\r\n\r\n    // Set the render key. This is done in ContainmentTree.js\r\n    setRenderKey(key){\r\n        this.arrowRenderKey = key;\r\n    }\r\n\r\n    // Return the render key. This is called in CanvasDraw\r\n    getRenderKey(){\r\n        return this.arrowRenderKey;\r\n    }\r\n\r\n    toggleNavigable(side){\r\n        if(side === 0) {\r\n            this.sourceIsNavigable = !this.sourceIsNavigable;\r\n        }else if(side === 1){\r\n            this.destIsNavigable = !this.destIsNavigable;\r\n        }\r\n        if(this.sourceIsAggregation){\r\n            this.sourceIsNavigable = true;\r\n        }\r\n        if(this.destIsAggregation){\r\n            this.destIsNavigable = true;\r\n        }\r\n\r\n        if(this.sourceIsNavigable && this.destIsNavigable){\r\n            if(this.sourceIsAggregation){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }\r\n            else if(this.destIsAggregation){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n            }else{\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }\r\n        }else if(this.sourceIsNavigable){\r\n            if(this.sourceIsAggregation){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }else {\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }\r\n        }else if(this.destIsNavigable){\r\n            if(this.destIsAggregation){\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }else {\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }\r\n        }else{\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n        }\r\n\r\n    }\r\n\r\n    toggleAggregation(side){\r\n        if(side === 0){\r\n            this.sourceIsAggregation = !this.sourceIsAggregation;\r\n            if(this.destIsAggregation && this.sourceIsAggregation){\r\n                this.destIsAggregation = false;\r\n            }\r\n        }else{\r\n            this.destIsAggregation = !this.destIsAggregation;\r\n            if(this.destIsAggregation && this.sourceIsAggregation){\r\n                this.sourceIsAggregation = false;\r\n            }\r\n        }\r\n\r\n\r\n        if(this.sourceIsAggregation) {\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n            if(this.destIsNavigable){\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }else{\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n            }\r\n        }else if(this.destIsAggregation){\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n            if(this.sourceIsNavigable){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }else{\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n            }\r\n        }else{\r\n            // this updates the arrow heads so they are correct\r\n            this.toggleNavigable(100)\r\n        }\r\n    }\r\n\r\n    getNavigable(side){\r\n        if(side === 0){\r\n            return this.sourceIsNavigable;\r\n        }else{\r\n            return this.destIsNavigable;\r\n        }\r\n\r\n    }\r\n\r\n    getAggregation(side){\r\n        if(side === 0){\r\n            return this.sourceIsAggregation\r\n        }else{\r\n            return this.destIsAggregation\r\n        }\r\n\r\n    }\r\n\r\n    trimPath(){\r\n        this.pathData = [this.pathData[0], this.pathData[this.pathData.length-1]];\r\n        this.path = [this.path[0], this.path[this.path.length-1]];\r\n    }\r\n\r\n    // Rebuilds path from cached pathData\r\n    rebuildPath() {\r\n\r\n        let connectedObjectUUIDs = this.getObjectUUIDList();\r\n        let objects = [];\r\n\r\n        connectedObjectUUIDs.forEach((UUID) => {\r\n            objects.push(canvasDraw.getObjectFromUUID(UUID))\r\n        });\r\n\r\n        // X, Y data for path\r\n        this.path = [];\r\n\r\n        for (let i = 0; i < this.pathData.length; i++) {\r\n            // Check if its case 0 or 1\r\n            let pathItem = this.pathData[i];\r\n\r\n            //If the first element of a PathItem is 0, the second element contains the UUID of an object\r\n            if (pathItem[0] === 0) {\r\n                this.path.push(this.getZerothCasePathItem(objects, pathItem));\r\n            }\r\n            //If the first element is 1, the next two elements are the X and Y points, respectively\r\n            else if (pathItem[0] === 1) {\r\n                this.path.push([pathItem[1], pathItem[2]]);\r\n            } else {\r\n                console.error(\"Invalid PathData case, wrong case\", pathItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Gets pathItem from object (hopefully a vertex) based on UUID\r\n    // will come back to this to sort out arrows overlapping on creation\r\n    // for extra clarity pathItem[2] is where the arrow from/end is on the x axis of the vertex(0..1)\r\n    // and pathItem[3] is where the arrow is from/end is on the y axis of the vertex(0..1) - cooper\r\n    getZerothCasePathItem(objects, pathItem) {\r\n        for (let i = 0; i < objects.length; i++) {\r\n           // if(objects[0].semanticIdentity.UUID === objects[1].semanticIdentity.UUID){\r\n\r\n           // }\r\n            if (objects[i] !== null && objects[i] !== undefined) {\r\n                if (objects[i].semanticIdentity.UUID === pathItem[1]) {\r\n                    \r\n                    \r\n                  //  let minX = objects[i].x\r\n                   // let maxX = objects[i].x + objects[i].width\r\n                   // let minY = objects[i].y\r\n                   // let maxY = objects[i].y + objects[i].realHeight // get the minimum and maximum x,y coords for the object. \r\n                                                                    // this will serve as a range so that arrows can't automatically pass these points\r\n                    let newX = pathItem[2]*objects[i].width + objects[i].x;\r\n                    let newY = pathItem[3]*objects[i].realHeight + objects[i].y;\r\n                    let x = newX\r\n                    let y = newY\r\n                    \r\n                 //   if (newX <= minX){\r\n                  //      x = minX\r\n                  //  }\r\n                  //  else if (newX >= maxX){\r\n                    //    x = maxX\r\n                    //}\r\n                    //else if (newY <= minY){\r\n                      //  y = minY\r\n                    //}\r\n                    //else if (newY >= maxY){\r\n                     //   y = maxY\r\n                    //}\r\n                   \r\n              \r\n                    return [x, y]\r\n                }\r\n            }\r\n        }\r\n\r\n        console.error(\"Could not find vertex to connect for pathItem\", pathItem);\r\n        return null;\r\n    }\r\n\r\n    getObjectUUIDList(){\r\n        let output = [];\r\n            this.pathData.forEach((item) => {\r\n                let index = this.pathData.indexOf(item);\r\n                if(item == null){\r\n                    this.pathData[index] = [1,this.path[index][0],this.path[index][1]]\r\n                }\r\n                if (this.pathData[index][0] === 0) {\r\n                    output.push(item[1])\r\n                }\r\n            });\r\n        return output\r\n    }\r\n\r\n    updateAttachedVertices() {\r\n        var pathStart = this.pathData[0];\r\n        var pathEnd = this.pathData[this.pathData.length - 1];\r\n\r\n        if (pathStart[0] === 0) {\r\n            this.sourceVertexUUID = pathStart[1];\r\n        } else {\r\n            this.sourceVertexUUID = null;\r\n        }\r\n\r\n        if (pathEnd[0] === 0) {\r\n            this.destVertexUUID = pathEnd[1];\r\n        } else {\r\n            this.destVertexUUID = null;\r\n        }\r\n    }\r\n\r\n    setSelected(selected) {\r\n        this.selected = selected;\r\n    }\r\n\r\n    updateSourceCardinality(lowerBound, upperBound, visibility) {\r\n        this.sourceEdgeEnd.updateCardinality(lowerBound, upperBound, visibility);\r\n    }\r\n\r\n    getSourceCardinalityVisibility() {\r\n        return this.sourceEdgeEnd.cardinality.isVisible;\r\n    }\r\n\r\n    toggleSourceCardinalityVisibility() {\r\n        this.sourceEdgeEnd.cardinality.toggleVisibility();\r\n    }\r\n\r\n    getSourceCardinalityLowerBound() {\r\n        return this.sourceEdgeEnd.cardinality.lowerBound;\r\n    }\r\n\r\n    getSourceCardinalityUpperBound() {\r\n        return this.sourceEdgeEnd.cardinality.upperBound;\r\n    }\r\n\r\n    updateDestCardinality(lowerBound, upperBound, visibility) {\r\n        this.destEdgeEnd.updateCardinality(lowerBound, upperBound, visibility);\r\n    }\r\n\r\n    getDestCardinalityVisibility() {\r\n        return this.destEdgeEnd.cardinality.isVisible;\r\n    }\r\n\r\n    toggleDestCardinalityVisibility() {\r\n        this.destEdgeEnd.cardinality.toggleVisibility();\r\n    }\r\n\r\n    getDestCardinalityLowerBound() {\r\n        return this.destEdgeEnd.cardinality.lowerBound;\r\n    }\r\n\r\n    getDestCardinalityUpperBound() {\r\n        return this.destEdgeEnd.cardinality.upperBound;\r\n    }\r\n\r\n    setStartLabel(label) {\r\n        this.sourceEdgeEnd.label = label;\r\n    }\r\n\r\n    setEndLabel(label) {\r\n        this.destEdgeEnd.label = label;\r\n    }\r\n\r\n    setLineColour(lineColour) {\r\n        let val = ArrowProps.StringNameToLineColour[lineColour];\r\n        if (val !== undefined) {\r\n            this.lineColour = val;\r\n        } else {\r\n            console.log(\"Attempted to assign invalid lineColour: %s\", lineColour);\r\n        }\r\n    }\r\n\r\n    setLineType(lineType) {\r\n        let val = ArrowProps.StringToLineType[lineType];\r\n        if (val !== undefined) {\r\n            this.lineType = val;\r\n        } else {\r\n            console.log(\"Attempted to assign invalid lineType: %s\", lineType);\r\n        }\r\n    }\r\n\r\n    // Creates nodes for an algorithmn to path find around a vertex\r\n    createPathNodesForVertex(vertex, nodeIndex, d) {\r\n        // Set ids\r\n        let topLeft     = nodeIndex++;\r\n        let top         = nodeIndex++;\r\n        let topRight    = nodeIndex++;\r\n        let right       = nodeIndex++;\r\n        let bottomRight = nodeIndex++;\r\n        let bottom      = nodeIndex++;\r\n        let bottomLeft  = nodeIndex++;\r\n        let left        = nodeIndex++;\r\n\r\n        // Create nodes for: fromVertex\r\n        let vertexNodes = [];\r\n        vertexNodes.push([topLeft,     vertex.x-d,              vertex.y+vertex.height+d, [left, top]]);               // Top    Left\r\n        vertexNodes.push([top,         vertex.x+vertex.width/2, vertex.y+vertex.height+d, [topLeft, topRight]]);       // Top\r\n        vertexNodes.push([topRight,    vertex.x+vertex.width+d, vertex.y+vertex.height+d, [top, right]]);              // Top    Right\r\n        vertexNodes.push([right,       vertex.x+vertex.width+d, vertex.y+vertex.height/2, [topRight, bottomRight]]);   //        Right\r\n        vertexNodes.push([bottomRight, vertex.x+vertex.width+d, vertex.y-d,               [right, bottom]]);           // Bottom Right\r\n        vertexNodes.push([bottom,      vertex.x+vertex.width/2, vertex.y-d,               [bottomRight, bottomLeft]]); // Bottom\r\n        vertexNodes.push([bottomLeft,  vertex.x-d,              vertex.y-d,               [bottomRight, left]]);       // Bottom Left\r\n        vertexNodes.push([left,        vertex.x-d,              vertex.y+vertex.height/2, [bottomLeft, topLeft]]);     //        Left\r\n        return [nodeIndex, vertexNodes];\r\n    }\r\n\r\n    drawStartHead(canvasContext) {\r\n        let lineAngle = Math.atan2(this.getSY() - this.getNSY(), this.getSX() - this.getNSX());\r\n        this.sourceEdgeEnd.draw(canvasContext, this.getSX(), this.getSY(), lineAngle, this.lineColour);\r\n    }\r\n\r\n    drawEndHead(canvasContext) {\r\n        let lineAngle = Math.atan2(this.getEY() - this.getNEY(), this.getEX() - this.getNEX());\r\n        this.destEdgeEnd.draw(canvasContext, this.getEX(), this.getEY(), lineAngle, this.lineColour);\r\n    }\r\n\r\n    isPathSegmentLR(startIndex,endIndex){\r\n        let indexSx = this.path[startIndex][0];\r\n        let indexEx = this.path[endIndex][0];\r\n        let indexSy = this.path[startIndex][1];\r\n        let indexEy = this.path[endIndex][1];\r\n\r\n        return Math.abs(indexSx-indexEx) > Math.abs(indexSy-indexEy)\r\n    }\r\n\r\n    getTextOffsets(canvasContext, sourceText, destText, sourceCtext, destCtext) {\r\n        let sourceTextWidth = canvasContext.measureText(sourceText).width;\r\n        let destTextWidth = canvasContext.measureText(destText).width;\r\n        let sourceCtextWidth = canvasContext.measureText(sourceCtext).width;\r\n        let destCtextWidth = canvasContext.measureText(destCtext).width;\r\n        let textHeight = 15;\r\n        // 'M' is the widest possible character\r\n        let charWidth = canvasContext.measureText(\"M\").width;\r\n\r\n        let sxOffset;\r\n        let syOffset;\r\n        let exOffset;\r\n        let eyOffset;\r\n\r\n        let sxOffsetc;\r\n        let syOffsetc;\r\n        let exOffsetc;\r\n        let eyOffsetc;\r\n\r\n        let sxFlip = true;\r\n        let syFlip = true;\r\n        let exFlip = true;\r\n        let eyFlip = true;\r\n\r\n        // true if arrow is landscape, false if arrow is portrait;\r\n        let E1index = this.path.length-2;\r\n        let E2index = this.path.length-1;\r\n\r\n        let startLRArrow = this.isPathSegmentLR(0,1);\r\n        let endLRArrow = this.isPathSegmentLR(E1index,E2index);\r\n\r\n        let SSX = this.path[0][0];\r\n        let SSY = this.path[0][1];\r\n        let SEX = this.path[1][0];\r\n        let SEY = this.path[1][1];\r\n\r\n        let ESX = this.path[E1index][0];\r\n        let ESY = this.path[E1index][1];\r\n        let EEX = this.path[E2index][0];\r\n        let EEY = this.path[E2index][1];\r\n\r\n        if (startLRArrow) {\r\n            if (SSX > SEX) {\r\n                sxFlip = !sxFlip;\r\n            }\r\n        } else {\r\n            if (SSY > SEY) {\r\n                syFlip = !syFlip;\r\n            }\r\n        }\r\n\r\n        if (endLRArrow) {\r\n            if (ESX > EEX) {\r\n                exFlip = !exFlip;\r\n            }\r\n        } else {\r\n            if (ESY > EEY) {\r\n                eyFlip = !eyFlip;\r\n            }\r\n        }\r\n\r\n\r\n        if (sxFlip) {\r\n            sxOffset = charWidth/2;\r\n            if (startLRArrow) {\r\n                sxOffsetc = charWidth/2;\r\n            } else {\r\n                sxOffsetc = -1*(sourceCtextWidth+charWidth/2)\r\n            }\r\n        } else {\r\n            sxOffset = -1*(sourceTextWidth+charWidth/2);\r\n            if (startLRArrow) {\r\n                sxOffsetc = -1*(sourceCtextWidth+charWidth/2)\r\n            } else {\r\n                sxOffsetc = charWidth/2;\r\n            }\r\n        }\r\n        \r\n\r\n        if (syFlip) {\r\n            syOffset = textHeight;\r\n            if (startLRArrow) {\r\n                syOffsetc = -1*(textHeight/2)\r\n            } else {\r\n                syOffsetc = syOffset;\r\n            }\r\n        } else {\r\n            syOffset = -1*(textHeight/2);\r\n            if (startLRArrow) {\r\n                syOffsetc = syOffset;\r\n            } else {\r\n                syOffsetc = -1*(textHeight/2)\r\n            }\r\n        }\r\n\r\n\r\n        //if true arrow moves more in x than in y\r\n        exFlip = !exFlip;\r\n        eyFlip = !eyFlip;\r\n\r\n        if (exFlip) {\r\n            exOffset = charWidth/2;\r\n            if (endLRArrow) {\r\n                exOffsetc = charWidth/2;\r\n            } else {\r\n                exOffsetc = -1*(destCtextWidth+charWidth/2)\r\n            }\r\n        } else {\r\n            exOffset = -1*(destTextWidth+charWidth/2);\r\n            if (endLRArrow) {\r\n                exOffsetc = -1*(destCtextWidth+charWidth/2)\r\n            } else {\r\n                exOffsetc = charWidth/2;\r\n            }\r\n        }\r\n\r\n\r\n        if (eyFlip) {\r\n            eyOffset = textHeight;\r\n            if (endLRArrow) {\r\n                eyOffsetc = -1*(textHeight/2);\r\n            } else {\r\n                eyOffsetc = eyOffset;\r\n            }\r\n        } else {\r\n            eyOffset = -1*(textHeight/2);\r\n            if (endLRArrow) {\r\n                eyOffsetc = textHeight;\r\n            } else {\r\n                eyOffsetc = eyOffset;\r\n            }\r\n        }\r\n\r\n\r\n        return [sxOffset,syOffset,exOffset,eyOffset,sxOffsetc,syOffsetc,exOffsetc,eyOffsetc]\r\n    }\r\n\r\n\r\n\r\n    drawLabelsAndCardinalities(canvasContext) {\r\n        let sourceCardText = this.sourceEdgeEnd.cardinality.toString();\r\n        let destCardText = this.destEdgeEnd.cardinality.toString();\r\n        let Offsets = this.getTextOffsets(canvasContext,this.sourceEdgeEnd.label,this.destEdgeEnd.label,sourceCardText,destCardText);\r\n\r\n        canvasContext.fillStyle = \"#000\";\r\n\r\n        //draw source text\r\n        canvasContext.fillText(this.sourceEdgeEnd.label, this.getSX() + Offsets[0], this.getSY() + Offsets[1]);\r\n\r\n        //draw destination text\r\n        canvasContext.fillText(this.destEdgeEnd.label, this.getEX() + Offsets[2], this.getEY() + Offsets[3]);\r\n\r\n        //draw source cardinality\r\n        if (this.getSourceCardinalityVisibility()) {\r\n            canvasContext.fillText(sourceCardText, this.getSX() + Offsets[4], this.getSY() + Offsets[5]);\r\n        }\r\n\r\n        //draw destination cardinality\r\n        if (this.getDestCardinalityVisibility()) {\r\n            canvasContext.fillText(destCardText, this.getEX() + Offsets[6], this.getEY() + Offsets[7]);\r\n        }\r\n    }\r\n\r\n    draw(canvasContext) {\r\n        let dashLength = 5;\r\n\r\n        switch (this.lineType) {\r\n            case ArrowProps.LineType.SOLID:\r\n                canvasContext.setLineDash([]);\r\n                break;\r\n            case ArrowProps.LineType.DASHED:\r\n                canvasContext.setLineDash([dashLength, dashLength]);\r\n                break;\r\n            default:\r\n                console.log(\"Arrow had invalid lineType: %s\", this.lineType);\r\n        }\r\n\r\n        // Draw\r\n        canvasContext.strokeStyle = this.lineColour;\r\n\r\n        // Draw Lines\r\n        for (let i = 0; i < this.path.length-1; i++) {\r\n            let from = this.path[i];\r\n            let to = this.path[i+1];\r\n\r\n            canvasContext.beginPath();\r\n            canvasContext.moveTo(from[0], from[1]);\r\n            canvasContext.lineTo(to[0], to[1]);\r\n            canvasContext.stroke();\r\n        }\r\n\r\n        canvasContext.strokeStyle = \"#000\";\r\n        canvasContext.setLineDash([]);\r\n\r\n        this.drawStartHead(canvasContext);\r\n        this.drawEndHead(canvasContext);\r\n        //store which labels were flipped and in which direction (x/y)\r\n        this.drawLabelsAndCardinalities(canvasContext);\r\n\r\n        if (this.selected) {\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                let pos = this.path[i];\r\n                drawMarker(pos[0], pos[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    intersects(cx, cy) {\r\n        for (let i = 0; i < this.path.length-1; i++) {\r\n            let from = this.path[i];\r\n            let to = this.path[i+1];\r\n\r\n            if (this.intersectsSegment(cx, cy, from, to)) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Checks if it intersects with one of the line segments\r\n    intersectsSegment(cx, cy, from, to) {\r\n        let m = getDistance(cx, cy, from[0], from[1]);\r\n        let n = getDistance(cx, cy, to[0], to[1]);\r\n        let l = getDistance(from[0], from[1], to[0], to[1]);\r\n\r\n        let threshold = 1;\r\n\r\n        return (m+n-threshold < l);\r\n    }\r\n\r\n    // Get first x/y\r\n    getSX() {\r\n        return this.path[0][0];\r\n    }\r\n    getSY() {\r\n        return this.path[0][1];\r\n    }\r\n\r\n    // Get second x/y\r\n    getNSX() {\r\n        return this.path[1][0];\r\n    }\r\n    getNSY() {\r\n        return this.path[1][1];\r\n    }\r\n\r\n    // Get second last x/y\r\n    getNEX() {\r\n        let index = this.path.length-2;\r\n        if (index < 0) index = 0;\r\n        return this.path[index][0];\r\n    }\r\n    getNEY() {\r\n        let index = this.path.length-2;\r\n        if (index < 0) index = 0;\r\n        return this.path[index][1];\r\n    }\r\n\r\n    // Get last x/y\r\n    getEX() {\r\n        return this.path[this.path.length-1][0];\r\n    }\r\n    getEY() {\r\n        return this.path[this.path.length-1][1];\r\n    }\r\n}","import {currentObjects, drawAll, getCurrentModel, getCurrentObjects, getCurrentRenderKey, getTotalModels, getTotalRenderKeys, setCurrentObjects, setNewModel, setNewRenderKey, setTotalModelKeys, setTotalRenderKey, updateArrows} from \"../UIElements/CanvasDraw\"\r\nimport {version} from \"../UIElements/MainView\"\r\nimport {setTranslationColumns, translationColumns} from \"../UIElements/SemanticDomainEditor\"\r\nimport {getModelName} from \"../UIElements/CanvasDraw\";\r\n\r\nimport {Vertex} from \"../DataStructures/Vertex\";\r\nimport {Arrow} from \"../DataStructures/Arrow\";\r\nimport {Cardinality} from \"../DataStructures/Cardinality\";\r\nimport {EdgeEnd} from \"../DataStructures/EdgeEnd\";\r\nimport {Graph} from \"../DataStructures/Graph\";\r\nimport { SemanticIdentity } from \"../DataStructures/SemanticIdentity\";\r\nimport { getDecoyFolderData, getDecoyModelData, getDecoyVertexData, getFolderData, getModelData, getSelectedFolderKey, getTreeData, getVertexData, setDecoyFolderData, setDecoyModelData, setDecoyVertexData, setFolderData, setModelData, setSelectedFolderKey, setTreeData, setVertexData } from \"../UIElements/ContainmentTree\";\r\nimport { CompassCalibrationOutlined } from \"@material-ui/icons\";\r\n\r\n//Get all the data that needs to be saved, to restore a session\r\n// .slice() only creates a shallow copy of arrays which means that it copies literal values but only makes referneces to arrays and objects.\r\n// turning the object into a string and back into an object creates a deep copy which is an actual standalone copy and not an array of references\r\nexport function getSaveData() {\r\n    let vertexObjects = currentObjects.flatten(true, false);\r\n    let arrowObjects = currentObjects.flatten(false, true);\r\n    let treeData = JSON.parse(JSON.stringify(getTreeData()))\r\n    let folderData = JSON.parse(JSON.stringify(getFolderData()))\r\n    let decoyFolderData = JSON.parse(JSON.stringify(getDecoyFolderData()))\r\n\r\n    let vertexData = JSON.parse(JSON.stringify(getVertexData()));\r\n    let decoyVertexData = JSON.parse(JSON.stringify(getDecoyVertexData()));\r\n\r\n    let modelObjects = JSON.parse(JSON.stringify(getModelData()));\r\n    let decoyModelObjects = JSON.parse(JSON.stringify(getDecoyModelData())) \r\n\r\n    let totalRenderKeys = getTotalRenderKeys();\r\n    let totalModels = getTotalModels();\r\n\r\n    let currentModel = getCurrentModel();\r\n    let currentKey = getCurrentRenderKey();\r\n    let currentFolder = getSelectedFolderKey();\r\n\r\n    let saveData = {\r\n\r\n        translationColumns: translationColumns,\r\n\r\n        vertices: vertexObjects,\r\n        arrows: arrowObjects,\r\n        tree: treeData,\r\n        packages: folderData,\r\n        dPackages: decoyFolderData,\r\n        treeVertex: vertexData,\r\n        dTreeVertex: decoyVertexData,\r\n        graph: modelObjects,\r\n        dGrraph: decoyModelObjects,\r\n        renderKeys: totalRenderKeys,\r\n        modelKeys: totalModels,\r\n        currentKey: currentKey,\r\n        currentMod: currentModel,\r\n        currentFol: currentFolder,\r\n        \r\n\r\n\r\n        \"modelName\":getModelName()\r\n    };\r\n    return saveData;\r\n}\r\n\r\n//Create the JSON file with the save data\r\nexport function save(){\r\n    let JSONdata = getSaveData();\r\n    let dataTransformed = JSON.stringify(JSONdata);\r\n    let dataFile = new Blob([dataTransformed], {type: 'text/json'});\r\n    //default file name\r\n    let title = prompt(\"Please name your file\", 's23m Model')\r\n\r\n    //Download the file\r\n    let DLelement = document.createElement(\"a\");\r\n    DLelement.href = URL.createObjectURL(dataFile);\r\n    DLelement.download = title + \".json\";\r\n    document.body.appendChild(DLelement);\r\n    DLelement.click();\r\n    document.body.removeChild(DLelement);\r\n\r\n}\r\n\r\n//currently doesnt load arrows or semantic editor properties\r\nexport function load(jsonString){\r\n    if (jsonString == null) return;\r\n    let saveData = JSON.parse(jsonString);\r\n\r\n    //TreeVertices need to convert semanticIdentity back to a sI object\r\n    for(let vert of saveData.treeVertex){\r\n        vert.semanticIdentity = new SemanticIdentity(vert.semanticIdentity.name,vert.semanticIdentity.description,vert.semanticIdentity.abbreviation,\r\n            vert.semanticIdentity.shortAbbreviation,vert.semanticIdentity.UUID,vert.semanticIdentity.translations)\r\n    }\r\n    //Models and arrows need to be converted back to their explicit types\r\n    var newVertices = [];\r\n    var newArrows = [];\r\n\r\n    //vertices\r\n    for(let vert of saveData.vertices){\r\n        console.log(vert)\r\n        vert.semanticIdentity = new SemanticIdentity(vert.semanticIdentity.name,vert.semanticIdentity.description,vert.semanticIdentity.abbreviation,\r\n            vert.semanticIdentity.shortAbbreviation,vert.semanticIdentity.UUID,vert.semanticIdentity.translations)\r\n        //atm its a bit messy as vert constructor doesnt use destructuring so we can specifiy options, when it does this can be changed\r\n        vert = new Vertex ({newConstructor: 1,loadedVertex: vert})\r\n        newVertices.push(vert)\r\n    }\r\n\r\n    //arrows\r\n    function remakeSemantic(semantic){\r\n        return new SemanticIdentity(semantic.name, semantic.description, semantic.abbreviation, semantic.shortAbbreviation, semantic.UUID, semantic.translations);\r\n    }\r\n\r\n    function remakeCardinality(cardinality){\r\n        return new Cardinality(cardinality.numLowerBound, cardinality.numUpperBound, cardinality.attachedToUUID, cardinality.isVisible, remakeSemantic(cardinality.semanticIdentity));\r\n    }\r\n \r\n    function remakeEdge(edge){\r\n        return new EdgeEnd(edge.attachedToUUID, edge.headType, remakeCardinality(edge.cardinality), edge.label, remakeSemantic(edge.semanticIdentity));\r\n    }\r\n\r\n    function remakeArrow(arrow){\r\n        var newArrow = new Arrow(newVertices, arrow.pathData, arrow.edgeType, remakeSemantic(arrow.semanticIdentity));\r\n            newArrow.sourceEdgeEnd = remakeEdge(arrow.sourceEdgeEnd);\r\n            newArrow.destEdgeEnd = remakeEdge(arrow.destEdgeEnd);\r\n            return newArrow;\r\n    }\r\n\r\n    for(let arrow of saveData.arrows){\r\n        arrow = remakeArrow(arrow)\r\n        newArrows.push(arrow)\r\n    }\r\n\r\n    setTranslationColumns(saveData.translationColumns)\r\n    setFolderData(saveData.packages);\r\n    setDecoyFolderData(saveData.dPackages);\r\n    setVertexData(saveData.treeVertex);\r\n    setDecoyVertexData(saveData.dTreeVertex);\r\n    setModelData(saveData.graph)\r\n    setDecoyModelData(saveData.dGrraph)\r\n    setTreeData(saveData.tree)\r\n    setTotalRenderKey(saveData.renderKeys)\r\n    setTotalModelKeys(saveData.modelKeys)\r\n    setCurrentObjects(new Graph(newVertices, newArrows));\r\n    updateArrows()\r\n    setSelectedFolderKey(1)\r\n    setNewRenderKey(1)\r\n    setNewModel(1)\r\n    drawAll()\r\n\r\n\r\n\r\n    console.log(\"load finished\")\r\n\r\n}\r\n\r\nexport function importLoad(jsonString){\r\n    //load the file\r\n    if (jsonString == null) return;\r\n    let saveData = JSON.parse(jsonString);\r\n    //prompt user to name the new package\r\n\r\n\r\n\r\n    //Models and folders,treevertex's need to be given new keys\r\n    //arrows and vertex's will need new keys to match their updated parent keys\r\n    let folderKeyMap = [];\r\n    let modelKeyMap = [];\r\n    let renderKeys = getTotalRenderKeys();\r\n    let modelKeys = getTotalModels();\r\n\r\n    console.log(saveData)\r\n\r\n    //assign a new key for each package/vertex\r\n    for(let folder of saveData.packages){\r\n        renderKeys++;\r\n        let folderKey = {originalKey: folder.renderKey, originalParentKey: folder.parentRenderKey, newKey: renderKeys, newParentKey: 0}\r\n        folderKeyMap.push(folderKey)\r\n    }\r\n    for(let vert of saveData.treeVertex){\r\n        renderKeys++;\r\n        let folderKey = {originalKey: vert.renderKey, originalParentKey: vert.parentRenderKey, newKey: renderKeys, newParentKey: 0}\r\n        folderKeyMap.push(folderKey)\r\n    }\r\n    for(let model of saveData.graph){\r\n        modelKeys++;\r\n        let modelKey = {originalModeltKey: model.modelKey, originalKey: model.renderKey, newModelKey: modelKeys, newKey: 0}\r\n        modelKeyMap.push(modelKey)\r\n    }\r\n\r\n    //assign new relative parent keys\r\n    for(let packages of folderKeyMap){\r\n        for(let packagesCompare of folderKeyMap){\r\n            if(packages.originalParentKey === packagesCompare.originalKey){\r\n                packages.newParentKey = packagesCompare.newKey;\r\n            }\r\n        }\r\n    }\r\n\r\n    for(let models of modelKeyMap){\r\n        for(let packages of folderKeyMap){\r\n            if(models.originalKey === packages.originalKey){\r\n                models.newKey = packages.originalKey;\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log(folderKeyMap)\r\n    console.log(modelKeyMap)\r\n\r\n\r\n    //assign the new keys to the vertex's model's and packages\r\n\r\n    for(let i = 0; i < saveData.packages.length; i++){\r\n        saveData.packages[i].renderKey = folderKeyMap[i].newKey;\r\n        saveData.packages[i].parentRenderKey = folderKeyMap[i].newParentKey;\r\n\r\n        saveData.dPackages[i].renderKey = folderKeyMap[i].newKey;\r\n        saveData.dPackages[i].parentRenderKey = folderKeyMap[i].newParentKey;\r\n    }\r\n\r\n    for(let i = saveData.packages.length; i < saveData.packages.length + saveData.treeVertex.length; i++){\r\n        saveData.treeVertex[i - saveData.packages.length].renderKey = folderKeyMap[i].newKey;\r\n        saveData.treeVertex[i - saveData.packages.length].parentRenderKey = folderKeyMap[i].newParentKey;\r\n\r\n        saveData.dTreeVertex[i - saveData.packages.length].renderKey = folderKeyMap[i].newKey;\r\n        saveData.dTreeVertex[i - saveData.packages.length].parentRenderKey = folderKeyMap[i].newParentKey;\r\n    }\r\n\r\n    //assign the new keys to vertex's and arrows\r\n\r\n    \r\n\r\n\r\n\r\n\r\n    //recreat vertex/arrow objects as in load()\r\n\r\n    //models,folders,tree verts need to be added to current data\r\n    //vertex's and arrows add to current data\r\n    //set the new currentkeys and currentmodels\r\n    //update arrows drawall\r\n     \r\n\r\n return;\r\n}\r\n\r\n//Loads saveData in memory (not from json string)\r\nfunction loadDirect(saveData){\r\n\r\n    setTranslationColumns(saveData.translationColumns)\r\n    setFolderData(saveData.packages);\r\n    setDecoyFolderData(saveData.dPackages);\r\n    setVertexData(saveData.treeVertex);\r\n    setDecoyVertexData(saveData.dTreeVertex);\r\n    setModelData(saveData.graph)\r\n    setDecoyModelData(saveData.dGrraph)\r\n    setTreeData(saveData.tree)\r\n    setTotalRenderKey(saveData.renderKeys)\r\n    setTotalModelKeys(saveData.modelKeys)\r\n    setCurrentObjects(new Graph(saveData.vertices, saveData.arrows));\r\n    updateArrows()\r\n    setSelectedFolderKey(saveData.currentFol)\r\n    setNewRenderKey(saveData.currentKey)\r\n    setNewModel(saveData.currentMod)\r\n    drawAll()\r\n\r\n}\r\n\r\n// index 0 is the most recent change\r\nlet saveStates = []\r\nlet currentState = 0\r\n//Save states limit as its all stored in memeory (save states are relativley small though and only scale to be a few kilobytes per object though)\r\nlet maxSavedStates = 10; //Could probably get away with a limit in the range of 20-50 for really large model \"depositories\"\r\n\r\nexport function getsaveStates(){\r\n    return saveStates;\r\n}\r\n\r\n\r\nexport function createSaveState(){\r\n\r\n    //This line is needed as some of the variables in saveData\r\n    let newData = Object.assign({}, getSaveData());\r\n    //Remove everything infront of the current state if not most recent eg. When the user has hit undo and then does an action\r\n    if(currentState !== 0){\r\n        for(let i = 0; i < currentState; i++){\r\n            saveStates.shift()\r\n        }\r\n        currentState = 0;\r\n    }\r\n    //push the chnage to saveStates and remove the oldest state if above threshold\r\n    saveStates.unshift(newData)\r\n    if(saveStates.length > maxSavedStates){\r\n        saveStates.pop()\r\n    }\r\n    console.log('end')\r\n    console.log(saveStates)\r\n}\r\n\r\n//I beleive the first part of the if statement can be deleted as part 2 covers it ie.there will never be 11 savestates, but havent tested yet\r\nexport function undo(){\r\n    if(currentState < (maxSavedStates - 1) && saveStates[currentState + 1] !== undefined && saveStates.length !== 0){\r\n        currentState ++\r\n        loadDirect(saveStates[currentState])\r\n    }\r\n    console.log(currentState)\r\n}\r\n\r\nexport function redo(){\r\n    if(currentState > 0 && saveStates.length !== 0){\r\n        currentState --\r\n        loadDirect(saveStates[currentState])\r\n    }\r\n    console.log(currentState)\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\n\r\nimport React from 'react';\r\nimport TreeView from 'react-simple-jstree';\r\n\r\n\r\n\r\n\r\nimport { currentObjects, getModelName, getCurrentRenderKey, setNewRenderKey, \r\n    getTotalRenderKeys, incrementTotalRenderKeys, \r\n    getCurrentModel, setNewModel, getTotalModels, incrementTotalModels, decreaseTotalModels, decreaseTotalRenderKeys, deleteElement, getCurrentObjects} from \"./CanvasDraw\";\r\n\r\nimport { drawAll } from \"./CanvasDraw\";\r\nimport {VertexNode} from \"../DataStructures/Graph.js\"\r\nimport { ContactsOutlined } from '@material-ui/icons';\r\nimport { LeftMenu, LeftMenuType } from './LeftMenu';\r\nimport { MainProgramClass } from './MainView';\r\nimport { SemanticIdentity } from \"../DataStructures/SemanticIdentity.js\";\r\nimport { createSaveState } from '../Serialisation/NewFileManager';\r\n//import { remove,toTreeViewElement } from \"../DataStructures/Graph\";\r\n//import { ContactsOutlined, Remove } from '@material-ui/icons';\r\n\r\n\r\n//import {currentRenderKey} from './CanvasDraw';\r\n\r\n// I need to export this so I can access it in the left menu and then set it to the correct vertex;\r\nexport var someVertexPath = \"\";\r\n\r\nlet focussed = false; //leftover from a depricated feature, should always be false until removed fully- Lachlan\r\nlet currentlySelectedObject = null; //The currently selected object\r\n//let lastSelectedObject = null; // The last selected object\r\n\r\nlet showingVertPath = false;\r\n\r\n// You could probably get away with not including this here, but it just makes it easier to access the tree\r\n// data from any function you like. It still needs to be emptied in the constructor though\r\nlet treeData = [];\r\n\r\n// I need this to store the folders. Initially, it has one folder simply titled 'Unnamed Folder'.\r\nexport let folderData = [];\r\n\r\n// used to store Vertex objects in tree data (Used to create the vertex objects in CanvasDraw/currentObjects)\r\nexport let vertexData = [];\r\nlet decoyVertexData = [] //here because of how old team did folder indexing\r\n\r\n//used as a container to seperate \"root\" folders and subfolders so that only the root folders are pushed to root.children in the constructor - Lachlan\r\nlet folderDataRoot = [];\r\n\r\n//This variable will be used to store the \"selected folder\" for creating new folders or models\r\n// As renderKey is tied too many methods related to syncing data between canvas and tree/ creating data in tree control of the current renderkey \r\n//has been taken away from the user and will always be set to the parent folder of the selected model (this happens in elementSelect on a model click) - Lachlan\r\nlet selectedFolderKey = 0;\r\n\r\n// This is to do with getting the data indexing to be\r\nlet decoyFolderData = [];\r\n\r\n// An array for holding model names\r\nexport let modelObjects = [];\r\n\r\nlet decoyModelObjects = []; // doing the same data referencing as folder data because currently the data being referenced in the models is the model beforehand which\r\n                            // i dont tink is intended. - cooper\r\n\r\nlet folderAltered = false;\r\nlet modelAltered = false;\r\nlet vertexAltered = false //not sure if I need this? but leaving here for now incase I do need it referenced somewhere since folder andm odels have it -Lachlan\r\n\r\n// created a boolean which whill tell the leftmenu that the containment tree needs to update\r\nexport var treeNeedsUpdate = 0;\r\n\r\n\r\n\r\nexport function setSelectedFolderKey(newKey){\r\n    selectedFolderKey = newKey;\r\n}\r\n\r\nexport function getSelectedFolderKey(){\r\n    return selectedFolderKey;\r\n}\r\n\r\nexport function getTreeData(){\r\n    return treeData;\r\n}\r\n\r\nexport function setTreeData(newTreeData){\r\n    treeData = newTreeData;\r\n}\r\n\r\nexport function getFolderData(){\r\n    return folderData;\r\n}\r\n\r\nexport function setFolderData(newFolderData){\r\n    folderData = newFolderData;\r\n}\r\n\r\nexport function getDecoyFolderData(){\r\n    return decoyFolderData\r\n}\r\n\r\nexport function setDecoyFolderData(newData){\r\n    decoyFolderData = newData;\r\n}\r\n\r\nexport function getVertexData(){\r\n    return vertexData;\r\n}\r\n\r\nexport function setVertexData(newData){\r\n    vertexData = newData;\r\n}\r\n\r\nexport function getDecoyVertexData(){\r\n    return decoyVertexData\r\n}\r\n\r\nexport function setDecoyVertexData(newData){\r\n    decoyVertexData = newData;\r\n}\r\n\r\n//returns a concated array of the folders and vertex(containers)\r\nexport function getContainerData(){\r\n    return folderData.concat(vertexData);\r\n}\r\n\r\nexport function getModelData(){\r\n    return modelObjects;\r\n}\r\n\r\nexport function setModelData(newData){\r\n    modelObjects = newData;\r\n}\r\nexport function getDecoyModelData(){\r\n    return decoyModelObjects;\r\n}\r\nexport function setDecoyModelData(newData){\r\n    decoyModelObjects = newData;\r\n}\r\n\r\n//This function is used to load the first available model and canvas from the modelObjects array\r\n//Used to fix thye tree/canvas desync bug when deleting - Lachlan\r\nfunction loadFirstModel(){\r\n    //set selected model/render key to the 1st available as so a canvas isnt loaded for a nonexistant model\r\n    // if there is atleast one or more items inside of modelObjects set the renderkey to the first object, else set the renderkey and model keys to 1.\r\n    console.log(\"below is modelObjects\")\r\n    console.log(modelObjects)\r\n    if(modelObjects.length > 0){\r\n        setNewRenderKey(modelObjects[0].data.renderKey)\r\n        setNewModel(modelObjects[0].data.modelKey)\r\n        setSelectedFolderKey(modelObjects[0].data.renderKey)\r\n    }\r\n    else{\r\n        setNewRenderKey(1)\r\n        setNewModel(-1)\r\n        setSelectedFolderKey(1)\r\n    }\r\n\r\n    //taken from handleElementSelect for loading the new models canvas\r\n    for (let item of currentObjects.flatten()){\r\n        if (item.typeName === \"Vertex\" && item.getModelKey() === getCurrentModel()){\r\n            item.setPresent();\r\n        }\r\n        else if (item.getModelKey() !== getCurrentModel() && item.typeName === \"Vertex\"){\r\n            item.setAway();\r\n        }\r\n    }\r\n    drawAll()\r\n    \r\n}\r\n\r\n\r\n//parent key is for dictating subfolders where 0 is root, else pKey is a folder renderKey - Lachlan\r\nexport function handleAddFolder(folderName, parentKey = 0){\r\n    //Create a new folder using the known node type\r\n\r\n    incrementTotalRenderKeys();\r\n\r\n    let tempFolderThing = {\r\n        text: folderName + \" 📁\", //If icon is changed, youll have to change the folder icon in context menu too\r\n        children: treeData[getTotalRenderKeys()],\r\n        data: NaN,\r\n        state: {opened: true},\r\n        type: \"Folder\",\r\n        typeName: \"Folder\",\r\n        renderKey: getTotalRenderKeys(),\r\n        parentRenderKey: parentKey\r\n    }\r\n\r\n    decoyFolderData.push(tempFolderThing)\r\n\r\n    let folderThing2 = {\r\n        text: folderName + \" 📁\", //If icon is changed, youll have to change the folder icon in context menu too\r\n        children: treeData[getTotalRenderKeys()],\r\n        data: decoyFolderData[folderData.length],\r\n        state: {opened: true},\r\n        type: \"Folder\",\r\n        typeName: \"Folder\",\r\n        renderKey: getTotalRenderKeys(),\r\n        parentRenderKey: parentKey\r\n    }\r\n    \r\n    //console.log(\"theActualData: \" + folderData.length)\r\n    folderData.push(folderThing2);\r\n    //console.log(\"Folder data apparent: \" + folderData[folderData.length-1].data)\r\n    //console.log(folderData)\r\n    //console.log(folderThing2.renderKey)\r\n\r\n    folderAltered = true;\r\n    \r\n}\r\n\r\n// Function to remove a folder in the tree\r\nexport function handleDeleteFolder(selectedRenderKey){ // changing the deleting functions to delete based on renderkey & modelkeys - cooper\r\n    console.log(\"below is the selected render key\")\r\n    console.log(selectedRenderKey)\r\n    if(folderData.length > 1){ //cannot delete folder if it is the only one excluding root - Lachlan\r\n        for (let i = 0; i < folderData.length; i++){\r\n            if (folderData[i].renderKey === selectedRenderKey){\r\n                console.log(\"below is folderdata\")\r\n                console.log(folderData)\r\n                deleteFolderChildren(folderData[i]);\r\n                decoyFolderData.splice(i,1); // have to delete from this array as well because this is where folders obtain the data of themselves \r\n                folderData.splice(i,1); \r\n            }\r\n        }\r\n    \r\n    folderAltered = true;\r\n    }\r\n    else{console.log(\"Cannot delete only folder\")}\r\n    \r\n    loadFirstModel()\r\n}\r\n\r\nfunction deleteFolderChildren(selectedFolder){ // function for deleting all the children of a folder.\r\n    let folderChildren = selectedFolder.children;\r\n    for (let i = 0; i < folderChildren.length; i++){\r\n        if (folderChildren.type === \"Folder\"){\r\n            let selectedRenderKey = folderChildren[i].renderKey;\r\n            handleDeleteFolder(selectedRenderKey);\r\n\r\n        }\r\n        else if (folderChildren.type === \"Model\"){\r\n            let selectedModelKey = folderChildren[i].modelKey;\r\n            handleDeleteModel(selectedModelKey);\r\n        }\r\n    }\r\n}\r\n\r\nfunction deleteModelChildren(selectedModel){ // function for deleting all the children of the model.\r\n    if(selectedModel.children.length > 0){\r\n        let verticesFolder = selectedModel.children;\r\n        for (let i = 0; i < verticesFolder.length; i++){ // had to make a nested for loop due to the encompassing 'vertices' folder\r\n            let vertices = verticesFolder[i].children;\r\n            for (let v = 0; v < vertices.length; v++){\r\n                if (vertices[v].modelkey === selectedModel.modelKey){\r\n                    let chosenObject = vertices[v].data\r\n                    deleteElement(chosenObject);\r\n                }\r\n            }    \r\n        }\r\n    }   \r\n}\r\n\r\n\r\nexport function handleRenameFolder(newName,rKey){\r\n    if(newName !== \"\"){\r\n        for (let i = 0; i < folderData.length; i++){\r\n            if (folderData[i].renderKey === rKey){\r\n                folderData[i].text = newName + \" 📁\";\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        console.log(\"Cannot have empty name\")\r\n    }\r\n}\r\n\r\nexport function handleAddVertex(vertexName, parentKey = 0){\r\n    //Create a new folder using the known node type\r\n\r\n    incrementTotalRenderKeys();\r\n    let sID = new SemanticIdentity(vertexName,\"\",\"\",\"\", undefined ,[])\r\n\r\n    let tempVertexThing = {\r\n        text: vertexName + \" 🟧\", //If icon is changed, youll have to change the folder icon in context menu too\r\n        children: treeData[getTotalRenderKeys()],\r\n        data: NaN,\r\n        state: {opened: true},\r\n        type: \"treeVertex\",\r\n        typeName: \"VertexNode\",\r\n        originalVertex: true,\r\n        renderKey: getTotalRenderKeys(),\r\n        parentRenderKey: parentKey,\r\n        content: \"content\",\r\n        colour: \"#FFD5A9\",\r\n        height: 50,\r\n        width: 70,\r\n        icons: [[],[],[]],\r\n        imageElements: {},\r\n        fontSize: 12,\r\n        semanticIdentity: sID\r\n    }\r\n\r\n    decoyVertexData.push(tempVertexThing)\r\n\r\n    let vertexThing2 = {\r\n        text: vertexName + \" 🟧\", //If icon is changed, youll have to change the folder icon in context menu too\r\n        children: treeData[getTotalRenderKeys()],\r\n        data: decoyVertexData[vertexData.length],\r\n        state: {opened: true},\r\n        type: \"treeVertex\",\r\n        typeName: \"VertexNode\",\r\n        originalVertex: true,\r\n        renderKey: getTotalRenderKeys(),\r\n        parentRenderKey: parentKey,\r\n        content: \"\",\r\n        colour: \"#FFD5A9\",\r\n        height: 50,\r\n        width: 70,\r\n        icons: [[],[],[]],\r\n        imageElements: {},\r\n        fontSize: 12,\r\n        semanticIdentity: sID\r\n    }\r\n    \r\n\r\n    vertexData.push(vertexThing2);\r\n    //console.log(vertexData)\r\n\r\n    vertexAltered = true;\r\n\r\n    return vertexThing2\r\n    \r\n}\r\n\r\n\r\n\r\n// Added optional parameter render key, atm used to handle create a model with no folder selected - Lachlan\r\n//initial \"children\" are to prevent erros caused by children initialy not being iterable - Lachlan\r\nexport function handleAddModel(modelName, rKey=getSelectedFolderKey(), semanticID=undefined){\r\n    incrementTotalModels();\r\n    let sID = undefined;\r\n    let icon = \" 📈\"; //If icon is changed, youll have to change toe folder icon in context menu too\r\n    \r\n    if (semanticID !== undefined){\r\n        sID = semanticID;\r\n        icon = \" ⛶\"; //If icon is changed, youll have to change toe folder icon in context menu too\r\n    } else {\r\n        sID = new SemanticIdentity(modelName,\"\",\"\",\"\", undefined ,[]);\r\n    }\r\n\r\n    if(rKey <= 0) return //stops the creation of models in the root or otherwise non-existent folders\r\n    \r\n    let decoyModelThing = {\r\n        text: modelName + icon,\r\n        children: [],\r\n        data: NaN,\r\n        state: {opened: true},\r\n        type: \"Model\",\r\n        typeName: \"Model\",\r\n        renderKey: rKey,\r\n        modelKey: getTotalModels(),\r\n        semanticIdentity: sID\r\n    }\r\n    decoyModelObjects.push(decoyModelThing);\r\n\r\n\r\n    let tempModelThing = {\r\n        text: modelName + icon,\r\n        children: [],\r\n        data: decoyModelObjects[modelObjects.length],\r\n        state: {opened: true},\r\n        type: \"Model\",\r\n        typeName: \"Model\",\r\n        renderKey: rKey,\r\n        modelKey: getTotalModels(),\r\n        semanticIdentity: sID\r\n    };\r\n \r\n    modelObjects.push(tempModelThing);\r\n    //console.log(modelObjects)\r\n\r\n    modelAltered = true;\r\n\r\n\r\n}\r\n\r\nexport function handleDeleteVertex(selectedUUID){\r\n    for(let vertex of currentObjects.flatten()){\r\n        if(vertex.originalUUID === selectedUUID){\r\n            currentObjects.remove(vertex)\r\n        }\r\n    }\r\n    for(let i = 0; i < vertexData.length; i++){\r\n        if(vertexData[i].semanticIdentity.UUID === selectedUUID){\r\n            vertexData.splice(i, 1)\r\n            decoyVertexData.splice(i, 1)\r\n        }\r\n    }\r\n    drawAll();\r\n}\r\n\r\nexport function handleDeleteModel(selectedModelKey){\r\n\r\n\r\n    for (let i = 0; i < modelObjects.length; i++){\r\n        if (modelObjects[i].modelKey === selectedModelKey){\r\n            console.log(\"model deleted below\")\r\n            console.log(modelObjects[i])\r\n            deleteModelChildren(modelObjects[i]);\r\n            modelObjects.splice(i, 1);\r\n            decoyModelObjects.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    loadFirstModel()\r\n}\r\n\r\nexport function handleRenameModel(newName,mKey){\r\n    for (let i = 0; i < modelObjects.length; i++){\r\n        if (modelObjects[i].modelKey === mKey){\r\n            modelObjects[i].text = newName + \" 📈\";\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getModelRenderKey(selectedModelKey){ // this function is to fetch the renderkey of the selected model to ensure verticies get created with the correct renderkey -- cooper\r\n    for(let i = 0; i < modelObjects.length; i++){\r\n        if (modelObjects[i].modelKey === selectedModelKey){\r\n            return modelObjects[i].renderKey\r\n        }\r\n    }\r\n}\r\n\r\n//Function for changing the parent folder of a model - Lachlan\r\nexport function handleModelRebase(mKey,newRkey){\r\n    console.log(\"Rebase test\")\r\n    console.log(modelObjects)\r\n    for(let model of modelObjects){\r\n        if(model.modelKey === mKey){\r\n           for(let objectFolders of model.children){  \r\n                let objects = objectFolders.children\r\n                for(let object of objects){\r\n                    object.renderkey = newRkey;\r\n                    if(object.data.typeName === \"Vertex\"){\r\n                    object.data.vertexRenderKey = newRkey;\r\n                    }\r\n                    else{\r\n                    object.data.arrowRenderKey = newRkey;\r\n                    }\r\n                }\r\n            } \r\n            console.log(model)\r\n            model.renderKey = newRkey;\r\n            console.log(model)\r\n        }\r\n    }\r\n    console.log(modelObjects)\r\n    treeNeedsUpdate = 1;\r\n    createSaveState();\r\n}\r\n\r\n\r\n\r\n// This is a function to display the path of a given vertex\r\n// It's called in the left menu of a vertex\r\nexport function showVertexPath(theObject){\r\n\r\n    if (currentObjects.flatten().length > 0){\r\n        currentlySelectedObject = theObject;\r\n        if (showingVertPath === false){\r\n            showingVertPath = true;\r\n\r\n        }\r\n    \r\n        else if (showingVertPath === true){\r\n            showingVertPath = false;\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// This function is used to determine which object should be owned by which folder object.\r\n// Works by taking a look at the children of the treeData array and seeing if their render \r\n// key matches the one parsed to the function\r\nfunction determineOwnership(parsedRenderKey){\r\n    let returnArray = []\r\n    let i = 0\r\n    for (let vertexOrArrow of treeData){\r\n        if(vertexOrArrow !== undefined){\r\n            //console.log(\"treeData object name: \" + vertexOrArrow.text)\r\n\r\n            if (vertexOrArrow.type === \"Model\"){\r\n                if (vertexOrArrow.renderKey === parsedRenderKey){\r\n                    returnArray.push(treeData[i])\r\n                }\r\n                \r\n            }\r\n/*\r\n            for (let child of vertexOrArrow.children){\r\n                // Check if the render key of the child matches \r\n                if (child.renderKey === parsedRenderKey){\r\n                    //console.log(\"Matched tree data: \" + treeData[i])\r\n                    returnArray.push(treeData[i])\r\n                    break\r\n                }\r\n            }\r\n            */\r\n        }\r\n        i += 1\r\n    }\r\n\r\n    return returnArray\r\n}\r\n\r\n//function used for determineing which folders are owned by a higher folder - Lachlan\r\nfunction determineSubFolders(parsedRenderKey){\r\n    let returnArray = []\r\n    for (let folder of getContainerData()){\r\n        if(folder.parentRenderKey === parsedRenderKey)\r\n        returnArray.push(folder)\r\n    }\r\n    //console.log(\"subfolder return\")\r\n    //console.log(returnArray)\r\n    return returnArray\r\n}\r\n\r\nexport function getModelNameFromKey(key){\r\n    let model = modelObjects.find(model => model.modelKey === key)\r\n    return model.text\r\n}\r\n\r\nexport function getFolderNameFromKey(key){\r\n    let folder = getContainerData().find(folder => folder.renderKey === key)\r\n    return folder.text\r\n}\r\n\r\n\r\n\r\nlet initialFolderAdded = false;\r\nexport class ContainmentTree extends React.Component {\r\n\r\n    componentDidMount() {\r\n        document.getElementById(\"LowerPanel\").addEventListener('dragstart', this.dragStart);\r\n    }\r\n    componentDidUpdate(){\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        document.getElementById(\"LowerPanel\").removeEventListener('dragstart', this.dragStart);\r\n    }\r\n\r\n    dragStart(e) {\r\n        //console.log(e)\r\n        //When we have a better method of getting data without the click, Use the new method to assign the data value - Lachlan\r\n        e.target.click();\r\n        let vertData = 0;\r\n        for(let folder of getContainerData()){\r\n            if(getSelectedFolderKey() === folder.renderKey)\r\n            vertData = folder;\r\n        }\r\n\r\n        let data = vertData;\r\n        console.log('drag starts...');\r\n        //Prevents errors when a folder or model is dragged etc. \r\n        if(vertData.type === \"treeVertex\"){\r\n        e.dataTransfer.setData('text/plain',data.semanticIdentity.UUID)\r\n        //console.log(data.semanticIdentity.UUID)\r\n        }\r\n        else{\r\n            console.log(\"This object has no drag/drop feature\")\r\n        }\r\n     }\r\n    \r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        treeData = []; \r\n        //let i = 0;\r\n        //console.log(\"props\")\r\n        //console.log(props)\r\n        \r\n\r\n        \r\n        if (initialFolderAdded === false){\r\n            handleAddFolder(\"Package\");\r\n            //The initial folder has render key 1, the initial model needs this to be specified as nothing is selected\r\n            handleAddFolder(\"Package 2\")\r\n            handleAddModel(\"Graph\",1) \r\n            handleAddModel(\"Graph 2\",2)\r\n            handleAddFolder(\"Subfolder\",1)\r\n            handleAddVertex(\"Vertex\",1)\r\n            handleAddVertex(\"Vertex 2\",2)\r\n            setNewRenderKey(1);\r\n            setNewModel(1);\r\n            setSelectedFolderKey(1);\r\n            initialFolderAdded = true;\r\n            createSaveState();\r\n        }\r\n        \r\n\r\n            // Push the model objects in. --- I moved the position of these for loops outside of the vertex for loop as it was creating a few problems - cooper\r\n        for (let model of modelObjects){\r\n            treeData.push(model);           \r\n            \r\n        }\r\n        for (let folder of getContainerData()){ // this for loop is to define the ownership of the models - cooper\r\n                //folder.children = determineOwnership(folder.renderKey)  \r\n                //folder.children = determineSubFolders(folder.renderKey)\r\n                let canvasItems = determineOwnership(folder.renderKey) \r\n                let subFolderItems = determineSubFolders(folder.renderKey)\r\n                let combinedItems = canvasItems.concat(subFolderItems)\r\n                //console.log(\"test\")\r\n                //console.log(\"treedata\");\r\n                //console.log(treeData);\r\n                //console.log(combinedItems)\r\n                folder.children = combinedItems;\r\n                \r\n\r\n            }\r\n            //console.log(getContainerData())\r\n               // treeData.push(vertex.toTreeViewElement(new Set())); --- not too sure what the point of this .push was - cooper   \r\n            \r\n        for (let folder of getContainerData()){ // this for loop is to define the ownership of the vertices & arrows - cooper\r\n            let vertex = new VertexNode() \r\n            \r\n            //Disableing canvas vertex's appearing in treeview - Lachlan\r\n            /*\r\n            if (vertex.toTreeViewElement(\"Vertex Folder\", folder.renderKey) !== undefined){ // modelkey is redundant now for storing things in treeview \r\n                //console.log(\"a vertexorarrow: \",vertex)                                                                           // as things need to be stored under the folder - cooper\r\n                folder.children.push(vertex.toTreeViewElement(\"Vertex Folder\", folder.renderKey))\r\n            }\r\n            */\r\n\r\n            if (vertex.toTreeViewElement(\"Arrow Folder\", folder.renderKey) !== undefined){\r\n                 //console.log(\"a vertexorarrow: \",vertex)\r\n                folder.children.push(vertex.toTreeViewElement(\"Arrow Folder\", folder.renderKey))\r\n            }  \r\n            \r\n        }\r\n\r\n        for(let vert of getVertexData()){\r\n            //console.log(vert.children)\r\n            if(vert.children.length === 0){\r\n                vert.text = vert.text.replace(\" 🟧\",\"\");\r\n                vert.text = vert.text.replace(\" 📂\",\"\");\r\n                vert.text = vert.text + \" 🟧\"\r\n            }\r\n            else{\r\n                vert.text = vert.text.replace(\" 🟧\",\"\");\r\n                vert.text = vert.text.replace(\" 📂\",\"\");\r\n                vert.text = vert.text + \" 📂\"\r\n            }\r\n        }\r\n\r\n        folderDataRoot = [];\r\n        for (let folder of getContainerData()){\r\n            if(folder.parentRenderKey ===0){\r\n                folderDataRoot.push(folder)\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n            \r\n            \r\n            //console.log(currentObjects);\r\n            //console.log(treeData);\r\n            //console.log(currentObjects.flatten())\r\n        \r\n\r\n        \r\n        \r\n        this.state = {\r\n            data: {\r\n                core: {\r\n                    data: [\r\n                        { text: getModelName(), \r\n                        children: folderDataRoot, state: { opened: true }, \r\n                        root: true},\r\n                    ]\r\n                }\r\n            },\r\n            selectedVertex: null\r\n        }\r\n\r\n\r\n\r\n        if(showingVertPath === true){\r\n            /*\r\n            let highestLevel = getModelName();\r\n            let nextLevel = \"\";\r\n            let vertexOrEdge = \"\";\r\n            let actualObject = \"\";\r\n        \r\n            let b = 0;\r\n            //First, we need to actually determine where the vertex is\r\n            //Take a look at our container\r\n            for (let cont of folderData){\r\n                //Take a look at the children of the containers (arrows and such)\r\n                for (let treeDat of cont.children){\r\n                    //Why is the vertex folder coming up as undefined?????\r\n                    if(b === 0){\r\n                        //console.log(\"SECOND LAYER: \" + treeDat.children);\r\n                        for (let treeElement of treeDat.children){\r\n                            if ((treeElement.text === currentlySelectedObject.title || currentlySelectedObject.title === \"Unnamed Vertex\")){\r\n        \r\n                                nextLevel = cont.text;\r\n        \r\n                                vertexOrEdge = \"Vertices\";\r\n        \r\n                                actualObject = currentlySelectedObject.title;\r\n                            }\r\n                        }\r\n                        b = 1;\r\n                    }\r\n                    \r\n                }\r\n                someVertexPath = highestLevel +\"::\"+ nextLevel +\"::\"+ vertexOrEdge +\"::\"+ actualObject;\r\n            }\r\n            */\r\n\r\n            let highestLevel = getModelName();\r\n            let nextLevel = \"\";\r\n            let vertexOrEdge = \"\";\r\n            let actualObject = \"\";\r\n\r\n            let b = 0;\r\n            //First, we need to actually determine where the vertex is\r\n            //Take a look at our container\r\n            for (let cont of getContainerData()){\r\n                //console.log(\"below is folderData\")\r\n                //console.log(getContainerData())\r\n                //console.log(\"This is active test \". cont)\r\n                //console.log(\"folder text: \" + cont.text)\r\n                //Take a look at the children of the containers (arrows and such)\r\n                for (let treeDat of cont.children){\r\n                    //console.log(\"below is treeDat\")\r\n                    //console.log(treeDat)\r\n                    //console.log(\"treeDat text: \" + treeDat.text) \r\n                    //console.log(\"num of rkeys is:\", getTotalRenderKeys())\r\n                    //console.log(folderData)\r\n                    //Why is the vertex folder coming up as undefined?????\r\n                    //console.log(cont.children)\r\n                    if(b === 0){\r\n                        //console.log(\"SECOND LAYER: \" + treeDat.children);\r\n                        for (let treeElement of treeDat.children){\r\n                            //console.log(\"Vertices text: \" + treeElement)\r\n                                if ((treeElement.text === currentlySelectedObject.title)){\r\n                                    \r\n                                    nextLevel = cont.text;\r\n                                    \r\n                                    vertexOrEdge = \"Vertices\"\r\n                                    \r\n                                    actualObject = currentlySelectedObject.title\r\n\r\n                                    someVertexPath = highestLevel +\"::\"+ nextLevel +\"::\"+ vertexOrEdge +\"::\"+ actualObject;\r\n                                    b = 1;\r\n\r\n                                \r\n                                }\r\n\r\n                        }\r\n                        \r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        if (folderAltered === true){\r\n\r\n           // this.forceUpdate()\r\n\r\n            folderAltered = false\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //Function called when an object in treeview is clicked\r\n    handleElementSelect(e, data) {\r\n\r\n\r\n\r\n        //console.log(\"Selected Length: \" + data.selected.length)\r\n\r\n        // Try catch used to catch error whe selecting a treeview item with no data type eg. root\r\n        \r\n        try{\r\n\r\n            console.log(data.node.data)\r\n            //console.log(\"Selected Data 1: \" + data.node.data)\r\n            //console.log(\"Selected type 1: \" + data.node.original.type)\r\n            //console.log(\"Selected text 1: \" + data.node.text)\r\n            //console.log(data.node)\r\n            //console.log(\"Selected Type 2: \" + data.node.data.type)\r\n            //console.log(\"Selected Name 2: \" + data.node.data.text)\r\n            //console.log(folderData);\r\n            //console.log(data.node.data)\r\n\r\n            \r\n\r\n            if(data.node.type === \"Vertex Folder\"){\r\n                //console.log(\"You clicked a vertex folder\")\r\n            }\r\n\r\n            else if(data.node.data.type === \"Folder\" || data.node.data.type === \"treeVertex\" ){\r\n                //console.log(\"Clicked Folder: \" + data.node.data.text)\r\n                //setNewRenderKey(data.node.data.renderKey)\r\n                setSelectedFolderKey(data.node.data.renderKey)\r\n                \r\n\r\n                //console.log(\"The render key is now \" + data.node.data.renderKey);\r\n\r\n\r\n            }\r\n\r\n            else if (data.node.data.type === \"Model\"){\r\n                //console.log(\"The selected model is: \" + data.node.data.text)\r\n                //console.log(\"The current folder is: \" + data.node.data.renderKey)\r\n                setNewModel(data.node.data.modelKey);\r\n                //console.log(\"The model key is now \" + getCurrentModel()); // there were issues here with camelCasing causing no modelKey to be selected- cooper\r\n                //setNewRenderKey(data.node.data.renderKey)\r\n                setNewRenderKey(data.node.data.renderKey); // automatically sets the renderkey to be the same as the models as this was causing issues - cooper\r\n                setSelectedFolderKey(data.node.data.renderKey)\r\n                //console.log(\"The render key is now \" + data.node.data.renderKey);\r\n                // Move everything away\r\n                for (let item of currentObjects.flatten()){\r\n                    if (item.typeName === \"Vertex\" && item.getModelKey() === getCurrentModel()){\r\n                        //console.log(\"Item is set as present\")\r\n                        item.setPresent();\r\n                    }\r\n\r\n                    else if (item.getModelKey() !== getCurrentModel() && item.typeName === \"Vertex\"){\r\n                        //console.log(\"Item is sent away\")\r\n                        item.setAway();\r\n                        //console.log(\"The item to not be rendered is\" + item.typeName);\r\n                    }\r\n                }\r\n            }\r\n            \r\n        //console.log(\"The data is: \" + data.node.data);\r\n\r\n            else if (data.selected.length === 1 && data.node.data !== null && data.node.data.type === undefined) {\r\n                let UUID = data.node.data.semanticIdentity.UUID;\r\n                //console.log(\"UUID: \" + UUID)\r\n                for (let vertex of currentObjects.flatten()) {\r\n                    if (vertex.semanticIdentity.UUID === UUID) {\r\n                        //setNewRenderKey(vertex.getRenderKey())\r\n                        //setNewModel(vertex.getModelKey())\r\n                        this.setState({\r\n                            \r\n                            selectedVertex: vertex\r\n                        });\r\n\r\n                        //The following is required to change canvas to the selected vertex's model preventing desync issues of tree and canvas - Lachlan\r\n                    \r\n                        setNewRenderKey(vertex.vertexRenderKey);\r\n                        setNewModel(vertex.vertexModelKey); \r\n                        setSelectedFolderKey(vertex.vertexRenderKey)\r\n                        \r\n                        for (let item of currentObjects.flatten()){\r\n                            if (item.typeName === \"Vertex\" && item.getModelKey() === getCurrentModel()){\r\n                                item.setPresent();\r\n                            }\r\n                            else if (item.getModelKey() !== getCurrentModel() && item.typeName === \"Vertex\"){\r\n                                item.setAway();\r\n                            }\r\n                        }\r\n                    \r\n\r\n                        this.props.setLeftMenu(this.state.selectedVertex);\r\n\r\n                        // Set the current render key to whatever object the person has clicked from\r\n                        // the tree view\r\n                        \r\n                        //console.log(\"The old render key is: \" + currentRenderKey);\r\n                        //this.currentRenderKey = this.state.selectedVertex.getRenderKey();\r\n                        //console.log(\"The new render key is: \" + currentRenderKey);\r\n                        \r\n\r\n                        //currentRenderKey = 1; \r\n                        //console.log(\"Render old key is \" + getCurrentRenderKey());\r\n                        //setNewRenderKey(this.state.selectedVertex.getRenderKey());\r\n                        //console.log(\"The new render key is : \" + getCurrentRenderKey());\r\n                        //currentRenderKey = 1;\r\n                        \r\n                        //console.log(\"The selected object is: \" + this.state.selectedVertex.getRenderKey())\r\n                    }\r\n                }\r\n                \r\n\r\n            } else {\r\n                this.setState({\r\n                    selectedVertex: null\r\n                });\r\n            }\r\n            \r\n\r\n            drawAll();\r\n        }\r\n        catch(e){\r\n            //console.log(e instanceof TypeError)\r\n            //console.log(\"If True,a null type error has been caught, If the selected object should be selectable, this is an issue\")\r\n        }\r\n\r\n        //If the user clicks the root folder       -Lachlan\r\n        try{\r\n            if(data.node.original.root === true){\r\n                //console.log(\"This is root\")\r\n                setSelectedFolderKey(0) //renderkey 0 will be used for root\r\n            }\r\n        }\r\n        catch(e){\r\n            //console.log(\"This is not root\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n    handleContextMenu(){\r\n        console.log(\"CM triggered for tree\")\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const data = this.state.data;\r\n        //console.log(treeData)\r\n        //console.log(data)\r\n        /*\r\n        if (this.state.selectedObject !== null){\r\n            console.log(\"The old render key is: \" + currentRenderKey);\r\n            currentRenderKey = this.state.selectedObject.getRenderKey();\r\n            console.log(\"The new render key is: \" + currentRenderKey);\r\n        }\r\n        */\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <TreeView treeData={data} onChange={(e, data) => this.handleElementSelect(e, data)} className=\"treeview\" id=\"treeview\" draggable=\"true\" />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { drawMarker, distanceThreshold, getCurrentRenderKey, getCurrentModel } from \"../UIElements/CanvasDraw\";\r\nimport { getModelRenderKey } from \"../UIElements/ContainmentTree\";\r\nimport { SemanticIdentity, createUUID } from \"./SemanticIdentity\";\r\nimport {serverURL} from \"../UIElements/MainView\"\r\n\r\nexport var padding = 5;\r\nexport var defaultColour = \"#FFD5A9\";\r\nexport var defaultMinimumSize = 30;\r\n\r\nexport class Vertex {\r\n\r\n    //As javascript doesnt have method overloading, newConstructor is used to access the secondary constructor when flagged 1 \r\n\r\n    //at some point change to use destructuring, which will require changing every use of this method to use destructing too\r\n    constructor({title = \"unnamed\", content, colour, x, y, width, height, semanticIdentity,newConstructor=0,loadedVertex=0}) {\r\n        console.log(newConstructor)\r\n\r\n        //This constructor is used to turn a vertex loaded from JSON.parse back into a vertex object\r\n        if(newConstructor === 1){\r\n            console.log(loadedVertex)\r\n\r\n            this.typeName = loadedVertex.typeName;\r\n            this.semanticIdentity = loadedVertex.semanticIdentity;\r\n            this.title = loadedVertex.title;\r\n            this.content = loadedVertex.content;\r\n            this.colour = loadedVertex.colour;\r\n            this.x = loadedVertex.x;\r\n            this.y = loadedVertex.y;\r\n            this.icons = loadedVertex.icons;\r\n            this.selected = false;\r\n            this.imageElements = loadedVertex.imageElement;\r\n            this.fontSize = 12;\r\n            this.orignalVertex = loadedVertex.orignalVertex;\r\n            this.originalUUID = loadedVertex.originalUUID; \r\n            this.Origin = loadedVertex.Origin; \r\n            this.width = loadedVertex.width;\r\n            this.height = loadedVertex.height;\r\n            this.realHeight = loadedVertex.realHeight;\r\n            this.isAbstract = loadedVertex.isAbstract;\r\n            this.vertexPath = loadedVertex.vertexPath;\r\n            this.vertexModelKey = loadedVertex.vertexModelKey;\r\n            this.vertexRenderKey = loadedVertex.vertexRenderKey;\r\n            this.renderedx = loadedVertex.renderedx;\r\n            this.renderedy = loadedVertex.renderedy;\r\n            this.awayx = loadedVertex.awayx;\r\n            this.awayy = loadedVertex.awayy;\r\n            this.status = loadedVertex.status;\r\n\r\n        }\r\n\r\n        else{\r\n            this.typeName = \"Vertex\";\r\n\r\n            if (semanticIdentity !== undefined){\r\n                this.semanticIdentity = semanticIdentity;\r\n            } else {\r\n                this.semanticIdentity = new SemanticIdentity(title,\"\",\"\",\"\", undefined ,[]);\r\n            }\r\n\r\n            this.title = title;\r\n\r\n\r\n            if(content === undefined){\r\n                this.content = \"\"\r\n            }\r\n            else{\r\n            this.content = content;\r\n            }\r\n\r\n            this.colour = colour\r\n            this.x = x;\r\n            this.y = y;\r\n            this.icons = [[],[],[]];\r\n            this.selected = false;\r\n            this.imageElements = {};\r\n            this.fontSize = 12;\r\n            this.orignalVertex = true; // bool to see if the selected vertex is the original\r\n            this.originalUUID = this.originalUUID // going to store the UUID of the original vertex here as canvas objects need to be given a unique semanticUUID \r\n            this.isContainer = false; //Ignore this now, Kieth explained how containers work after finishing old implementation, direction other team was going was wrong - Lachlan\r\n            this.Origin = \"\" //package the vertex originates from if needed\r\n    \r\n\r\n            // Note these values often change in runtime\r\n            this.width = width;\r\n            this.height = height;\r\n\r\n            this.realHeight = height;\r\n\r\n            // Make sure width and height meet a reasonable minimum\r\n            this.width = Math.max(width, defaultMinimumSize);\r\n            this.height = Math.max(height, defaultMinimumSize);\r\n\r\n            this.isAbstract = false;\r\n\r\n            //Store the path to your given vertex here\r\n            this.vertexPath = \"\";\r\n\r\n            // USed to decide where to render the object\r\n            this.vertexModelKey = getCurrentModel();\r\n\r\n            // Used to decide where the object goes in the tree\r\n            this.vertexRenderKey = getModelRenderKey(this.vertexModelKey);\r\n\r\n\r\n            // Used for moving vertices out of the way when they're not being rendered to prevent invisible overlap\r\n            this.renderedx = x;\r\n            this.renderedy = y;\r\n\r\n            this.awayx = Math.floor(Math.random() * 2000000)+100000;\r\n            this.awayy = Math.floor(Math.random() * 2000000)+100000;\r\n\r\n            this.status = \"present\"\r\n        }\r\n        \r\n    }\r\n\r\n    // Save a vertice's proper x and y coordinate for later rendering and then send the vertex somewhere else\r\n    setAway(){\r\n        if (this.status === \"present\"){\r\n            this.renderedx = this.x;\r\n            this.renderedy = this.y;\r\n\r\n            this.x = this.awayx;\r\n            this.y = this.awayy;\r\n\r\n            this.status = \"away\"\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    setPresent(){\r\n\r\n        if (this.status === \"away\"){\r\n            this.x = this.renderedx;\r\n            this.y = this.renderedy;\r\n\r\n            this.status = \"present\"\r\n        }\r\n        \r\n    }\r\n\r\n    setModelKey(key){\r\n        this.vertexModelKey = key;\r\n    }\r\n\r\n    getModelKey(){\r\n        return this.vertexModelKey;\r\n    }\r\n\r\n\r\n    getSemantic(){\r\n        return this.SemanticIdentity\r\n    }\r\n\r\n    setSemantic(newSem){\r\n        this.SemanticIdentity = newSem;\r\n    }\r\n\r\n    // Set the render key. Done in ContainmentTree.js\r\n    setRenderKey(key){\r\n        this.vertexRenderKey = key;\r\n    }\r\n\r\n    // Get the render key. Called in CanvasDraw.js\r\n    getRenderKey(){\r\n        return this.vertexRenderKey;\r\n    }\r\n\r\n    setPath(path){\r\n        this.vertexPath = path;\r\n    }\r\n\r\n    getPath(){\r\n        return this.vertexPath;\r\n    }\r\n\r\n    setSelected(selected) {\r\n        this.selected = selected;\r\n    }\r\n\r\n    getColour(){\r\n        return this.colour\r\n    }\r\n\r\n    setColour(colour){\r\n        this.colour = colour;\r\n    }\r\n\r\n    setTitle(title) {\r\n        this.title = title;\r\n        this.semanticIdentity.name = title;\r\n    }\r\n\r\n    setContent(content) {\r\n        this.content = content;\r\n        this.semanticIdentity.description = content;\r\n    }\r\n\r\n    getAbstract(){\r\n        return this.isAbstract\r\n    }\r\n\r\n    toggleAbstract(){\r\n        this.isAbstract = !this.isAbstract\r\n    }\r\n\r\n    setOrigin(newOrigin){\r\n        this.Origin = newOrigin;\r\n    }\r\n    getOrigin(){\r\n        return this.Origin;\r\n    }\r\n\r\n    getContentAsString() {\r\n        if (this.content !== null) {\r\n            let mergedContent = \"\";\r\n            \r\n            for (let i = 0; i < this.content.length; i++) {\r\n                mergedContent = mergedContent.concat(this.content[i]);\r\n                if (i < this.content.length - 1) {\r\n                    mergedContent = mergedContent.concat(\"\\n\");\r\n                }\r\n            }\r\n            \r\n            return mergedContent;\r\n\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    setIcon(fileName) {\r\n        let fileNames = this.icons[0];\r\n        let Icons = this.icons[1];\r\n        let Text = this.icons[2];\r\n\r\n        let index = fileNames.indexOf(fileName);\r\n\r\n        //icon not part of this vertex yet\r\n        if (index === -1) {\r\n            fileNames.push(fileName);\r\n            Icons.push(true);\r\n            Text.push(false);\r\n\r\n        } else {\r\n            Icons[index] = !Icons[index]\r\n        }\r\n\r\n        if (Text[index] === false && Icons[index] === false) {\r\n            Icons.splice(index,1);\r\n            Text.splice(index,1);\r\n            fileNames.splice(index,1);\r\n        }\r\n\r\n    }\r\n\r\n    setText(fileName) {\r\n        let fileNames = this.icons[0];\r\n        let icons = this.icons[1];\r\n        let text = this.icons[2];\r\n\r\n        let index = fileNames.indexOf(fileName);\r\n\r\n        //icon not part of this vertex yet\r\n        if (index === -1) {\r\n            fileNames.push(fileName);\r\n            icons.push(false);\r\n            text.push(true);\r\n\r\n        } else {\r\n            text[index] = !text[index]\r\n        }\r\n\r\n        if (text[index] === false && icons[index] === false) {\r\n            icons.splice(index,1);\r\n            text.splice(index,1);\r\n            fileNames.splice(index,1);\r\n        }\r\n\r\n    }\r\n\r\n    isIconSet(fileName) {\r\n        let index = this.icons[0].indexOf(fileName);\r\n        if (index === -1) {\r\n            return false;\r\n        }\r\n        return this.icons[1][index];\r\n    }\r\n\r\n    isTextSet(fileName) {\r\n            let index = this.icons[0].indexOf(fileName);\r\n            if (index === -1) {\r\n                return false;\r\n            } else {\r\n                return this.icons[2][index];\r\n            }\r\n    }\r\n\r\n    getBounds() {\r\n        return [this.x, this.y, this.x+this.width, this.y+this.realHeight-padding];\r\n    }\r\n\r\n    expandSide(side, x, y,canvasContext) {\r\n        let ex = 0;\r\n        let ey = 0;\r\n\r\n        let pad = (this.hasContent() ? padding*4 : padding*2);\r\n\r\n        switch (side) {\r\n            case \"topLeft\":\r\n                ey += this.y + this.height;\r\n                this.y = y;\r\n                this.height = ey-this.y;\r\n                ex += this.x + this.width;\r\n                this.x = x;\r\n                this.width = ex-this.x;\r\n                break;\r\n\r\n            case \"topRight\":\r\n                ey += this.y + this.height;\r\n                this.y = y;\r\n                this.height = ey-this.y;\r\n                this.width = x-this.x;\r\n                break;\r\n\r\n            case \"bottomLeft\":\r\n\r\n                this.height = y-this.y  - this.iconAreaHeight - this.contentHeight - pad;\r\n                ex += this.x + this.width;\r\n                this.x = x;\r\n                this.width = ex-this.x;\r\n                break;\r\n\r\n            case \"bottomRight\":\r\n\r\n                this.height = y - this.y - this.iconAreaHeight - this.contentHeight - pad;\r\n                this.width = x-this.x;\r\n                break;\r\n\r\n            case \"left\":\r\n                ex += this.x + this.width;\r\n                this.x = x;\r\n                this.width = ex-this.x;\r\n                break;\r\n\r\n            case \"right\":\r\n                this.width = x-this.x;\r\n                break;\r\n\r\n            case \"top\":\r\n                ey += this.y + this.height;\r\n                this.y = y;\r\n                this.height = ey-this.y;\r\n                break;\r\n\r\n            case \"bottom\":\r\n                this.height = y-this.y  - this.iconAreaHeight - this.contentHeight - pad;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        this.height = Math.max(this.height,12+padding);\r\n        this.draw(canvasContext)\r\n    }\r\n\r\n\r\n    increaseWidthIfNecessary(canvasContext, possibleWidth) {\r\n        if (possibleWidth > this.width) {\r\n            this.width = possibleWidth;\r\n        }\r\n\r\n    }\r\n\r\n    hasContent() {\r\n        return !(this.content[0] === \"\" && this.content.length === 1)\r\n    }\r\n\r\n\r\n    draw(canvasContext) {\r\n\r\n        // Icon height in px\r\n        let iconHeight = 20;\r\n        let iconPadding = 2;\r\n        let iconListLen = this.icons[0].length;\r\n\r\n        // check for width increases\r\n        for (let i = 0; i < this.icons[0].length; i++) {\r\n\r\n            if (this.icons[1][i] === true) {\r\n                if (this.icons[2][i] === true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, iconHeight + canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n            }else{\r\n                if (this.icons[2][i] === true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n            }\r\n        }\r\n        this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.title + this.Origin).width);\r\n\r\n        for (let i = 0; i < this.content.length; i++) {\r\n            this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.content[i]).width + padding*2);\r\n        }\r\n\r\n        // Font size\r\n        padding = 5;\r\n        // Set font settings\r\n        if(this.is)\r\n        canvasContext.font = this.fontSize+\"px Segoe UI\";\r\n        canvasContext.fontSize = this.fontSize;\r\n\r\n\r\n        // Find the maximum width of text and size the class accordingly\r\n        let measuredNameText = canvasContext.measureText(this.title + this.Origin).width;\r\n        let maxWidth = Math.max(measuredNameText + padding*2, this.width);\r\n        this.contentHeight = 0;\r\n\r\n        // Iterate over all content text lines\r\n        for (let i = 0; i < this.content.length; i++) {\r\n            let measuredText = canvasContext.measureText(this.content[i]);\r\n            maxWidth = Math.max(maxWidth, measuredText.width, measuredNameText);\r\n            this.contentHeight += this.fontSize+padding;\r\n        }\r\n\r\n        if(!this.hasContent()){\r\n            this.contentHeight = 0\r\n        }\r\n\r\n        if (maxWidth > this.width) {\r\n            this.width = maxWidth\r\n        }\r\n\r\n        // Configure drawing for shadows\r\n        // And generally make it look nice\r\n        canvasContext.shadowOffsetX = 2.0; canvasContext.shadowOffsetY = 2.0;\r\n        this.iconAreaHeight = (iconHeight + (iconPadding * 2)) * iconListLen;\r\n\r\n        // Update rect height\r\n        // Use this to force text to fit\r\n        if (this.content[0] !== \"\") {\r\n            this.realHeight = padding * 4 + this.height + this.iconAreaHeight + this.contentHeight;\r\n        }else{\r\n            this.realHeight = padding * 2 + this.height + this.iconAreaHeight\r\n        }\r\n\r\n        // Draw rect\r\n        \r\n        canvasContext.fillStyle = this.colour;\r\n        canvasContext.fillRect(this.x, this.y, this.width, this.realHeight);\r\n        canvasContext.strokeRect(this.x, this.y, this.width, this.realHeight);\r\n\r\n\r\n        if (this.content[0] !== \"\") {\r\n            canvasContext.strokeRect(this.x, this.y, this.width, this.height+this.iconAreaHeight+padding*2);\r\n        }\r\n\r\n        // Draw selected markers if rect is selected\r\n        if (this.selected) {\r\n            canvasContext.fillStyle = \"#000000\";\r\n            drawMarker(this.x, this.y);\r\n            drawMarker(this.x+this.width, this.y);\r\n            drawMarker(this.x, this.y+this.realHeight);\r\n            drawMarker(this.x+this.width, this.y+this.realHeight);\r\n        }\r\n\r\n        // Draw Icons by filename\r\n        let yPos = this.y + iconPadding;\r\n        let xPos = this.x + this.width + iconPadding;\r\n\r\n        function loadImage(imageElement) {\r\n            let sh = imageElement.height;\r\n            let sw = imageElement.width;\r\n            let scale = iconHeight / sh;\r\n            canvasContext.drawImage(imageElement, xPos-(iconPadding*2)-(sw*scale), yPos, sw * scale, sh * scale);\r\n            yPos += iconHeight + (iconPadding * 2); // What's the point of this line? yPos should be out of scope when this method is run\r\n\r\n        }\r\n\r\n        for (let i = 0; i < this.icons[0].length; i++) {\r\n\r\n            if (this.icons[1][i] === true) {\r\n                if (this.icons[2][i] === true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, iconHeight + canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n\r\n                let element = this.imageElements[this.icons[0][i]];\r\n\r\n                \r\n                if (element === undefined) {\r\n\r\n                    let imageElement = new Image();\r\n                    imageElement.src = serverURL + \"/icons/\" + this.icons[0][i];\r\n                    imageElement.crossOrigin = \"anonymous\";\r\n\r\n                    imageElement.onload = () => {\r\n                        loadImage(imageElement);\r\n                        this.imageElements[this.icons[0][i]] = imageElement\r\n                    };\r\n                } else {\r\n                    loadImage(element)\r\n                }\r\n            } else {\r\n                yPos += iconHeight + (iconPadding * 2);\r\n            }\r\n            \r\n        } \r\n\r\n        // Reset color for text\r\n        canvasContext.fillStyle = \"#000000\";\r\n\r\n        // Draw Height for text that will be increased to draw downward\r\n        let dy = padding+this.fontSize;\r\n\r\n        // Disable shadows for text\r\n        canvasContext.shadowOffsetX = 0.0; canvasContext.shadowOffsetY = 0.0;\r\n\r\n        let txPos = this.x + iconPadding;\r\n        let tyPos = this.y + iconHeight;\r\n\r\n        for (let i = 0; i < this.icons[0].length; i++) {\r\n            if (this.icons[2][i] === true) {\r\n                if (this.icons[1][i] !== true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n\r\n                let name = \"<< \" + this.icons[0][i].slice(0, -4) + \" >>\";\r\n                if (this.icons[0][i].slice(-6, -4) === \"_n\") {\r\n                    name = \"\";\r\n                }\r\n\r\n                canvasContext.fillText(name, txPos, tyPos);\r\n            }\r\n            tyPos += iconHeight + (iconPadding * 2);\r\n        }\r\n\r\n        // Draw name\r\n        this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.Origin + this.title).width);\r\n\r\n        if(this.isAbstract) {\r\n            canvasContext.font = \"italic \" + this.fontSize + \"px Segoe UI\";\r\n        }else{\r\n            canvasContext.font = this.fontSize + \"px Segoe UI\";\r\n        }\r\n\r\n        canvasContext.fillText(this.Origin + this.title , this.x+padding, this.y+dy+this.iconAreaHeight);\r\n        dy = padding*2 +this.height + this.contentHeight;\r\n\r\n        canvasContext.font = this.fontSize+\"px Segoe UI\";\r\n\r\n        // Draw text\r\n        for (let i = 0; i < this.content.length; i++) {\r\n            this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.content[i]).width + padding*2);\r\n            canvasContext.fillText(this.content[i], this.x+padding, this.y+dy+this.iconAreaHeight);\r\n            dy += this.fontSize + padding;\r\n        }\r\n\r\n        canvasContext.strokeStyle = \"black\"\r\n    }\r\n\r\n    // Checks if it intersects with point\r\n    intersects(x, y) {\r\n        if (x < this.x) return false;\r\n        if (y < this.y) return false;\r\n        if (x > this.x+this.width) return false;\r\n        return y <= this.y + this.realHeight;\r\n\r\n    }\r\n\r\n    // Gets the nearest side, in Arrow compatible x,y percentage values\r\n    // Also returns a threshold distance\r\n    // Parameters are the cursor X and Y coordinates\r\n    // Return value:\r\n    //      [threshold, xRel, yRel]\r\n    //\r\n    // If threshold is -1, xRel and yRel are equal to cursorX, cursorY\r\n    // This only happens when cursor shouldn't connect to vertex\r\n    getNearestSideFrom(cursorX, cursorY) {\r\n\r\n        // Else\r\n        return this.getNearestSide(cursorX, cursorY);\r\n    }\r\n\r\n    getNearestSide(cursorX, cursorY) {\r\n        // Create possibilities\r\n        let sides = [];\r\n\r\n        // If can connect to top/bottom\r\n        if (cursorX > this.x && cursorX < this.x+this.width) {\r\n            //console.log(\"success\");\r\n            let xPercentage = (cursorX-this.x)/this.width;\r\n\r\n            sides.push([Math.abs(cursorY-(this.y)), xPercentage, 0]);\r\n            sides.push([Math.abs(cursorY-(this.y+this.realHeight)), xPercentage, 1]);\r\n        }\r\n\r\n        // If can connect to left/right\r\n        else if (cursorY > this.y && cursorY < this.y+(this.realHeight)) {\r\n            //console.log(\"success\");\r\n            let yPercentage = (cursorY-this.y)/(this.realHeight);\r\n\r\n            sides.push([Math.abs(cursorX-(this.x)), 0, yPercentage]);\r\n            sides.push([Math.abs(cursorX-(this.x+this.width)), 1, yPercentage]);\r\n        }\r\n\r\n        // Can't connect\r\n\r\n        let goodSide = false;\r\n\r\n        sides.forEach((side) => {\r\n            if(side[0] < distanceThreshold){\r\n                goodSide = true;\r\n            }\r\n        });\r\n\r\n        if(goodSide === false && cursorX > this.x && cursorX < this.x + this.width && cursorY > this.y && cursorY < this.y+this.realHeight){\r\n                // click was inside the vertex but not in tolerance\r\n                //console.log(\"trying things\")\r\n                let yPercentage = (cursorY-this.y)/(this.realHeight);\r\n                let xPercentage = (cursorX-this.x)/this.width;\r\n\r\n                // find closest side\r\n                let rightDist = Math.abs(xPercentage-1)*this.width;\r\n                let topDist = yPercentage*this.realHeight;\r\n                let leftDist = xPercentage*this.width;\r\n                let bottomDist = yPercentage*this.realHeight;\r\n\r\n                let closestIndex = 0;\r\n                let closestDistance = leftDist;\r\n                let distArrays = [leftDist,rightDist,topDist,bottomDist];\r\n\r\n                // no need to go through leftDist here as its already set as shortest\r\n                for(let i = 1; i< distArrays.length-1; i++){\r\n                    if(distArrays[i] < closestDistance){\r\n                        closestDistance = distArrays[i];\r\n                        closestIndex = i;\r\n                    }\r\n                }\r\n\r\n                if ( closestIndex === 0 ){\r\n                    return [0, 0, yPercentage]\r\n                }\r\n                if ( closestIndex === 1 ){\r\n                    return [0, 1, yPercentage]\r\n                }\r\n                if ( closestIndex === 2 ){\r\n                    return [0, xPercentage, 0]\r\n                }\r\n                if ( closestIndex === 3 ){\r\n                    return [0, xPercentage, 1]\r\n                }\r\n        }\r\n\r\n        if(sides.length === 0){\r\n            return null\r\n        }\r\n\r\n        // Return side with shortest distance\r\n        let shortest = sides[0];\r\n        for (let i = 1; i < sides.length; i++) {\r\n            if (sides[i][0] < shortest[0]) {\r\n                shortest = sides[i];\r\n            }\r\n        }\r\n        return shortest;\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { createSaveState } from '../Serialisation/NewFileManager';\r\nimport * as canvasDraw from \"./CanvasDraw\";\r\nimport { getFolderNameFromKey, getVertexData, modelObjects } from './ContainmentTree';\r\nimport { Tool } from './LeftMenu';\r\n\r\nlet movingAllowed = false;\r\nlet selectMultiple = false;\r\nlet selectDown = false;\r\nlet savedObjects = [];\r\n\r\nexport class Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n\r\n        this.state = {}\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextContext) {\r\n        this.zoom = nextProps.mainState.zoomLevel;\r\n        this.tool = nextProps.mainState.drawMode;\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.zoom = this.props.mainState.zoomLevel;\r\n        this.tool = this.props.mainState.drawMode;\r\n\r\n        document.getElementById(\"Canvas\").addEventListener('dragenter', this.dragEnter);\r\n        document.getElementById(\"Canvas\").addEventListener('dragover', this.dragOver);\r\n        document.getElementById(\"Canvas\").addEventListener('dragleave', this.dragLeave);\r\n        document.getElementById(\"Canvas\").addEventListener('drop', this.drop);\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.getElementById(\"Canvas\").removeEventListener('dragenter', this.dragEnter);\r\n        document.getElementById(\"Canvas\").removeEventListener('dragover', this.dragOver);\r\n        document.getElementById(\"Canvas\").removeEventListener('dragleave', this.dragLeave);\r\n        document.getElementById(\"Canvas\").removeEventListener('drop', this.drop);\r\n    }\r\n\r\n    dragEnter(e) {\r\n        e.preventDefault();\r\n    }\r\n    \r\n    dragOver(e) {\r\n        e.preventDefault();\r\n    }\r\n    \r\n    dragLeave(e) {\r\n        return 0\r\n    }\r\n    \r\n    drop(e) {\r\n        if(canvasDraw.getCurrentModel() <= 0){ // stops the user dragging and dropping without a model being selected\r\n            console.log(\"attempted to drag and drop vertex while there are no available models to draw on\");\r\n            window.alert(\"You need to create and select a graph first before you can start drawing!\");\r\n        }\r\n        else{\r\n            console.log('dropped')\r\n            console.log(canvasDraw.getCurrentModel())\r\n            //Find the vertex object that was dragged\r\n            let droppedSemanticID = e.dataTransfer.getData('text/plain');\r\n            let droppedVertex = 0;\r\n            for(let vert of getVertexData()){\r\n                if (vert.semanticIdentity.UUID === droppedSemanticID)\r\n                droppedVertex = vert;\r\n            }\r\n            //console.log(droppedVertex)\r\n            //get canvas relative coordinates for where the object was dropped\r\n            let mouseCoords = canvasDraw.getGraphXYFromMouseEvent(e)\r\n\r\n            let newName = droppedVertex.text.replace(\" 🟧\",\"\");\r\n            newName = newName.replace(\" 📂\",\"\")\r\n            let newColour;\r\n            let visibilityCheck = false;\r\n\r\n            //check if selected model is located in the same package or not\r\n            if(droppedVertex.parentRenderKey !== canvasDraw.getCurrentRenderKey()){\r\n                newColour = \"#FFFFFF\";\r\n                visibilityCheck = true; //used to determine if the vertex has an origin package added\r\n            }\r\n            else{\r\n            \r\n                newColour = droppedVertex.colour;\r\n            }\r\n\r\n\r\n        //create the vertex object(size 30x15) and place it\r\n            let canvasVert = canvasDraw.createVertex(mouseCoords[0],mouseCoords[1],droppedVertex.width,droppedVertex.height,newName,\r\n            droppedVertex.content,newColour,droppedVertex.icons,droppedVertex.imageElements,droppedVertex.fontSize,droppedVertex.semanticIdentity)\r\n            if(visibilityCheck === true){\r\n                //add origin package\r\n                let originText = getFolderNameFromKey(droppedVertex.parentRenderKey)\r\n                originText = originText.replace(\" 🟧\",\"\")\r\n                originText = originText.replace(\" 📁\",\"\")\r\n                canvasVert.setOrigin(originText + \" :: \")\r\n            }\r\n            canvasDraw.addObject(canvasVert)\r\n            canvasDraw.drawAll()\r\n\r\n            createSaveState() //Used for undo/redo functionality\r\n        }\r\n\r\n        //canvas\r\n        //mouseStartX\r\n        //mouseStartY\r\n        //x mose+10\r\n        //x mouse +10\r\n\r\n    }\r\n\r\n\r\n\r\n    // prevent context (right-click) menu from appearing\r\n    ocm = (e) => {\r\n        e.preventDefault();\r\n    };\r\n    // What happens if u click anywhere on the canvas\r\n    mouseDown = (e, canvas) => {\r\n        let position = canvasDraw.getGraphXYFromMouseEvent(e);\r\n        let x = position[0]; let y = position[1];\r\n        this.setState({\r\n            startX: x,\r\n            startY: y\r\n        });\r\n\r\n        //toggle shift key to move all connected\r\n        if (e.shiftKey && !selectDown) {\r\n            selectDown = true;\r\n        }\r\n        // If it was a left click\r\n        if (e.button === 0 && !selectMultiple) {\r\n            let intersection = canvasDraw.findIntersected(x, y);\r\n            // check if there's an object\r\n            if (intersection !== null) {\r\n                //if object is a box, move the object\r\n                if (canvas.tool === Tool.Select && intersection.typeName === \"Vertex\") {\r\n                    e.preventDefault();\r\n                    // brings up the menu\r\n                    this.props.setLeftMenu(canvasDraw.findIntersected(x, y));\r\n                    canvasDraw.onMiddleClick(canvas, x, y,null,selectDown);\r\n                    //console.log(selectDown);\r\n\r\n                } else {\r\n                    this.props.setLeftMenu(canvasDraw.findIntersected(x, y));\r\n                    canvasDraw.saveBlockStates(canvas, x, y, 1);\r\n                    canvasDraw.onLeftMousePress(canvas, x, y);\r\n                }\r\n\r\n              } else { //clicked nothing\r\n            this.props.setLeftMenu(canvasDraw.findIntersected(x, y));\r\n            canvasDraw.saveBlockStates(canvas, x, y, 1);\r\n            canvasDraw.onLeftMousePress(canvas, x, y);\r\n            }\r\n        }\r\n        \r\n        //toggles ctrl key to be active for selecting multiple.\r\n        //detoggles in mouseup\r\n        if (e.ctrlKey && !selectMultiple) {\r\n            selectMultiple = true;\r\n        }\r\n\r\n        //mouse down\r\n        if (e.button === 0 && selectMultiple) {\r\n            \r\n            let intersection = canvasDraw.findIntersected(x, y);\r\n            // check if there's an object\r\n            if (intersection === null) {\r\n                this.props.setLeftMenu(intersection, false, savedObjects);\r\n                savedObjects = [];\r\n                selectMultiple = false;\r\n\r\n            }\r\n            if (intersection !== null) {\r\n                //console.log(selectMultiple);\r\n                // Remove dupes\r\n                let foundEnd = 0;\r\n                //start at 0\r\n                while (foundEnd < savedObjects.length-1){\r\n                    //stop @ second last one\r\n                    //check RHS for duplicates\r\n                    //found+1 because wanna look at box after the one we looking at\r\n                    for (let ob = foundEnd+1; ob < savedObjects.length; ob++){\r\n                        if(savedObjects[foundEnd].x === savedObjects[ob].x && savedObjects[foundEnd].y === savedObjects[ob].y ){\r\n                            savedObjects.splice(ob); // if it's the same, delete it and slide array back one\r\n                        }\r\n                    }\r\n                    foundEnd++;\r\n                }\r\n                //ideally want to push in the first object that has already been selected\r\n                console.log(savedObjects);\r\n                savedObjects.push(canvasDraw.findIntersected(x, y));\r\n                canvasDraw.onMiddleClick(canvas, x, y, savedObjects)\r\n                \r\n                for(let i = 0; i <savedObjects.length; i++) {\r\n                    this.props.setLeftMenu(savedObjects[i], selectMultiple);\r\n                }\r\n                \r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        // If it was a middle click\r\n        if (e.button === 1) {\r\n            e.preventDefault();\r\n            canvasDraw.onMiddleClick(canvas, x, y)\r\n        }\r\n\r\n\r\n    };\r\n\r\n    mouseUp = (e, canvas) =>{\r\n\r\n        canvasDraw.solidifyObject();\r\n\r\n        let position = canvasDraw.getGraphXYFromMouseEvent(e);\r\n        let x = position[0]; let y = position[1];\r\n\r\n        // If it was a left click\r\n        if (e.button === 0) {\r\n            if (canvas.tool === Tool.Select) {\r\n                canvasDraw.drawAll()\r\n            }\r\n\t\t\telse {\r\n                canvasDraw.onLeftMouseRelease(canvas, x, y);\r\n            }\r\n\r\n        }\r\n\r\n        // if it was a right click\r\n        if (e.button === 2) {\r\n\r\n           // deleted the old rightclick functionality and will leave this if statement here for when we implement right click menu - cooper\r\n           \r\n\t\t\t\r\n        }\r\n\t\tif (e.shiftKey && selectDown) {\r\n            selectDown = false;\r\n        }\r\n\r\n        if (e.button === 1) {\r\n            window.setTimeout(() => {canvasDraw.solidifyObject()},200)\r\n\r\n        }\r\n\t\tif (canvasDraw.blockBeenSelected === true){\r\n\t\t\tcanvasDraw.checkCollision(canvas, x, y);\r\n\t\t}\r\n\t\t\r\n    };\r\n\r\n    mouseLeave() {\r\n        canvasDraw.onMouseLeave()\r\n    }\r\n\r\n    render() {\r\n        return <canvas ref={this.canvasRef} id=\"drawCanvas\" onContextMenu={(e) => this.ocm(e)} onMouseDown={(e) => this.mouseDown(e, this)} onMouseUp={(e) => this.mouseUp(e, this)} onMouseLeave={(e) => this.mouseLeave(e,this)}>\r\n                <p> HTML5 Canvas elements are not supported by your browser</p>\r\n            </canvas>\r\n    }\r\n\r\n}\r\n\r\nwindow.addEventListener(\"resize\",canvasDraw.resetMouseOrigin);\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { Vertex } from \"../DataStructures/Vertex\";\r\nimport { Arrow } from \"../DataStructures/Arrow\";\r\nimport { Tool } from \"./LeftMenu\";\r\nimport { Graph } from \"../DataStructures/Graph\";\r\nimport {getFolderNameFromKey, getModelData,getModelNameFromKey,handleAddModel, handleAddVertex, modelObjects, vertexData} from \"./ContainmentTree\";\r\nimport { rgbToHex } from \"@material-ui/core\";\r\nimport { Canvas } from \"./Canvas\";\r\nimport { setCurrentGraph } from \"./MainView\";\r\nimport { createSaveState } from \"../Serialisation/NewFileManager\";\r\n\r\n//false unless the onMouseMove function is executing, Is used to stop vertex created with leftmenu tool creating multiple vertex's when dragging for an inital size\r\nlet dragging = false;\r\n\r\n// Core variables\r\nlet canvasElement;\r\nlet canvasContext;\r\n\r\n// Mouse / Cursor\r\nlet mouseStartX;\r\nlet mouseStartY;\r\n\r\nlet previousObject;\r\nlet startX, startY, endX, endY;\r\n\r\nlet yRows = 70;\r\n\r\nexport var mouseOriginX;\r\nexport var mouseOriginY;\r\n\r\n// Non zoomed in Width/Height (in pixels)\r\nlet canvasWidth;\r\nlet canvasHeight;\r\n\r\n// Zoom and Pan\r\nlet zoom = 200.0;\r\n\r\n// Renderable objects\r\nexport var currentObjects = new Graph();\r\n\r\nexport var savedArrows = [];\r\n\r\n// The naming conventions here are terrible, but basically the render keys determine where\r\n// a tree view element is placed in the graph while the model functions determine what's \r\n// actually being rendered\r\n\r\nexport let currentRenderKey = 0;\r\nexport let totalRenderKeys = 0\r\n\r\nexport let currentModel = 0;\r\nexport let totalModels = 0;\r\n\r\nexport function setTotalRenderKey(newData){\r\n    totalRenderKeys = newData;\r\n}\r\nexport function setTotalModelKeys(newData){\r\n    totalModels = newData;\r\n}\r\n\r\nexport function getCurrentRenderKey() {\r\n    return currentRenderKey;\r\n}\r\n\r\nexport function setNewRenderKey(newKey) {\r\n    currentRenderKey = newKey;\r\n}\r\n\r\nexport function getTotalRenderKeys() {\r\n    return totalRenderKeys;\r\n}\r\n\r\nexport function incrementTotalRenderKeys() {\r\n    totalRenderKeys = totalRenderKeys += 1;\r\n}\r\n\r\nexport function getCurrentObjects() {\r\n    return currentObjects;\r\n}\r\n\r\n// --- Model Key Stuff --- //\r\n\r\nexport function getCurrentModel() {\r\n    return currentModel;\r\n}\r\n\r\nexport function setNewModel(newModel) {\r\n    currentModel = newModel;\r\n    try {\r\n        document.getElementById(\"SelectedModel\").value = getModelNameFromKey(newModel)\r\n    } catch (error) {\r\n        \r\n    }\r\n    \r\n\r\n}\r\n\r\nexport function getTotalModels() {\r\n    return totalModels;\r\n}\r\n\r\nexport function incrementTotalModels() {\r\n    totalModels = totalModels += 1;\r\n}\r\n\r\n\r\n\r\n\r\n// Arrow Path\r\nexport var arrowPath = [];\r\nlet lastX = 0;\r\nlet lastY = 0;\r\n\r\n// Arrow moving\r\nlet startMoveX = 0;\r\nlet startMoveY = 0;\r\n\r\n// Resize status\r\nlet resizing = false;\r\n\r\nlet arrowType = 0;\r\nlet firstArrowJoint = true;\r\n\r\nlet cancelDraw = false;\r\n\r\n//Block Past location var\r\nlet past_location = [];\r\nlet past_size = [];\r\nlet selectedObject;\r\nexport var blockBeenSelected = false;\r\n\r\n// Init\r\nexport function assignElement(elementID) {\r\n    canvasElement = document.getElementById(elementID);\r\n    canvasContext = canvasElement.getContext(\"2d\");\r\n\r\n    resetMouseOrigin();\r\n\r\n}\r\n\r\nexport function getModelName() {\r\n    let nameElement = document.getElementById(\"ModelName\")\r\n\r\n    if (nameElement === null) {\r\n        return \"Root\"\r\n    }\r\n    if (nameElement.value === \"\" || nameElement.value === null || nameElement.value === undefined) {\r\n        return \"Root\"\r\n    }\r\n    return nameElement.value;\r\n}\r\n\r\nexport function resetMouseOrigin() {\r\n    try {\r\n        let canvasRect = canvasElement.getBoundingClientRect();\r\n        mouseOriginX = canvasRect.left;\r\n        mouseOriginY = canvasRect.top;\r\n        recalculateScale();\r\n        clearCanvas();\r\n    } catch {\r\n        console.error(\"Failed to acquire canvas element\");\r\n    }\r\n    drawAll()\r\n}\r\n\r\n// Core functions\r\nexport function drawAll() {\r\n    updateArrows();\r\n    clearCanvas();\r\n\r\n    canvasContext.resetTransform();\r\n    canvasContext.scale(getEffectiveZoom(), getEffectiveZoom());\r\n\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item !== null) {\r\n            //console.log(\"HERE \" + item.typeName)\r\n            //Only render the objects which are in the currently selected containment\r\n\r\n            if (item.getModelKey() === currentModel) {\r\n                /*\r\n                if (item.typeName === \"Vertex\"){\r\n                    console.log(\"Item is set as present\")\r\n                    item.setPresent();\r\n                }\r\n                */\r\n                item.draw(canvasContext);\r\n\r\n            }\r\n\r\n            /*\r\n            else if (item.getModelKey() !== currentModel && item.typeName === \"Vertex\"){\r\n                console.log(\"Item is sent away\")\r\n                item.setAway();\r\n                //console.log(\"The item to not be rendered is\" + item.typeName);\r\n            }\r\n            */\r\n\r\n        }\r\n    });\r\n\r\n}\r\n\r\nexport function deleteElement(element) {\r\n    if (element !== null) {\r\n        if (!currentObjects.remove(element)) {\r\n            console.error(\"Failed to delete object with UUID %s\", element.semanticIdentity.UUID);\r\n        }\r\n    } else {\r\n        console.error(\"Attempted to delete a null element\");\r\n    }\r\n\r\n    drawAll()\r\n}\r\n\r\n//this is the same as the above, except when you're deleting a vertex with an arrow connected the edge connection code freaks out.\r\n//this here deletes any arrows connected to the vertex before deleting the vertex to get around this\r\nexport function vertexDeleteElement(element) {\r\n    console.log(\"vDeleteE occurs\")\r\n    //find the UUID of the vertex for arrow dest and source matching\r\n    //let selectedVertUUID = element.semanticIdentity.UUID;\r\n\r\n    //Get the arrow UUID's\r\n    let sourceUUIDs = currentObjects.ArrowUUIDSource(element);\r\n    let destUUIDs = currentObjects.ArrowUUIDDest(element);\r\n    //find an arrow with matching source/dest if they exist\r\n\r\n    sourceUUIDs.forEach(element => currentObjects.remove(element.arrow));\r\n    destUUIDs.forEach(element => currentObjects.remove(element.arrow))\r\n\r\n    //Now that the arrows are out of the way, we're safe to delete the vertex (same code as above)\r\n    if (element !== null) {\r\n        console.log(\"vdl if staement pass\")\r\n        if (!currentObjects.remove(element)) {\r\n            \r\n            console.error(\"Failed to delete object with UUID %s\", element.semanticIdentity.UUID);\r\n        }\r\n    } else {\r\n        console.error(\"Attempted to delete a null element\");\r\n    }\r\n\r\n    drawAll()\r\n\r\n}\r\n\r\nexport function updateRows() {\r\n    yRows = document.getElementById(\"canvasRows\").value;\r\n    drawAll()\r\n}\r\n\r\n// Format co-ordinate so that the value aligns with a row\r\nfunction findNearestGridY(y, top) {\r\n\r\n    // distance to topmost top rowLine\r\n    let slotHeight = canvasHeight / yRows * zoom / 100 * 200 / zoom;\r\n\r\n    // which row to put it in\r\n    let slot = Math.floor(y / slotHeight);\r\n\r\n    // y co-ordinate of that row (if bottom then go up by row gap)\r\n    return slotHeight * slot + (slotHeight / 2 * + top)\r\n}\r\n\r\n// Checks to see which side it should resize on\r\nfunction checkResizeBounds(x, y) {\r\n    // Iterate through all objects and only check vertices\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n    for (let i = 0; i < currentObjectsFlattened.length; i++) {\r\n        let item = currentObjectsFlattened[i];\r\n\r\n        if (item.typeName === \"Vertex\") {\r\n            // Get vertex bounds\r\n            // x1 y1 are the lower coordinates\r\n            // x2 y2 are the upper coordinates\r\n            // Note: x2 y2 are not width/height values\r\n\r\n            //tolerance in px\r\n            let tolerance = 10;\r\n\r\n            let bounds = item.getBounds();\r\n            let x1 = bounds[0];\r\n            let y1 = bounds[1];\r\n            let x2 = bounds[2];\r\n            let y2 = bounds[3];\r\n\r\n            let top = Math.abs(y1 - y) < tolerance;\r\n            let bottom = Math.abs(y2 - y) < tolerance;\r\n            let left = Math.abs(x1 - x) < tolerance;\r\n            let right = Math.abs(x2 - x) < tolerance;\r\n            let inYBounds = y > y1 && y < y2;\r\n            let inXBounds = x > x1 && x < x2;\r\n\r\n            if (right && inYBounds) {\r\n                return [item, \"right\"];\r\n            }\r\n\r\n            if (top && left) {\r\n                return [item, \"topLeft\"];\r\n            } else if (top && right) {\r\n                return [item, \"topRight\"];\r\n            } else if (bottom && left) {\r\n                return [item, \"bottomLeft\"];\r\n            } else if (bottom && right) {\r\n                return [item, \"bottomRight\"];\r\n            } else if (left && inYBounds) {\r\n                return [item, \"left\"];\r\n            } if (right && inYBounds) {\r\n                return [item, \"right\"];\r\n            } else if (top && inXBounds) {\r\n                return [item, \"top\"];\r\n            } else if (bottom && inXBounds) {\r\n                return [item, \"bottom\"];\r\n            }\r\n        }\r\n    }\r\n\r\n    // All else fails\r\n    return [null, null];\r\n}\r\n\r\nexport const distanceThreshold = 15;\r\n\r\n// Find connectable for arrow within a threshold distance\r\nfunction getConnectionDataForArrow(cursorX, cursorY) {\r\n    const angleThreshold = 8;\r\n\r\n    let nearest = null;\r\n    let nearestDistance = 0;\r\n\r\n    // Find nearest connectable\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item !== null) {\r\n            if (item.typeName === \"Vertex\") {\r\n                let sideData = item.getNearestSideFrom(cursorX, cursorY, lastX, lastY);\r\n                // Only check if valid\r\n                if (sideData !== null && sideData[0] < distanceThreshold) {\r\n                    // Compare dist\r\n                    if (nearest === null || sideData[0] < nearestDistance) {\r\n                        nearest = [0, item.semanticIdentity.UUID, sideData[1], sideData[2]];\r\n                        nearestDistance = sideData[0];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    // Set coordinates\r\n    let coordinate = nearest;\r\n    if (nearest === null) {\r\n        coordinate = [1, cursorX, cursorY];\r\n    }\r\n\r\n    // If can't snap to right angles\r\n    if (arrowPath.length < 1 || coordinate[0] === 0) return { coord: coordinate, snapped: nearest !== null, nearest: nearest };\r\n\r\n    // Get angle\r\n    let lastPathX = arrowPath[arrowPath.length - 1][1];\r\n    let lastPathY = arrowPath[arrowPath.length - 1][2];\r\n    let x = coordinate[1] - lastPathX;\r\n    let y = coordinate[2] - lastPathY;\r\n\r\n    // must be y,x check documentation if you dont believe me\r\n    let angle = Math.atan2(y, x) * (180 / Math.PI);\r\n    // Make positive\r\n    angle = (angle + 360) % 360;\r\n    // Get relative\r\n    let relAngle = angle % 90;\r\n\r\n    // Check if it should snap to right angles\r\n    if (relAngle > 90 - angleThreshold || relAngle < angleThreshold) {\r\n        // Get length\r\n        let l = getDistance(0, 0, x, y);\r\n\r\n        // Choose angle\r\n        let angles = [0, 90, 180, 270, 360];\r\n        let nearestAngle = angles[0];\r\n        for (let i = 1; i < angles.length; i++) {\r\n            if (Math.abs(angles[i] - angle) < Math.abs(nearestAngle - angle)) {\r\n                nearestAngle = angles[i];\r\n            }\r\n        }\r\n        let nearestRad = nearestAngle * (Math.PI / 180);\r\n\r\n        // Create vector\r\n        let xv = l * Math.cos(nearestRad);\r\n        let yv = l * Math.sin(nearestRad);\r\n\r\n        // Create point (not vector sitting on 0,0)\r\n        coordinate = [coordinate[0], lastPathX + xv, lastPathY + yv];\r\n\r\n\r\n    }\r\n\r\n    return { coord: coordinate, snapped: nearest !== null, nearest: nearest }\r\n}\r\n\r\nexport function getSelectedObject(canvas) {\r\n    return canvas.props.mainState.selectedObject\r\n}\r\n\r\nfunction resizeObjectOnMouseMove(e, resizeVars) {\r\n    let coords = getGraphXYFromMouseEvent(e);\r\n\r\n    resizeVars[0].expandSide(resizeVars[1], coords[0], coords[1], canvasContext);\r\n\r\n    //grab object and arrows connected to it\r\n    // update arrows\r\n    updateA();\r\n    \r\n    \r\n}\r\n\r\n// Sets the objects uuid and adds it to the root of currentObjects\r\nexport function addObject(object) {\r\n    if (object === null || object === undefined) return;\r\n    currentObjects.add(object);\r\n}\r\n\r\n// Sets the currentObjects value to a new one. WARNING it will override the current value without any checks\r\nexport function setCurrentObjects(newObjects) {\r\n    currentObjects = newObjects;\r\n    drawAll();\r\n}\r\n\r\nexport function newFile() {\r\n    // Confirm\r\n    let r = window.confirm(\"Are you sure, this will clear the current canvas!\");\r\n    if (r === true) {\r\n        console.log(\"Clearing canvas\");\r\n        window.location.reload();\r\n    } else {\r\n        console.log(\"User opted to not clear the canvas\");\r\n    }\r\n\r\n    // Redraw\r\n    drawAll(currentObjects);\r\n}\r\n\r\nfunction arrowToolSelected() {\r\n    return arrowType === Tool.Visibility || arrowType === Tool.Edge || arrowType === Tool.Specialisation\r\n}\r\n\r\nexport function getObjectFromUUID(UUID) {\r\n    let foundObject;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.semanticIdentity.UUID === UUID) {\r\n            foundObject = item;\r\n        }\r\n    });\r\n    return foundObject;\r\n}\r\n\r\n\r\nfunction findNearestArrowPointIndex(x, y) {\r\n    let nearestPointIndex = -1;\r\n    // Nearest distance here is used as a tolerance variable\r\n    let nearestDistance = 30;\r\n    let cDist;\r\n    let nearestArrow = null;\r\n\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n            item.path.forEach((point) => {\r\n                cDist = Math.hypot(x - point[0], y - point[1]);\r\n                console.log(cDist);\r\n                if (cDist < nearestDistance) {\r\n                    nearestDistance = cDist;\r\n                    nearestPointIndex = item.path.indexOf(point);\r\n                    nearestArrow = item\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return [nearestPointIndex, nearestArrow]\r\n}\r\n\r\nfunction StickArrowToObject(connectionData, arrow, index) {\r\n    // so the line sticks to object\r\n    if (connectionData['snapped'] === false) {\r\n        let coord = connectionData['coord'];\r\n        // update the arrow\r\n        arrow.path[index] = [coord[1], coord[2]]\r\n    } else {\r\n        let vertexUUID = connectionData['nearest'][1];\r\n        let vertex = getObjectFromUUID(vertexUUID);\r\n\r\n        if (vertex !== undefined) {\r\n            arrow.path[index] = arrow.rebuildPath()\r\n        }\r\n    }\r\n}\r\n\r\nfunction moveArrowPointOnMouseMove(e, index, arrow) {\r\n    let x, y;\r\n    [x, y] = getGraphXYFromMouseEvent(e);\r\n    let conData = getConnectionDataForArrow(x, y);\r\n    arrow.pathData[index] = conData['nearest'];\r\n    StickArrowToObject(conData, arrow, index);\r\n\r\n\r\n}\r\n\r\n\r\n// Event based functions\r\nexport function onLeftMousePress(canvas, x, y) {\r\n\r\n    // Checks if your mouse is in range of the borders of a box to resize them\r\n    let resizeVars = checkResizeBounds(x, y);\r\n    if (canvas.tool === Tool.Vertex || canvas.tool === Tool.Select) {\r\n        if (resizeVars[0] !== null) {\r\n            if (resizeVars[0] === getSelectedObject(canvas)) {\r\n                saveBlockStates(canvas, x, y);\r\n                resizing = true;\r\n                canvasElement.onmousemove = function (e) {\r\n                    resizeObjectOnMouseMove(e, resizeVars);\r\n\r\n                };\r\n                \r\n                return;\r\n            }\r\n        } else {\r\n        }\r\n\r\n\r\n\r\n        let intersection = findIntersected(x, y);\r\n        if (canvas.tool === Tool.Vertex && intersection !== null) {\r\n            //console.log(\"Selecting intersected Vertex\");\r\n            canvas.props.setLeftMenu(intersection);\r\n            canvas.props.setMode(Tool.Select);\r\n            cancelDraw = true;\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    if (canvas.tool === Tool.Select) {\r\n        let index, arrow;\r\n        [index, arrow] = findNearestArrowPointIndex(x, y);\r\n        //console.log(index, arrow);\r\n        if (arrow === getSelectedObject(canvas)) {\r\n            if (index !== -1) {\r\n                resizing = true;\r\n                let func = function (e) {\r\n                    moveArrowPointOnMouseMove(e, index, arrow)\r\n                };\r\n\r\n\r\n                canvasElement.addEventListener(\"mousemove\", func);\r\n                canvasElement.addEventListener(\"mouseup\", () => {\r\n                    canvasElement.removeEventListener(\"mousemove\", func);\r\n                    console.log(\"removed\")\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    mouseStartX = x;\r\n    mouseStartY = y;\r\n\r\n\r\n\r\n    // Enable example draw while user is deciding shape\r\n    canvasElement.onmousemove = function (e) { onMouseMove(e, canvas) }\r\n\r\n\r\n}\r\n\r\n//aligning lines when large box moved\r\nexport function checkArrowsConnectedToBox(Object) {\r\n    // check arrows which one matches the box that was moved by its ID \r\n\r\n    // check how much the box has changed\r\n    let objectID;\r\n\r\n    let arrowArray = [];\r\n\r\n    resizing = true;\r\n    objectID = Object.semanticIdentity.UUID;\r\n    console.log(objectID);\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n            let conData = 0;\r\n            //If the object is connected to destination\r\n            if (objectID === item.destVertexUUID) {\r\n                arrowArray.push(item);\r\n\r\n                // get connection data calcs min dist to travel and hopefully it's straight up\r\n                // first object destination y is less than object y\r\n                if (item.path[0][1] < Object.y) {\r\n                    conData = getConnectionDataForArrow(item.path[0][0], Object.y);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(item.path[0][0], Object.y + Object.height);\r\n                }\r\n                item.pathData[1] = conData['nearest'];\r\n                console.log(\"dest one\")\r\n                StickArrowToObject(conData, item, 1);\r\n\r\n                //If the object is connected to Source\r\n            } else if (objectID === item.sourceVertexUUID) {\r\n                arrowArray.push(item);\r\n                if (item.path[1][1] < Object.y) {\r\n                    conData = getConnectionDataForArrow(item.path[1][0], Object.y);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(item.path[1][0], Object.y + Object.height);\r\n                }\r\n                item.pathData[0] = conData['nearest'];\r\n                console.log(\"source one\");\r\n                StickArrowToObject(conData, item, 0);\r\n\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    resizing = false;\r\n\r\n\r\n}\r\n\r\nexport function checkHorizArrowsConnectedToBox(Object) {\r\n    let objectID;\r\n\r\n    let arrowArray = [];\r\n\r\n    resizing = true;\r\n    objectID = Object.semanticIdentity.UUID;\r\n    console.log(objectID);\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n            let conData = 0;\r\n            //If the object is connected to destination\r\n            if (objectID === item.destVertexUUID) {\r\n                arrowArray.push(item);\r\n\r\n                if (item.path[0][0] < Object.x) {\r\n                    conData = getConnectionDataForArrow(Object.x + 1, item.path[0][1]);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(Object.x + Object.width - 1, item.path[0][1]);\r\n                }\r\n                item.pathData[1] = conData['nearest'];\r\n                console.log(\"dest one\")\r\n                StickArrowToObject(conData, item, 1);\r\n\r\n                //If the object is connected to Source\r\n            } else if (objectID === item.sourceVertexUUID) {\r\n                arrowArray.push(item);\r\n                if (item.path[1][0] < Object.x) {\r\n                    conData = getConnectionDataForArrow(Object.x + 1, item.path[0][1]);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(Object.x + Object.width - 1, item.path[0][1]);\r\n                }\r\n                item.pathData[0] = conData['nearest'];\r\n                console.log(\"source one\");\r\n                StickArrowToObject(conData, item, 0);\r\n\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    resizing = false;\r\n\r\n\r\n}\r\n\r\n\r\n//save the position of the clicked variable as global\r\nexport function saveBlockStates(canvas, x, y) {\r\n    selectedObject = getSelectedObject(canvas);\r\n    if (getSelectedObject(canvas) === null) {\r\n        selectedObject = findIntersected(x, y);\r\n    }\r\n    if (selectedObject !== null) {\r\n        blockBeenSelected = true;\r\n\r\n        //console.log(\"Block States Have been Saved\");\r\n        past_location = [selectedObject.x, selectedObject.y];\r\n        past_size = [selectedObject.width, selectedObject.height];\r\n    }\r\n}\r\n\r\nexport function setArrowType(type) {\r\n    arrowType = type\r\n}\r\n\r\n//make sure boxes don't collide\r\nexport function checkCollision(canvas, x, y) {\r\n    //console.log(\"Collision Tests:\");\r\n    let object = selectedObject;\r\n    let CollideCount = 0;\r\n    //console.log(past_size);\r\n    // for loop to check all boxes in the list\r\n    if (currentObjects.flatten() !== null && object !== null) {\r\n        currentObjects.flatten().forEach((item) => {\r\n            if (item.typeName === \"Vertex\") {\r\n                //make sure coords are > coords of box u just placed + its width\r\n                if (object.x === item.x && object.y === item.y) {\r\n                    //console.log(\"collides with itself\");\r\n                }\r\n                // error of 10 pixels for item's height\r\n                else if ((object.y > (item.y + item.height + 10)) || (object.x > (item.x + item.width))\r\n                    || (item.x > (object.x + object.width)) || (item.y > (object.y + object.height + 10))) {\r\n                    //console.log(\"NoCollide\");\r\n                }\r\n                else {\r\n                    // revert to past stored location\r\n                    object.x = past_location[0];\r\n                    object.y = past_location[1];\r\n                    object.width = past_size[0];\r\n                    object.height = past_size[1];\r\n                    CollideCount++;\r\n                    //console.log(\"Collided\");\r\n                }\r\n            }\r\n        });\r\n        // as long as never collided, change to new location\r\n        if (CollideCount === 0) {\r\n            past_location = [object.x, object.y];\r\n            past_size = [object.width, object.height]\r\n            //console.log(CollideCount);\r\n        }\r\n        blockBeenSelected = false;\r\n        drawAll(currentObjects);\r\n    }\r\n}\r\n\r\n\r\nexport function onRightMouseRelease(canvas, x, y) {\r\n    let ET = findIntersected(x, y);\r\n    if (arrowToolSelected() && ET !== null) {\r\n        // Create\r\n\r\n        let newObject = createObject(canvas, mouseStartX, mouseStartY, x, y);\r\n\r\n        // Reset path\r\n        arrowPath = [];\r\n        firstArrowJoint = true;\r\n\r\n        addObject(newObject);\r\n\r\n        // Disable example draw\r\n        canvasElement.onmousemove = null;\r\n        drawAll(currentObjects);\r\n\r\n        canvas.props.setLeftMenu(newObject)\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n}\r\n\r\nexport function updateA() {\r\n    let conData = 0;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n\r\n            conData = getConnectionDataForArrow(item.path[1][0], item.path[1][1]);\r\n            item.pathData[1] = conData['nearest'];\r\n            StickArrowToObject(conData, item, 0);\r\n\r\n\r\n        }\r\n    });\r\n}\r\nexport function compareSizesToMoveAll(Object) {\r\n\r\n    //for loop to get all the arrows\r\n    //for loop to check destination and source\r\n    //if object ID is equal \r\n    //find whichever one is not the currently selected block\r\n    // if it's smaller move it else do nothing\r\n\r\n    let objectID;\r\n    let verticalArray = [];\r\n    let horizontalArray = [];\r\n    let box;\r\n    let boxArray = [];\r\n    let allArrows = [];\r\n\r\n    objectID = Object.semanticIdentity.UUID;\r\n    console.log(Object);\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n\r\n            //If the object is connected to destination\r\n            if (objectID === item.destVertexUUID) {\r\n                box = getObjectFromUUID(item.sourceVertexUUID);\r\n                if ((box.height + 10) * box.width < (Object.height + 10) * Object.width) {\r\n                    boxArray.push(box);\r\n\r\n                }\r\n                //check if arrow is on top/ below\r\n                if (item.path[0][1] < Object.y || item.path[0][1] > Object.y + Object.height + 10) {\r\n                    //push to vertical array\r\n                    verticalArray.push(item);\r\n                }\r\n                //check if arrow is left/ right\r\n                else if (item.path[0][0] < Object.x || item.path[0][0] > Object.x + Object.width) {\r\n                    //push to horizontal array\r\n                    horizontalArray.push(item);\r\n                }\r\n\r\n\r\n\r\n            }\r\n            //If the object is connected to Source\r\n            else if (objectID === item.sourceVertexUUID) {\r\n                box = getObjectFromUUID(item.destVertexUUID);\r\n                if ((box.height + 10) * box.width < (Object.height + 10) * Object.width) {\r\n                    boxArray.push(box);\r\n                }\r\n                //check if arrow is on top/ below\r\n                if (item.path[1][1] < Object.y || item.path[1][1] > Object.y + Object.height + 10) {\r\n                    //push to vertical array\r\n                    verticalArray.push(item);\r\n\r\n                }\r\n                //check if arrow is left/ right\r\n                else if (item.path[1][0] < Object.x || item.path[1][0] > Object.x + Object.width) {\r\n                    //push to horizontal array\r\n                    horizontalArray.push(item);\r\n                }\r\n\r\n            }\r\n\r\n            allArrows.push(item);\r\n        }\r\n\r\n    });\r\n    return [boxArray, verticalArray, horizontalArray, allArrows];\r\n}\r\n\r\nexport function checkBoxSizesAndReturnBigBox(first, second) {\r\n    if ((first.width) * (first.height + 10) <= (second.width) * (second.height + 10)) {\r\n        return [second, first];\r\n    } else {\r\n        return [first, second];\r\n    }\r\n}\r\n\r\n//line intersect\r\nexport function lineIntersect(canvas, x, y, secondObject) {\r\n    endX = 0;\r\n    endY = 0;\r\n\r\n    startX = 0;\r\n    startY = 0;\r\n\r\n    console.log(\"\\n \\n arrow path: \" + arrowPath + \"\\n\\n\");\r\n    arrowPath = [];\r\n\r\n    //previous object is below\r\n    if (previousObject.y > y && previousObject.x + previousObject.width > x) {\r\n        console.log(\"\\n\\n\\n prev object was below \\n\\n\\n\");\r\n        startY = previousObject.y;\r\n        startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n        endY = secondObject.y + secondObject.height + 10;\r\n        endX = secondObject.x + (0.5 * secondObject.width);\r\n\r\n    }\r\n    // previous object is above\r\n    else if (previousObject.y < y && previousObject.x + previousObject.width > x && previousObject.x < x) {\r\n        console.log(\"\\n\\n\\n prev object was above \\n\\n\\n\");\r\n        startY = previousObject.y + previousObject.height + 10; //+ means go to bottom\r\n        startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n        endY = secondObject.y;\r\n        endX = secondObject.x + (0.5 * secondObject.width);\r\n    }\r\n    //previous object is left of //if you click higher it counts as above\r\n\r\n    //sizes based on Total Area\r\n    let blockPre = previousObject.height + previousObject.width;\r\n    let blockSec = secondObject.height + secondObject.width;\r\n\r\n    //previous object is below\r\n    if (previousObject.y > (secondObject.y + secondObject.height + 10)) {\r\n        //console.log(\"\\n\\n\\n prev object was below \\n\\n\\n\");\r\n        //if previous is inside second range\r\n        if ((previousObject.x > secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            startY = previousObject.y;\r\n            startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n            endY = startY - (startY - (secondObject.y + secondObject.height + 10));\r\n            endX = startX;\r\n        }\r\n        //if second is inside previous range\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) > (secondObject.x + secondObject.width))) {\r\n            startY = secondObject.y + secondObject.height + 10;\r\n            startX = secondObject.x + (0.5 * secondObject.width);\r\n\r\n            endY = startY + (previousObject.y - startY);\r\n            endX = startX;\r\n        }\r\n        //If pre is downLeft of sec extend whichever box is bigger horizontally and fit\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + (secondObject.x - previousObject.x);\r\n                secondObject.x = previousObject.x;\r\n\r\n                startY = previousObject.y;\r\n                startX = secondObject.x + previousObject.width / 2;\r\n                endY = secondObject.y + secondObject.height;\r\n                endX = startX;\r\n                //second obj is changing size\r\n                checkArrowsConnectedToBox(secondObject);\r\n\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + ((secondObject.x + secondObject.width) - (previousObject.x + previousObject.width));\r\n                previousObject.x = previousObject.x;\r\n\r\n                startY = secondObject.y + secondObject.height;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y;\r\n                endX = startX;\r\n                //prev obj is changing size\r\n\r\n                //this one works\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n        //If pre is downright of sec extend whichever box is better horizontally and fit\r\n        else if (previousObject.x > secondObject.x) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + ((previousObject.x + previousObject.width) - (secondObject.x + secondObject.width));\r\n\r\n                startY = previousObject.y;\r\n                startX = previousObject.x + previousObject.width / 2;\r\n                endY = secondObject.y + secondObject.height;\r\n                endX = startX;\r\n                //second obj is changing size\r\n\r\n                checkArrowsConnectedToBox(secondObject, endX - startX, endY - startY);\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + (previousObject.x - secondObject.x);\r\n                previousObject.x = secondObject.x;\r\n\r\n                startY = secondObject.y + secondObject.height;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y;\r\n                endX = startX;\r\n                //prev obj is changing size\r\n\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n    }\r\n    // previous object is above\r\n    else if (previousObject.y + previousObject.height + 10 < secondObject.y) {\r\n        //console.log(\"\\n\\n\\n prev object was above \\n\\n\\n\");\r\n        //if previous is inside second range\r\n        if ((previousObject.x > secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            startY = previousObject.y + previousObject.height;\r\n            startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n            endY = startY - (startY - (secondObject.y));\r\n            endX = startX;\r\n        }\r\n        //if second is inside previous range\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) > (secondObject.x + secondObject.width))) {\r\n            startY = secondObject.y;\r\n            startX = secondObject.x + (0.5 * secondObject.width);\r\n\r\n            endY = startY + previousObject.height + (previousObject.y - startY);\r\n            endX = startX;\r\n        }\r\n        //If pre is upLeft of sec extend whichever box is better horizontally and fit\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + (secondObject.x - previousObject.x);\r\n                secondObject.x = previousObject.x;\r\n\r\n                startY = previousObject.y + previousObject.height;\r\n                startX = secondObject.x + previousObject.width / 2;\r\n                endY = secondObject.y;\r\n                endX = startX;\r\n                //second obj is changing size\r\n\r\n                //fixed\r\n                checkArrowsConnectedToBox(secondObject);\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + ((secondObject.x + secondObject.width) - (previousObject.x + previousObject.width));\r\n                previousObject.x = previousObject.x;\r\n\r\n                startY = secondObject.y;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y + previousObject.height;\r\n                endX = startX;\r\n                //previous obj is changing size\r\n\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n        //If pre is upright of sec extend whichever box is bigger horizontally and fit\r\n        else if (previousObject.x > secondObject.x) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + ((previousObject.x + previousObject.width) - (secondObject.x + secondObject.width));\r\n\r\n                startY = previousObject.y + previousObject.height;\r\n                startX = previousObject.x + previousObject.width / 2;\r\n                endY = secondObject.y;\r\n                endX = startX;\r\n                //previous obj is changing size\r\n\r\n                //this one is fixed\r\n                checkArrowsConnectedToBox(secondObject);\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + (previousObject.x - secondObject.x);\r\n                previousObject.x = secondObject.x;\r\n\r\n                startY = secondObject.y;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y + previousObject.height;\r\n                endX = startX;\r\n\r\n                //second obj is changing size\r\n\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //previous object is left \r\n    else if (previousObject.x + previousObject.width < secondObject.x) {\r\n\r\n        //Previous is smaller\r\n        if (previousObject.y > secondObject.y && previousObject.y + previousObject.height + 10 < secondObject.y + secondObject.height + 10) {\r\n            startY = previousObject.y + (previousObject.height + 10) / 2;\r\n            startX = previousObject.x + previousObject.width;\r\n\r\n            endX = secondObject.x;\r\n            endY = startY;\r\n\r\n        }\r\n        //Second is smaller\r\n        else if (secondObject.y > previousObject.y && secondObject.y + secondObject.height + 10 < previousObject.y + previousObject.height + 10) {\r\n            startY = secondObject.y + (secondObject.height + 10) / 2;\r\n            startX = secondObject.x;\r\n\r\n            endX = previousObject.x + previousObject.width;\r\n            endY = startY;\r\n\r\n        }\r\n        //Top Left and peeking\r\n        else if (previousObject.y + previousObject.height + 10 > secondObject.y && secondObject.y > previousObject.y) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.height = secondObject.height + (secondObject.y - previousObject.y);\r\n                secondObject.y = previousObject.y;\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = previousObject.x + previousObject.width;\r\n                endX = secondObject.x;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n                console.log(\"m\");\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                let increase = previousObject.height + 10 + ((secondObject.y + secondObject.height) - (previousObject.y + previousObject.height));\r\n                //looks at x coord and y coord and @ that coord checks if there's a box\r\n                //resizeVars[0] returns the box if there is a\r\n                //resizeVars[1] is which side/corner of the box that its coords are expected to be at (else null)\r\n                let resizeVars = checkResizeBounds(previousObject.x + previousObject.width, previousObject.y + previousObject.height + 10);\r\n                console.log(resizeVars);\r\n                resizeVars[0].expandSide(resizeVars[1], previousObject.x + previousObject.width, previousObject.y + increase, canvasContext);\r\n\r\n\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n                startX = secondObject.x;\r\n\r\n                endX = previousObject.x + previousObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n                console.log(\"n\");\r\n            }\r\n        }\r\n        //Bottom Left and peeking\r\n        else if (secondObject.y + secondObject.height + 10 > previousObject.y && previousObject.y + previousObject.height + 10 > secondObject.y + secondObject.height + 10) {\r\n            if (blockPre <= blockSec) {\r\n\r\n                let increase = secondObject.y + secondObject.height + 10 + ((previousObject.y + previousObject.height + 10) - (secondObject.y + secondObject.height + 10));\r\n\r\n                let resizeVars = checkResizeBounds(secondObject.x + secondObject.width, secondObject.y + secondObject.height + 10);\r\n                console.log(resizeVars);\r\n                resizeVars[0].expandSide(resizeVars[1], secondObject.x + secondObject.width, increase, canvasContext);\r\n\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = secondObject.x;\r\n\r\n                endX = previousObject.x + previousObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n                console.log(\"o\");\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                previousObject.height = previousObject.height + 10 + (previousObject.y - secondObject.y);\r\n                previousObject.y = secondObject.y;\r\n\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n                startX = secondObject.x;\r\n\r\n                endX = previousObject.x + previousObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n                console.log(\"p\");\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    //Previous object is right side\r\n    else if (previousObject.x > (secondObject.x + secondObject.width)) {\r\n\r\n        //Previous is smaller and on inside\r\n        if (previousObject.y > secondObject.y && previousObject.y + previousObject.height < secondObject.y + secondObject.height) {\r\n            startY = previousObject.y + (previousObject.height + 10) / 2;\r\n            startX = previousObject.x;\r\n\r\n            endX = secondObject.x + secondObject.width;\r\n            endY = startY;\r\n\r\n        }\r\n        //Second is smaller and on inside\r\n        else if (secondObject.y > previousObject.y && secondObject.y + secondObject.height < previousObject.y + previousObject.height) {\r\n            startY = secondObject.y + (secondObject.height + 10) / 2;\r\n            startX = secondObject.x + secondObject.width;\r\n\r\n            endX = previousObject.x;\r\n            endY = startY;\r\n\r\n            console.log(\"r\");\r\n        }\r\n        //Top Right and peeking\r\n        else if (previousObject.y + previousObject.height + 10 > secondObject.y && secondObject.y > previousObject.y) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.height = secondObject.height + 10 + (secondObject.y - previousObject.y);\r\n                secondObject.y = previousObject.y;\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = previousObject.x;\r\n\r\n                endX = secondObject.x + secondObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n                console.log(\"s\");\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                previousObject.height = previousObject.height + 10 + ((secondObject.y + secondObject.height + 10) - (previousObject.y + previousObject.height + 10));\r\n\r\n                startX = secondObject.x + secondObject.width;\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n\r\n                endX = previousObject.x;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n                console.log(\"t\");\r\n            }\r\n\r\n        }\r\n        //Bottom Left and peeking\r\n        else if (secondObject.y + secondObject.height + 10 < previousObject.y + previousObject.height + 10 && previousObject.y < secondObject.y + secondObject.height + 10) {\r\n            if (blockPre <= blockSec) {\r\n                let increase = secondObject.height + 10 + ((previousObject.y + previousObject.height + 10) - (secondObject.y + secondObject.height + 10));\r\n                let resizeVars = checkResizeBounds(secondObject.x + secondObject.width, secondObject.y + secondObject.height + 10);\r\n                console.log(resizeVars);\r\n                resizeVars[0].expandSide(resizeVars[1], secondObject.x + secondObject.width, secondObject.y + increase, canvasContext);\r\n\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = previousObject.x;\r\n\r\n                endX = secondObject.x + secondObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n                console.log(\"u\");\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                let increase = previousObject.height + 10 + (previousObject.y - secondObject.y);\r\n                let resizeVars = checkResizeBounds(previousObject.x + previousObject.width, previousObject.y + previousObject.height + 10);\r\n                console.log(resizeVars);\r\n                resizeVars[0].expandSide(resizeVars[1], previousObject.x + previousObject.width, previousObject.y + increase, canvasContext);\r\n\r\n                previousObject.y = secondObject.y;\r\n\r\n\r\n                startX = previousObject.x;\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n\r\n                endX = secondObject.x + secondObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n                console.log(\"v\");\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    arrowPath.push(getConnectionDataForArrow(startX, startY).coord);\r\n\r\n\r\n    let newObject = createObject(canvas, startX, startY, endX, endY);\r\n\r\n\r\n\r\n    return newObject;\r\n\r\n\r\n\r\n}\r\n//\r\nexport function collectMehBox(boxes, arrows, bigbox, item, index) {\r\n\r\n    //console.log(\"runningcollect\");\r\n    if (bigbox.semanticIdentity.UUID === item.destVertexUUID) {\r\n        let box = getObjectFromUUID(item.sourceVertexUUID);\r\n        if ((bigbox.y) * index + (box.y) * (1 - index) > (box.y + box.height + 10) * index + (bigbox.y + bigbox.height + 10) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n\r\n\r\n    } else if (bigbox.semanticIdentity.UUID === item.sourceVertexUUID) {\r\n        let box = getObjectFromUUID(item.destVertexUUID);\r\n        if ((bigbox.y) * index + (box.y) * (1 - index) > (box.y + box.height + 10) * index + (bigbox.y + bigbox.height + 10) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n    }\r\n    return [boxes, arrows];\r\n}\r\n//Will arrange boxes and arrows in linked order above or below the big box.\r\n//Bigbox - The larger important box\r\n//boxes - list of all the boxes being moved\r\n//arrows - arrows connect to the above boxes\r\n//index - denotes the side that boxes are connected to \r\nexport function arrangeboxesandarrows(bigbox, boxes, arrows, index) {\r\n    //index = 1 = up\r\n    if (boxes.length >= 2) {\r\n        let b = 0;\r\n        let x = bigbox.x;\r\n        let y = bigbox.y + (bigbox.height + 30) * (1 - index);\r\n        for (b; b < boxes.length; b++) {\r\n            boxes[b].x = x;\r\n            boxes[b].y = y - ((boxes[b].height + 30) * index);\r\n            x = x + boxes[b].width + 20;\r\n\r\n            if (boxes[b].x + boxes[b].width > bigbox.x + bigbox.width) {\r\n                bigbox.width = bigbox.width + boxes[b].width\r\n            }\r\n        }\r\n        b = 0;\r\n        for (b; b < boxes.length; b++) {\r\n            console.log(arrows[b]);\r\n            let conData = getConnectionDataForArrow(boxes[b].x + boxes[b].width / 2, bigbox.y + (bigbox.height + 10) * (1 - index));\r\n            arrows[b].pathData[1] = conData['nearest'];\r\n            StickArrowToObject(conData, arrows[b], 1);\r\n        }\r\n    }\r\n}\r\n//\r\nexport function collectsidebox(boxes, arrows, bigbox, item, index) {\r\n\r\n    if (bigbox.semanticIdentity.UUID === item.destVertexUUID) {\r\n        let box = getObjectFromUUID(item.sourceVertexUUID);\r\n        if ((bigbox.x) * index + (box.x) * (1 - index) > (box.x + box.width) * index + (bigbox.x + bigbox.width) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n\r\n\r\n    } else if (bigbox.semanticIdentity.UUID === item.sourceVertexUUID) {\r\n        let box = getObjectFromUUID(item.destVertexUUID);\r\n        if ((bigbox.x) * index + (box.x) * (1 - index) > (box.x + box.width) * index + (bigbox.x + bigbox.width) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n    }\r\n    return [boxes, arrows];\r\n}\r\nexport function arrangeboxesandarrowshorizontal(bigbox, boxes, arrows, index) {\r\n    //index = 0 = right\r\n    if (boxes.length >= 2) {\r\n        let b = 0;\r\n        let x = bigbox.x + (bigbox.width + 30) * (1 - index);\r\n        let y = bigbox.y;\r\n        for (b; b < boxes.length; b++) {\r\n            boxes[b].x = x - ((boxes[b].width + 30) * index);\r\n            boxes[b].y = y;\r\n            y = y + boxes[b].height + 20;\r\n            //extending box\r\n            if (boxes[b].y + boxes[b].height + 10 > bigbox.y + bigbox.height + 10) {\r\n                bigbox.height = bigbox.height + boxes[b].height;\r\n            }\r\n        }\r\n        b = 0;\r\n        for (b; b < boxes.length; b++) {\r\n            console.log(arrows[b]);\r\n            let conData = getConnectionDataForArrow(bigbox.x + (bigbox.width) * (1 - index), boxes[b].y + (boxes[b].height + 10) / 2);\r\n            arrows[b].pathData[1] = conData['nearest'];\r\n            StickArrowToObject(conData, arrows[b], 1);\r\n        }\r\n    }\r\n}\r\n\r\nexport function shiftBoxes(secondObject) {\r\n    //if box is within horizontal bounds\r\n\r\n    let upBoxes = [];\r\n    let upArrows = [];\r\n    let downBoxes = [];\r\n    let downArrows = [];\r\n    let leftBoxes = [];\r\n    let leftArrows = [];\r\n    let rightBoxes = [];\r\n    let rightArrows = [];\r\n    let [bigBox, smallBox] = checkBoxSizesAndReturnBigBox(previousObject, secondObject);\r\n\r\n    //grab all arrows connected to either object\r\n    //Index 0 means down index 1 means up\r\n\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n            //get the big box because it has all the arrows connected\r\n            if (bigBox.y + bigBox.height + 10 < smallBox.y && smallBox.x > bigBox.x && smallBox.x + smallBox.width < bigBox.x + bigBox.width) {\r\n                [downBoxes, downArrows] = collectMehBox(downBoxes, downArrows, bigBox, item, 0);\r\n\r\n\r\n            } else if (bigBox.y > (smallBox.y + smallBox.height + 10) && smallBox.x > bigBox.x && smallBox.x + smallBox.width < bigBox.x + bigBox.width) {\r\n                [upBoxes, upArrows] = collectMehBox(upBoxes, upArrows, bigBox, item, 1);\r\n\r\n            } else if (bigBox.x > smallBox.x + smallBox.width && smallBox.y > bigBox.y && smallBox.y + smallBox.height + 10 < bigBox.y + bigBox.height + 10) {\r\n                console.log(\"left ran\");\r\n                [leftBoxes, leftArrows] = collectsidebox(leftBoxes, leftArrows, bigBox, item, 1);\r\n\r\n            } else if (bigBox.x + bigBox.width < smallBox.x && smallBox.y > bigBox.y && smallBox.y + smallBox.height + 10 < bigBox.y + bigBox.height + 10) {\r\n                console.log(\"right ran\");\r\n                [rightBoxes, rightArrows] = collectsidebox(rightBoxes, rightArrows, bigBox, item, 0);\r\n            }\r\n        }\r\n    });\r\n    //Do stuff to boxes\r\n    //1 = up\r\n    //0 = down\r\n    arrangeboxesandarrows(bigBox, downBoxes, downArrows, 0);\r\n    arrangeboxesandarrows(bigBox, upBoxes, upArrows, 1);\r\n\r\n    arrangeboxesandarrowshorizontal(bigBox, leftBoxes, leftArrows, 1);\r\n    arrangeboxesandarrowshorizontal(bigBox, rightBoxes, rightArrows, 0);\r\n\r\n    //console.log(downboxes.length);\r\n\r\n\r\n\r\n}\r\n\r\nexport function onLeftMouseRelease(canvas, x, y) {\r\n\r\n\r\n    if (cancelDraw) {\r\n        cancelDraw = false;\r\n        return;\r\n    }\r\n\r\n    if (resizing === true) {\r\n        resizing = false;\r\n        canvasElement.onmousemove = null;\r\n        return\r\n    }\r\n\r\n    // Disable example draw\r\n    canvasElement.onmousemove = null;\r\n\r\n    if (arrowToolSelected()) {\r\n        \r\n\r\n        if (getConnectionDataForArrow(x, y).snapped && !firstArrowJoint) {\r\n            // Create\r\n            let secondObject = findIntersected(x, y);\r\n            let newObject = null;\r\n            let firstObject = arrowPath[0] // the first position in the arrowpath array will either be null or the first vertex that is clicked with an arrow. \r\n                                            // therefor the arrow will not be created unless the first object that is clicked with the arrow tool is a vertex. - cooper\r\n            \r\n            if (firstObject !== null && secondObject !== null && savedArrows !== null) {\r\n                // create the arrow using the createObject function rather than the other function they were using as this seems much more stable - cooper\r\n                // also deleted a weird forloop that they had that i assume was for stopping the arrow overlap issue, but they themselves commented that it doesnt work\r\n                newObject = createObject(canvas, mouseStartX, mouseStartY, x, y); \r\n               \r\n            } \r\n\r\n            // Reset path\r\n            arrowPath = [];\r\n            firstArrowJoint = true;\r\n\r\n\r\n            if (newObject !== null) {\r\n                addObject(newObject);\r\n            }\r\n\r\n\r\n            drawAll(currentObjects);\r\n\r\n\r\n\r\n            //converting all arrows to savedArrows array\r\n            let i = 0;\r\n            currentObjects.flatten().forEach((item) => {\r\n                if (item.typeName === \"Arrow\") {\r\n                    savedArrows[i] = item.path;\r\n                    i++;\r\n                }\r\n\r\n            });\r\n\r\n            if (newObject !== null) {\r\n                canvas.props.setLeftMenu(newObject);\r\n            }\r\n\r\n            canvas.props.setMode(Tool.Select);\r\n            if (previousObject !== null && secondObject !== null) {\r\n                shiftBoxes(secondObject);\r\n            }\r\n            previousObject = null;\r\n\r\n\r\n        } else {\r\n            //maybe here where we can disable compound lines\r\n\r\n            //save object here\r\n            previousObject = findIntersected(x, y);\r\n            \r\n        \r\n\r\n            arrowPath.push(getConnectionDataForArrow(x, y).coord);\r\n            lastX = x;\r\n            lastY = y;\r\n            canvasElement.onmousemove = function (e) {\r\n                onMouseMove(e, canvas)\r\n            };\r\n            firstArrowJoint = false;\r\n        }\r\n\r\n    }\r\n\r\n    if (canvas.tool === Tool.Vertex) {\r\n        let newObject = createObject(canvas, mouseStartX, mouseStartY, x, y);\r\n        addObject(newObject);\r\n\r\n        canvas.props.setLeftMenu(newObject);\r\n        canvas.props.setMode(Tool.Select);\r\n        createSaveState();\r\n    }\r\n    if (canvas.tool === Tool.Artifact) {\r\n        let newObject = createArtifact(canvas, mouseStartX, mouseStartY);\r\n        addObject(newObject);\r\n\r\n        canvas.props.setLeftMenu(newObject);\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n    if (canvas.tool === Tool.Container) {\r\n        let newObject = createContainer(canvas, mouseStartX, mouseStartY);\r\n        newObject.setColour(\"#FFFFFF\");\r\n        addObject(newObject);\r\n        canvas.props.setLeftMenu(newObject);\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n\r\n\r\n\r\n\r\n    drawAll(currentObjects);\r\n\r\n}\r\n\r\nfunction onMouseMove(e, canvas) {\r\n    dragging = true;\r\n    let position = getGraphXYFromMouseEvent(e);\r\n\r\n    // Redraw Existing Objects\r\n    drawAll(currentObjects);\r\n\r\n    // Draw the new object\r\n    let newObject = createObject(canvas, mouseStartX, mouseStartY, position[0], position[1]);\r\n\r\n    canvasContext.globalAlpha = 0.75;\r\n    if (newObject !== null) {\r\n        newObject.draw(canvasContext);\r\n    }\r\n    canvasContext.globalAlpha = 1.0;\r\n    dragging = false;\r\n}\r\n\r\nexport function onMiddleClick(canvas, x, y, savedObjects = null, shiftDown = false) {\r\n    // for arrows\r\n    startMoveX = x;\r\n    startMoveY = y;\r\n    // selecting the object based on coordinate\r\n    // if it doesnt find an object dont run it\r\n\r\n    let selectedObject = findIntersected(x, y);\r\n\r\n    //compareSizesToMoveAll returns any connected vertices to the selected along with the arrows themselves to be updated\r\n    let [friendObject, arrowsVert, arrowsHoriz, allArrows] = compareSizesToMoveAll(selectedObject);\r\n\r\n        //If the selected block has a friend (connected by arrow) it will begin to try and identify friends of friends\r\n    if (friendObject !== null || friendObject.length >= 1) {\r\n        let ObjectsToCheck = friendObject;\r\n        let nextObjects = [];\r\n\r\n        //For loop to check all the closest friends (connected directly to selected )\r\n        for (let n = 0; n < ObjectsToCheck.length; n++) {\r\n            let [newfriendObject, newarrowsVert, newarrowsHoriz] = compareSizesToMoveAll(ObjectsToCheck[n]);\r\n            if (newfriendObject !== null) {\r\n\r\n                //for loop to check for duplicates and remove if any\r\n                for (let nf = 0; nf < newfriendObject.length; nf++) {\r\n                    console.log(ObjectsToCheck.length)\r\n                    for (let of = 0; of < ObjectsToCheck.length; of++) {\r\n                        //doesn't get run?:\r\n                        if (newfriendObject[nf].semanticIdentity.UUID === ObjectsToCheck[of].semanticIdentity.UUID) {\r\n                            newfriendObject.splice(nf, 1);\r\n                        }\r\n                    }\r\n                }\r\n                //Adds the objects that are connected to the friends to the friend list.\r\n                if (newfriendObject.length >= 1) {\r\n                    for (let p = 0; p < newfriendObject.length; p++) {\r\n                        nextObjects.push(newfriendObject[p]);\r\n                        friendObject.push(newfriendObject[p]);\r\n                    }\r\n\r\n                } \r\n            }\r\n           \r\n        }\r\n        //Updates the friendlist to begin a new search. \r\n        ObjectsToCheck = nextObjects; \r\n\r\n\r\n\r\n    }\r\n    let F = [];\r\n    if (friendObject !== null) {\r\n        let i = 0;\r\n        for (i; i < friendObject.length; i++) {\r\n            F.push([x - friendObject[i].x, y - friendObject[i].y]); //distance from mouse to actual object's x, y\r\n            //console.log(F);\r\n        }\r\n    }\r\n\r\n    let S = []; //previous coords\r\n    if (savedObjects !== null) {\r\n        let i = 0;\r\n        for (i; i < savedObjects.length; i++) {\r\n            S.push([x - savedObjects[i].x, y - savedObjects[i].y]);\r\n            //console.log(F);\r\n        }\r\n    }\r\n\r\n    if (selectedObject !== null) {\r\n        saveBlockStates(canvas, x, y);\r\n        // check the distance between the mouse and the object\r\n        let saveDisX = x - selectedObject.x;\r\n        let saveDisY = y - selectedObject.y;\r\n\r\n\r\n        canvasElement.onmousemove = function (e) { moveObject(e, selectedObject, friendObject, F, savedObjects, S, saveDisX, saveDisY, arrowsVert, arrowsHoriz, allArrows, shiftDown) }\r\n    }\r\n\r\n}\r\n\r\nexport function onMouseLeave() {\r\n    canvasElement.onmousemove = {};\r\n    firstArrowJoint = true;\r\n    drawAll()\r\n}\r\n\r\n// moving objects in respect to cursor values saveDisX, saveDisY\r\n// friends = the smaller boxes that are connected to the bigger box\r\nfunction moveObject(e, object, friends, F, savedObjects = null, S, saveDisX, saveDisY, arrowsVert, arrowsHoriz, allArrows, shiftDown) {\r\n    if (object != null) {\r\n        if (object.typeName === \"Vertex\") {\r\n            let position = getGraphXYFromMouseEvent(e);\r\n            let x = position[0] - saveDisX;\r\n            let y = position[1] - saveDisY;\r\n\r\n            //for loop iterate through all boxes assume they not empty\r\n            if (shiftDown) {\r\n                if (friends !== null) {\r\n                    let i = 0;\r\n                    //check friends' previous location and cursors location\r\n                    for (i; i < friends.length; i++) {\r\n                        friends[i].x = position[0] - F[i][0];\r\n                        friends[i].y = position[1] - F[i][1];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (savedObjects !== null) {\r\n                let i = 0;\r\n                //check friends' previous location and cursors location\r\n                for (i; i < savedObjects.length; i++) {\r\n                    savedObjects[i].x = position[0] - S[i][0];\r\n                    savedObjects[i].y = position[1] - S[i][1];\r\n                }\r\n            }\r\n\r\n\r\n            \r\n            if (arrowsVert !== null) {\r\n                let conData = 0;\r\n                let j = 0;\r\n\r\n                for (j; j < arrowsVert.length; j++) {\r\n                    // source = one that's been clicked\r\n                    arrowsVert[j].path[1][0] = arrowsVert[j].path[0][0];\r\n                    conData = getConnectionDataForArrow(arrowsVert[j].path[1][0], arrowsVert[j].path[1][1]);\r\n\r\n\r\n                    \r\n\r\n                    \r\n                        StickArrowToObject(conData, arrowsVert[j], 0);\r\n                        //console.log(arrowsVert[j].path);\r\n                }\r\n            }\r\n            else if (arrowsHoriz !== null) {\r\n                let conData = 0;\r\n                let k = 0;\r\n                for (k; k < arrowsHoriz.length; k++) {\r\n                    // source = one that's been clicked\r\n                    arrowsHoriz[k].path[1][1] = arrowsHoriz[k].path[0][1];\r\n                    conData = getConnectionDataForArrow(arrowsHoriz[k].path[1][0], arrowsHoriz[k].path[1][1]);\r\n                    \r\n               \r\n\r\n                        StickArrowToObject(conData, arrowsHoriz[k], 0);\r\n                        //console.log(arrowsHoriz[k].path);\r\n                  \r\n                }\r\n            }\r\n            else if (allArrows !== null){\r\n            }\r\n\r\n            object.x = x;\r\n            object.y = y;\r\n\r\n            updateArrows();\r\n\r\n\r\n        } else if (object.typeName === \"Arrow\") {\r\n            return;\r\n\r\n        }\r\n    }\r\n}\r\nexport function updateArrows() {\r\n    let flattenedObjects = currentObjects.flatten();\r\n    flattenedObjects.forEach((item) => {\r\n        if (item !== null) {\r\n            if (item.typeName === \"Arrow\") {\r\n                item.rebuildPath();\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function solidifyObject() {\r\n    canvasElement.onmousemove = null;\r\n}\r\n\r\n// Zoom and pan\r\nexport function setZoom(newZoom) {\r\n    zoom = newZoom;\r\n\r\n    resetMouseOrigin();\r\n\r\n    drawAll();\r\n}\r\n\r\n// Useful for debugging\r\nexport function drawMarker(xpos, ypos) {\r\n    const radius = 2;\r\n    const lineWidth = 0.5;\r\n    const strokeColour = \"#007ACC\";\r\n    const fillColour = \"#007ACC55\";\r\n\r\n    let oldLineWidth = canvasContext.lineWidth;\r\n    canvasContext.lineWidth = lineWidth;\r\n    let oldStrokeStyle = canvasContext.strokeStyle;\r\n    canvasContext.strokeStyle = strokeColour;\r\n    let oldFillStyle = canvasContext.fillStyle;\r\n    canvasContext.fillStyle = fillColour;\r\n\r\n    canvasContext.globalAlpha = 1.0;\r\n    canvasContext.beginPath();\r\n    canvasContext.arc(xpos, ypos, radius, 0, Math.PI * 2, false);\r\n    canvasContext.fill();\r\n    canvasContext.stroke();\r\n    canvasContext.closePath();\r\n\r\n    canvasContext.lineWidth = oldLineWidth;\r\n    canvasContext.strokeStyle = oldStrokeStyle;\r\n    canvasContext.fillStyle = oldFillStyle;\r\n}\r\n\r\n// Gets the distance between x1, y1 and x2, y2\r\nexport function getDistance(x1, y1, x2, y2) {\r\n    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\r\n}\r\n\r\n// Finds the object that is intersected with the cursor, returns null if no objects are intersected\r\nexport function findIntersected(x, y) {\r\n    let selectedItem = null;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item !== null) {\r\n            if (item.intersects(x, y)) {\r\n                //console.log(\"Intersection detected with \", item.typeName);\r\n                selectedItem = item;\r\n            }\r\n        }\r\n    });\r\n    return selectedItem;\r\n}\r\n\r\nfunction createArtifact(canvas, x1, y1) {\r\n    let newPath;\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    if (canvas.tool === Tool.Artifact) {\r\n        // Get positions\r\n        let pos = orderCoordinates(x1, y1, x1 + 450, y1 + 50);\r\n        let vy1 = findNearestGridY(pos[1], 0);\r\n        let vy2 = findNearestGridY(pos[3], 0);\r\n\r\n        // Add vertex\r\n        return new Vertex({title: \"\", content: [\"\"], x:  pos[0], y:  findNearestGridY(y1, 1), width: pos[2] - pos[0], height: vy2 - vy1});\r\n        \r\n\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction createContainer(canvas, x1, y1) {\r\n    let newPath;\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    if (canvas.tool === Tool.Container) {\r\n        // Get positions\r\n        let pos = orderCoordinates(x1, y1, x1 + 100, y1 + 60);\r\n        let vy1 = findNearestGridY(pos[1], 0);\r\n        let vy2 = findNearestGridY(pos[3], 0);\r\n\r\n        // Add Container\r\n        let newVert =  new Vertex({title: \"new Container\", content: [\"\"], x: pos[0], y: findNearestGridY(y1, 1), width: pos[2] - pos[0], height: vy2 - vy1});\r\n        newVert.setIsContainer(true);\r\n        return newVert;\r\n\r\n    }\r\n    return null;\r\n}\r\n\r\n//Links the container with the mirrorSemantic to the container with the Base (Mirror becomes base)\r\n\r\nexport function linkContainer(baseUUID,mirrorUUID){\r\n    let baseSemantic = null;\r\n    console.log(currentObjects.rootVertices) \r\n    //Since rootvertices was made as a set, cant just find indexes to reference, have to keep for looping to what we want\r\n    for(let i of currentObjects.rootVertices){\r\n        if(i.vertex.semanticIdentity.UUID === baseUUID){\r\n            baseSemantic = i;\r\n            break\r\n        }\r\n    }\r\n    for(let i of currentObjects.rootVertices){\r\n        if(i.vertex.semanticIdentity.UUID === mirrorUUID){\r\n            i.vertex.semanticIdentity = baseSemantic.vertex.semanticIdentity;\r\n            break\r\n        }\r\n    }\r\n    for(let i of currentObjects.rootVertices){\r\n        if(i.vertex.semanticIdentity.UUID === baseUUID){\r\n            updateLinkedContainers(baseSemantic.vertex);\r\n        }\r\n    }\r\n\r\n    console.log(currentObjects.rootVertices)\r\n\r\n}\r\n//Updates the appearances of linked containers to match the input container\r\n//Without a source container or doing a general scan, containers would be matched to copy the first vertex in the set, not the one that most recently changed\r\nexport function updateLinkedContainers(inputContainer){\r\n    for(let i of currentObjects.rootVertices){\r\n        if(inputContainer.semanticIdentity.UUID === i.vertex.semanticIdentity.UUID){\r\n            i.vertex.title = inputContainer.title\r\n            i.vertex.content = inputContainer.content\r\n            i.vertex.icons = inputContainer.icons\r\n            i.vertex.colour = inputContainer.colour\r\n            i.vertex.imageElements = inputContainer.imageElements\r\n            i.vertex.fontSize = inputContainer.fontSize\r\n        }\r\n    }\r\n    drawAll()\r\n}\r\n\r\n//Function for creating a vertex object without the left menu tools - Lachlan\r\nexport function createVertex(x1, y1, width, height,name,content,colour,icons,imageElements,fontSize,semanticIdentity){\r\n\r\n    return new Vertex({title: name,content: content, colour: colour, x: x1, y: findNearestGridY(y1, 1), width: width, height: height, semanticIdentity: semanticIdentity});\r\n\r\n}\r\n\r\nexport function updateVertex(selectedObject){ // function to update the data of the contaimnment tree object and all other objects sharing the semantic- cooper\r\n    let vertex;\r\n    if(selectedObject.type !== \"treeVertex\"){\r\n        vertex = getLinkedVertex(selectedObject); // 'vertex' refers to the treeview object.\r\n\r\n        vertex.text = selectedObject.title + \" 🟧\";\r\n        vertex.content = selectedObject.content;\r\n        vertex.width = selectedObject.width;\r\n        vertex.height = selectedObject.height;\r\n\r\n        if(vertex.parentRenderKey === selectedObject.vertexRenderKey){\r\n            console.log(vertex)\r\n            console.log(selectedObject)\r\n        }\r\n        else{\r\n        \r\n        }\r\n    }\r\n    else{\r\n        vertex = selectedObject;\r\n    }\r\n\r\n\r\n    for(let verticies of currentObjects.flatten()){\r\n        if(vertex.semanticIdentity.UUID === verticies.originalUUID && verticies !== selectedObject){ // updates all of the canvas objects that come from the treeview object.\r\n\r\n            //check if This graph vertex is in a different folder to the base vertex, if so make it white and add location\r\n            //console.log(vertex.parentRenderKey)\r\n            //console.log(verticies.vertexRenderKey)\r\n\r\n            if(vertex.parentRenderKey === verticies.vertexRenderKey){\r\n                \r\n            //If the vertex's model is in same folder\r\n            verticies.title = vertex.text.replace(\" 🟧\", \"\")\r\n            verticies.colour = vertex.colour;\r\n            verticies.content = vertex.content;\r\n            }\r\n            else{\r\n            verticies.title = vertex.text.replace(\" 🟧\", \"\")\r\n            verticies.colour = \"#FFFFFF\";\r\n            verticies.content = vertex.content;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getLinkedVertex(selectedObject){ // grabs the contaiment tree object - cooper\r\n    for(let vertex of vertexData){\r\n        if(vertex.semanticIdentity.UUID === selectedObject.originalUUID)\r\n        return vertex;\r\n    }\r\n}\r\n\r\nfunction createObject(canvas, x1, y1, x2, y2) {\r\n    let newPath;\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    if (canvas.tool === \"Vertex\" && dragging === false) {\r\n        // Get positions\r\n        let pos = orderCoordinates(x1, y1, x2 + 10, y2);\r\n        let vy1 = findNearestGridY(pos[1], 0);\r\n        let vy2 = findNearestGridY(pos[3], 0);\r\n\r\n        // Add vertex\r\n        console.log(\"draw vertex\")\r\n        let newVert = handleAddVertex(\"Drawn Vertex\" ,getCurrentRenderKey())\r\n        console.log(newVert.semanticIdentity.UUID)\r\n\r\n        return new Vertex({title: \"Drawn Vertex\", content: newVert,colour: newVert.colour, x: pos[0], y: findNearestGridY(y1, 1), width: pos[2] - pos[0], height: vy2 - vy1, semanticIdentity: newVert.semanticIdentity});\r\n        \r\n\r\n    } else if (arrowToolSelected()) {\r\n        // Generate path\r\n\r\n        newPath = arrowPath.concat([getConnectionDataForArrow(x2, y2).coord]);\r\n\r\n        // Check if first path connects to a vertex, and ignore if it doesn't\r\n        // Should be 0 if the connectable connects to a vertex\r\n        //\r\n        //\r\n        //because createObject is always running when moving mouse\r\n        //\r\n        // if current mouse pos is not over a box, don't create arrow\r\n        // if removed here, it is still removed in another function \r\n        //let intersection = findIntersected(x2, y2);\r\n        if (newPath[0][0] !== 0) {\r\n            return null;\r\n        }\r\n\r\n        // Create arrow\r\n        \r\n        let arrow = new Arrow(currentObjectsFlattened, newPath, arrowType);\r\n        arrow.rebuildPath(currentObjectsFlattened);\r\n        return arrow;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function getGraphXYFromMouseEvent(e) {\r\n    resetMouseOrigin();\r\n\r\n    let x = (e.clientX - mouseOriginX) / getEffectiveZoom();\r\n    let y = (e.clientY - mouseOriginY) / getEffectiveZoom();\r\n\r\n    return [x, y];\r\n}\r\n\r\nexport function getDownload() {\r\n\r\n    let DLelement = document.createElement(\"a\");\r\n    DLelement.href = canvasElement.toDataURL(\"image/png\").replace(/^data:image\\/[^;]/, 'data:application/octet-stream');\r\n    DLelement.download = \"Graph.png\";\r\n    document.body.appendChild(DLelement);\r\n    DLelement.click();\r\n\r\n}\r\n\r\nfunction orderCoordinates(sx, sy, ex, ey) {\r\n    // This code also ensures x1 < x2 and y1 < y2\r\n    let x1 = Math.min(sx, ex);\r\n    let y1 = Math.min(sy, ey);\r\n    let x2 = Math.max(sx, ex);\r\n    let y2 = Math.max(sy, ey);\r\n\r\n    return [x1, y1, x2, y2];\r\n}\r\n\r\n// Gets the effective (percentage) zoom from the current zoom\r\nfunction getEffectiveZoom() {\r\n    return zoom / 100;\r\n}\r\n\r\n// This should be used whenever the window itself resizes\r\nfunction recalculateScale() {\r\n    // Adjusts the aspect ratio so it is 1:1 instead of matching the windows.\r\n    // Also removes blurry rendering\r\n    //let dpi = window.devicePixelRatio;\r\n    let canvasContainer = document.getElementsByClassName(\"Canvas\")[0];\r\n    let styleHeight = +getComputedStyle(canvasContainer).getPropertyValue(\"height\").slice(0, -2);\r\n    let styleWidth = +getComputedStyle(canvasContainer).getPropertyValue(\"width\").slice(0, -2);\r\n\r\n    canvasElement.setAttribute('height', styleHeight * getEffectiveZoom());\r\n    canvasElement.setAttribute('width', styleWidth * getEffectiveZoom());\r\n\r\n    // Configurable\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n}\r\n\r\nfunction clearCanvas() {\r\n    // Fill base canvas\r\n    canvasContext.fillStyle = \"#ffffff\";\r\n    canvasContext.fillRect(0, 0, canvasWidth, canvasHeight);\r\n}\r\n","import { ClickAwayListener } from '@material-ui/core';\r\nimport React from 'react';\r\nimport {getFolderData,setFolderData,getModelData,getSelectedFolderKey,setSelectedFolderKey,handleModelRebase,handleRenameFolder, handleAddModel, getModelNameFromKey, folderData, modelObjects, handleAddFolder, handleDeleteFolder, handleDeleteModel, handleRenameModel} from \"./ContainmentTree\"\r\nimport {getCurrentRenderKey, setNewRenderKey, getCurrentModel, setNewModel, findIntersected, getGraphXYFromMouseEvent, getObjectFromUUID, getCurrentObjects,setCurrentObjects,\r\n    linkContainer,updateLinkedContainers, currentObjects, drawAll, updateVertex} from \"./CanvasDraw\";\r\nimport {setLeftMenuToTree} from \"./LeftMenu\"\r\nimport { ContactsOutlined, LocalConvenienceStoreOutlined } from '@material-ui/icons';\r\nimport {getSemanticIdentity} from \"../DataStructures/Vertex\"\r\nimport {handleAddVertex, handleDeleteVertex, getVertexData} from \"./ContainmentTree\";\r\nimport { createSaveState } from '../Serialisation/NewFileManager';\r\nlet rightClickedItem = \"Default\"; //Name of the right clicked item where \"Default\" is a non-object such as empty canvas space\r\nlet rightClickedItemType = \"None\"\r\nlet rightClickedItemKey = 0; // Identifying key of selected item needed to use relating methods eg. selectedFolderKey, ModelKey,VertexKey.\r\nlet menuType = \"Default\"; //Which menu type to return based on the selected item and what operations are available to it\r\nlet rightClickedObject; // the canvas object which was right clicked\r\n\r\n\r\n\r\n//Right click menu component used to access certain function of program\r\nexport class ContextMenu extends React.Component {\r\n    constructor(props){ // added the constructer to drag props in from MainView class (setLeftMenuToTree function)\r\n        super(props);\r\n        \r\n    }\r\n    \r\n    \r\n    state = {\r\n        xPos: \"0px\",\r\n        yPos: \"0px\",\r\n        showMenu: false\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"click\", this.handleClick);\r\n        document.addEventListener(\"contextmenu\", this.handleContextMenu);\r\n        document.addEventListener(\"keypress\", this.handleKey);\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"click\", this.handleClick);\r\n        document.removeEventListener(\"contextmenu\", this.handleContextMenu);\r\n        document.removeEventListener(\"keypress\", this.handleKey);\r\n    }\r\n\r\n    //The handle click method will check which option has been clicked and call the relevant method\r\n    handleClick = (e) => {\r\n        //ignore clicks if context menu closed\r\n        if (this.state.showMenu) {\r\n            //console.log(e.target.id)\r\n            \r\n            //If Move model was selected, create a new context menu with available folders\r\n            if(e.target.id === \"MoveModel\"){\r\n                menuType = \"MoveModel\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(menuType === 'MoveModel' && e.target.id.includes(\"Folder\")){\r\n                let newFolderKey = e.target.id.replace(\"Folder\",'')\r\n                //console.log(newFolderKey) \r\n                handleModelRebase(rightClickedItemKey,parseInt(newFolderKey));\r\n                console.log(\"model \", rightClickedItemKey, \" moved to folder id \",newFolderKey)\r\n                this.setState({showMenu: false})\r\n                this.props.setLeftMenuToTree();\r\n            }\r\n            else if(e.target.id === \"Rename\"){\r\n                menuType = \"Rename\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"RenameVertex\"){\r\n                menuType = \"RenameVertex\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"RenameModel\"){\r\n                menuType = \"RenameModel\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"AddVertex\"){\r\n                menuType = \"AddVertex\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"AddGraph\"){\r\n                menuType = \"AddGraph\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"AddPackage\"){\r\n                menuType = \"AddPackage\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"DeletePackage\"){\r\n                menuType = \"DeletePackage\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"DeleteVertex\"){\r\n                menuType = \"DeleteVertex\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"DeleteModel\"){\r\n                menuType = \"DeleteModel\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"DeleteVertexConfirmed\"){\r\n                for(let vertex of getVertexData()){\r\n                    if(vertex.renderKey === rightClickedItemKey){\r\n                        handleDeleteVertex(vertex.semanticIdentity.UUID)\r\n                    }\r\n                }\r\n                this.setState({showMenu: false})\r\n                this.props.setLeftMenuToTree();\r\n                createSaveState();\r\n            }\r\n            else if(e.target.id === \"DeletePackageConfirmed\"){\r\n                for(let folder of getFolderData()){\r\n                    if(folder.renderKey === rightClickedItemKey){\r\n                        handleDeleteFolder(rightClickedItemKey)\r\n                    }\r\n                }\r\n                this.setState({showMenu: false})\r\n                this.props.setLeftMenuToTree();\r\n                createSaveState();\r\n            }\r\n            else if(e.target.id === \"DeleteModelConfirmed\"){\r\n                for(let model of modelObjects){\r\n                    if(model.modelKey === rightClickedItemKey){\r\n                        handleDeleteModel(rightClickedItemKey)\r\n                    }\r\n                }\r\n                this.setState({showMenu: false})\r\n                this.props.setLeftMenuToTree();\r\n                createSaveState();\r\n            }\r\n            else if(e.target.id === \"RenameBox\" || e.target.id === \"CMSelected\"){ //This prevents the context menu closing when certain targets are clicked\r\n            }\r\n            else if(e.target.id === \"RenameVertexBox\" || e.target.id === \"CMSelected\"){ //This prevents the context menu closing when certain targets are clicked\r\n            }\r\n            else if(e.target.id === \"RenameModelBox\" || e.target.id === \"CMSelected\"){ //This prevents the context menu closing when certain targets are clicked\r\n            }\r\n            else if(e.target.id === \"VertexNameBox\" || e.target.id === \"CMSelected\"){ //This prevents the context menu closing when certain targets are clicked\r\n            }\r\n            else if(e.target.id === \"GraphNameBox\" || e.target.id === \"CMSelected\"){ //This prevents the context menu closing when certain targets are clicked\r\n            }\r\n            else if(e.target.id === \"PackageNameBox\" || e.target.id === \"CMSelected\"){ //This prevents the context menu closing when certain targets are clicked\r\n            }\r\n            else if(e.target.id === \"Create-Graph\"){\r\n                menuType = \"AddContainerModel\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(menuType === 'AddContainerModel' && e.target.id.includes(\"Folder\")){\r\n                console.log(rightClickedObject)  \r\n                let newFolderKey = e.target.id.replace(\"Folder\",'')\r\n                handleAddModel(rightClickedObject.title,parseInt(newFolderKey),rightClickedObject.semanticIdentity)\r\n                this.props.setLeftMenuToTree();\r\n                this.setState({showMenu: false})\r\n            }\r\n            else if(e.target.id === \"LinkContainer\"){\r\n                menuType = \"LinkContainer\";\r\n                this.setState({showMenu: true})\r\n                console.log(getCurrentObjects().rootVertices)\r\n            }\r\n            else if(menuType === 'LinkContainer' && e.target.id.includes(\"Vertex\")){\r\n                console.log(\"linking semantic\")  \r\n                let baseUUID = e.target.id.replace(\"Vertex\",'');\r\n                let mirrorUUID = rightClickedObject.semanticIdentity.UUID;\r\n                linkContainer(baseUUID,mirrorUUID)\r\n                this.props.setLeftMenuToTree();\r\n\r\n                this.setState({showMenu: false})\r\n            }\r\n            else if(e.target.id === \"Bi-Nav\"){\r\n                menuType = \"Bi-Nav\";\r\n                this.setState({showMenu: true})\r\n\r\n            }\r\n            else if(menuType === 'Bi-Nav' && e.target.id.includes(\"Nav\")){\r\n                console.log(\"navigating\")  \r\n                let keys = e.target.id.replace(\"Nav\",'');\r\n                console.log(keys)\r\n\r\n\r\n                setNewModel(parseInt(keys[0]));\r\n                setNewRenderKey(keys[1]); // automatically sets the renderkey to be the same as the models as this was causing issues - cooper\r\n                setSelectedFolderKey(keys[1]);\r\n                for (let item of currentObjects.flatten()){\r\n                    if (item.typeName === \"Vertex\" && item.getModelKey() === getCurrentModel()){\r\n                        item.setPresent();\r\n                    }\r\n                    else if (item.getModelKey() !== getCurrentModel() && item.typeName === \"Vertex\"){\r\n                        item.setAway();\r\n                    }\r\n                }\r\n                drawAll();\r\n                console.log(getCurrentModel(),getCurrentRenderKey())\r\n                this.props.setLeftMenuToTree();\r\n\r\n\r\n                this.setState({showMenu: false})\r\n            }\r\n\r\n            \r\n            else{this.setState({ showMenu: false });}\r\n            \r\n        }\r\n    }\r\n\r\n    handleKey = (e) => {\r\n        if(e.key === 'Enter'){\r\n            if(menuType === \"Rename\"){\r\n                let newName = document.getElementById(\"RenameBox\").value\r\n                handleRenameFolder(newName,rightClickedItemKey)\r\n                console.log(\"menu change\")\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){ //Not sure why theres an error here as it performs the method, then says the method doesnt exists, doesnt trigger on other uses of method either.-Lachlan\r\n                    //believe the issue is enter key event is fireing twice, will fix later, not a critical/detrimental or performance effecting issue - Lachlan\r\n                    console.log(e)\r\n                }\r\n                console.log(\"menu change fin\")\r\n                this.setState({ showMenu: false })\r\n                createSaveState();\r\n            }\r\n            else if(menuType === \"RenameModel\"){\r\n                let newName = document.getElementById(\"RenameModelBox\").value\r\n                handleRenameModel(newName,rightClickedItemKey)\r\n                console.log(\"menu change\")\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){ \r\n                    console.log(e)\r\n                }\r\n                console.log(\"menu change fin\")\r\n                this.setState({ showMenu: false })\r\n                createSaveState();\r\n            }\r\n            else if(menuType === \"RenameVertex\"){\r\n                let newName = document.getElementById(\"RenameVertexBox\").value\r\n                rightClickedObject.text = newName;\r\n                console.log(\"menu change\")\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){ \r\n                    console.log(e)\r\n                }\r\n                console.log(\"rightClickedObject\")\r\n                console.log(rightClickedObject)\r\n                updateVertex(rightClickedObject);\r\n                console.log(\"menu change fin\")\r\n                this.setState({ showMenu: false })\r\n                drawAll()\r\n                createSaveState();\r\n            }\r\n            else if(menuType === \"AddVertex\"){\r\n                \r\n                let vertexName = document.getElementById(\"VertexNameBox\").value;\r\n                handleAddVertex(vertexName, getSelectedFolderKey());\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){\r\n                    console.log(e);\r\n                }\r\n                this.setState({showMenu: false});\r\n                createSaveState();\r\n            }\r\n            else if(menuType === \"AddGraph\"){\r\n                \r\n                let graphName = document.getElementById(\"GraphNameBox\").value;\r\n                handleAddModel(graphName, getSelectedFolderKey());\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){\r\n                    console.log(e);\r\n                }\r\n                this.setState({showMenu: false});\r\n                createSaveState();\r\n            }\r\n            else if(menuType === \"AddPackage\"){\r\n                \r\n                let packageName = document.getElementById(\"PackageNameBox\").value;\r\n                handleAddFolder(packageName, getSelectedFolderKey());\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){\r\n                    console.log(e);\r\n                }\r\n                this.setState({showMenu: false});\r\n                createSaveState();\r\n            }\r\n        }\r\n        /*if(e.key === 'Enter'){\r\n            console.log(\"enter pressed\")\r\n        }\r\n        */\r\n    }\r\n\r\n    \r\n    handleContextMenu = (e) => {\r\n        e.preventDefault();//prevent default stops the regular contextmenu from appearing\r\n\r\n        /*as alot of the \"data\" is in the back end and not in the html element displayed,\r\n         we need to simulate a left click to actually select what were right clicking on in the background \r\n         */\r\n        e.target.click();\r\n\r\n        menuType = \"Default\"; //reset the menu type\r\n        rightClickedItem = \"Default\" //reset the selected item\r\n        rightClickedItemKey = 0 //reset the index\r\n        rightClickedObject = null; // reset the object\r\n        \r\n\r\n        //console.log(e.target.className)\r\n\r\n        //If target is tree node\r\n        if(e.target.className === \"jstree-anchor jstree-hovered jstree-clicked\"){\r\n            //console.log(\"clicked a tree object\")\r\n            //if target is existing folder, load the folder menu\r\n            if(e.target.text.includes(\"📁\")){\r\n                for(let folder of getFolderData()){\r\n                    if(e.target.text === folder.text){\r\n                        //console.log(\"matching folder found\")\r\n                        menuType = \"Folder\"\r\n                        rightClickedItem = e.target.text;\r\n                        rightClickedItemKey = getSelectedFolderKey();\r\n                    }\r\n                }\r\n            }\r\n\r\n            //if target is existing model, load model menu\r\n            if(e.target.text.includes(\"📈\")){\r\n                for(let model of getModelData()){\r\n                    if(e.target.text === model.text){\r\n                        //console.log(\"matching model found\")\r\n                        menuType = \"Model\"\r\n                        rightClickedItem = e.target.text;\r\n                        rightClickedItemKey = getCurrentModel();\r\n                    }\r\n                }\r\n            }\r\n            console.log(\"e.target\")\r\n            console.log(e.target)\r\n            //if target is existing vertex load vertex menu\r\n            if(e.target.text.includes(\"🟧\") || e.target.text.includes(\"📂\")){\r\n                console.log(\"e.target\")\r\n                console.log(e.target)\r\n                for(let vertex of getVertexData()){\r\n                    if(e.target.text === vertex.text){\r\n                        menuType = \"Vertex\"\r\n                        rightClickedObject = vertex;\r\n                        rightClickedItem = e.target.text;\r\n                        rightClickedItemKey = getSelectedFolderKey();\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(e.target.text === \"Root\"){\r\n                \r\n                //console.log(\"matching folder found\")\r\n                menuType = \"Root\"\r\n                rightClickedItem = e.target.text;\r\n                rightClickedItemKey = getSelectedFolderKey();\r\n            }\r\n            \r\n        }\r\n\r\n        \r\n        // if target exists within the canvas\r\n        if(e.target.id ===\"drawCanvas\"){\r\n            let position = getGraphXYFromMouseEvent(e);\r\n            let x = position[0]; let y = position[1];\r\n            rightClickedObject = findIntersected(x, y);\r\n            if(rightClickedObject !== null){\r\n                if(rightClickedObject.typeName === \"Vertex\"){\r\n                    rightClickedItem = rightClickedObject.title\r\n                    if(rightClickedObject.isContainer === true){\r\n                        menuType = \"Container\"\r\n                    }\r\n                    else{\r\n                        menuType = \"CanvasVertex\"\r\n                    }\r\n                    \r\n                }\r\n                else if(rightClickedObject.typeName === \"Arrow\"){\r\n                    let source = getObjectFromUUID(rightClickedObject.sourceVertexUUID);\r\n                    let dest = getObjectFromUUID(rightClickedObject.destVertexUUID);\r\n                    let sourceName = source.title;\r\n                    let destName = dest.title;\r\n                    rightClickedItem = \"Arrow from \" + sourceName + \" to \" + destName\r\n                    menuType = \"Arrow\"\r\n                }\r\n            }\r\n            \r\n        }\r\n        this.setState({\r\n            xPos: `${e.pageX}px`,\r\n            yPos: `${e.pageY}px`,\r\n            showMenu: true,\r\n          });\r\n        \r\n    };\r\n    \r\n\r\n    render() {\r\n        const { showMenu, yPos, xPos } = this.state;\r\n        if (showMenu){\r\n            if(menuType === \"Default\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\">Default</div>   \r\n\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Folder\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"><b>{rightClickedItem}</b></div>   \r\n                    <div className=\"CMitem\" id=\"Rename\"> Rename</div>\r\n                    <div className=\"CMitem\" id=\"AddVertex\"> Add Vertex</div>\r\n                    <div className=\"CMitem\" id=\"AddGraph\"> Add Graph</div>\r\n                    <div className=\"CMitem\" id=\"AddPackage\"> Add Package</div>\r\n                    <div className=\"CMitem\" id=\"DeletePackage\"> Delete Package</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Root\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"><b>{rightClickedItem}</b></div>   \r\n                    <div className=\"CMitem\" id=\"AddPackage\"> Add Package</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"DeletePackage\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"><b>Are you sure you wish to delete: {rightClickedItem}</b></div>   \r\n                    <div className=\"CMitem\" id=\"DeletePackageConfirmed\"> Yes, Delete this package</div>\r\n                    <div className=\"CMitem\" id=\"DeletePackageCancel\"> No</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"DeleteModel\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"><b>Are you sure you wish to delete: {rightClickedItem}</b></div>   \r\n                    <div className=\"CMitem\" id=\"DeleteModelConfirmed\"> Yes, Delete this graph</div>\r\n                    <div className=\"CMitem\" id=\"DeleteModelCancel\"> No</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"DeleteVertex\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"><b>Are you sure you wish to delete: {rightClickedItem}</b></div>   \r\n                    <div className=\"CMitem\" id=\"DeleteVertexConfirmed\"> Yes, Delete this vertex</div>\r\n                    <div className=\"CMitem\" id=\"DeleteVertexCancel\"> No</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Model\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <div className=\"CMitem\" id=\"RenameModel\"> Rename </div>\r\n                    <div className=\"CMitem\" id=\"MoveModel\"> Move To </div>\r\n                    <div className=\"CMitem\" id=\"DeleteModel\"> Delete Graph </div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"MoveModel\"){\r\n\r\n                let renderedOutput = getFolderData().map(item => <div className=\"CMitem\" id={'Folder'+ item.renderKey} key={item.text}> {item.text} </div>);\r\n\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> Move \"<b>{rightClickedItem}</b>\" To:</div>   \r\n                    <div>{renderedOutput}</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Rename\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"RenameBox\" type=\"text\" name=\"renameItem\" placeholder='New Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"RenameModel\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"RenameModelBox\" type=\"text\" name=\"renameItem\" placeholder='New Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"RenameVertex\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"RenameVertexBox\" type=\"text\" name=\"renameItem\" placeholder='New Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"AddVertex\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"VertexNameBox\" type=\"text\" name=\"nameVertex\" placeholder='Vertex Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"AddPackage\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"PackageNameBox\" type=\"text\" name=\"namePackage\" placeholder='Package Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"AddGraph\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"GraphNameBox\" type=\"text\" name=\"nameGraph\" placeholder='Graph Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Vertex\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>\r\n                    <div className=\"CMitem\" id=\"Bi-Nav\"> Naviagte </div>   \r\n                    <div className=\"CMitem\" id=\"RenameVertex\"> Rename</div>\r\n                    <div className=\"CMitem\" id=\"AddVertex\"> Add Vertex</div>\r\n                    <div className=\"CMitem\" id=\"AddGraph\"> Add Graph</div>\r\n                    <div className=\"CMitem\" id=\"AddPackage\"> Add Package</div>\r\n                    <div className=\"CMitem\" id=\"DeleteVertex\"> Delete Vertex </div>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            else if(menuType === \"Arrow\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <div className=\"CMitem\" id=\"Auto-Layout\"> Auto-Layout option (not implemented) </div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"CanvasVertex\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <div className=\"CMitem\" id=\"Auto-Layout\"> Auto-Layout option (not implemented) </div>\r\n                    <div className=\"CMitem\" id=\"Bi-Nav\"> Naviagte </div>\r\n                    </div>\r\n                )\r\n            }\r\n           \r\n            else if(menuType === \"Container\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>\r\n                    <div className=\"CMitem\" id=\"Create-Graph\"> Create Graph </div>   \r\n                    <div className=\"CMitem\" id=\"LinkContainer\"> Link Container From </div> \r\n                    <div className=\"CMitem\" id=\"Bi-Nav\"> Goto other occurences </div> \r\n                    <div className=\"CMitem\" id=\"Auto-Layout\"> Auto-Layout option (not implemented) </div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"LinkContainer\"){\r\n                console.log(getCurrentObjects().rootVertices)\r\n                let vertices = Array.from(getCurrentObjects().rootVertices)\r\n                console.log(vertices)\r\n                for(let i in vertices){\r\n                    if (vertices[i].vertex.isContainer === false){\r\n                        vertices.splice(i,1)\r\n                    }\r\n                }\r\n                console.log(vertices)\r\n                \r\n                let renderedOutput = vertices.map(item => <div className=\"CMitem\" id={'Vertex'+ item.vertex.semanticIdentity.UUID} key={'Vertex'+ item.vertex.semanticIdentity.UUID + \" \" + item.vertex.awayx}> {getModelNameFromKey(item.vertex.vertexModelKey)} / {item.vertex.title} </div>);\r\n                \r\n                console.log(renderedOutput)\r\n\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> Link <b>{rightClickedItem}</b> from: </div>\r\n                    <div>{renderedOutput}</div>\r\n                    </div>\r\n                    \r\n                )\r\n            }\r\n            else if(menuType === \"AddContainerModel\"){\r\n                \r\n                let renderedOutput = getFolderData().map(item => <div className=\"CMitem\" id={'Folder'+ item.renderKey} key={item.text}> {item.text} </div>);\r\n\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> Create Model of <b>{rightClickedItem}</b> in:</div>   \r\n                    <div>{renderedOutput}</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Bi-Nav\"){\r\n\r\n                console.log(getCurrentObjects().rootVertices);\r\n                let matchingContainers = [];\r\n                let matchingModels = [];\r\n                let matchingUUID = 0;\r\n\r\n                matchingUUID = rightClickedObject.originalUUID;\r\n                //If undefined, then a treeview vertex is selected\r\n                if(matchingUUID === undefined){\r\n                    matchingUUID = rightClickedObject.semanticIdentity.UUID\r\n                }\r\n                console.log(\"UUID stuff\")\r\n                console.log(matchingUUID)\r\n                console.log(rightClickedObject.semanticIdentity.UUID)\r\n\r\n\r\n                for(let vert of getCurrentObjects().rootVertices){\r\n                    if(vert.vertex.originalUUID === matchingUUID){\r\n                        matchingContainers.push(vert)\r\n                    }\r\n                }\r\n                for(let model of getModelData()){\r\n                    if(model.semanticIdentity.UUID === matchingUUID){\r\n                        matchingModels.push(model)\r\n                    }\r\n                }\r\n\r\n                console.log(matchingContainers)\r\n                let renderedContainers = matchingContainers.map(item => <div className=\"CMitem\" id={'Nav'+ item.vertex.vertexModelKey + \" \" + item.vertex.vertexRenderKey} key={'Nav'+ item.vertex.semanticIdentity.UUID + \" \" + item.vertex.awayx}> {getModelNameFromKey(item.vertex.vertexModelKey)} / {item.vertex.title} </div>)\r\n                let renderedModels = matchingModels.map(item => <div className=\"CMitem\" id={'Nav'+ item.modelKey + \" \" + item.renderKey} key={'Nav'+ item.semanticIdentity.UUID}> {item.text}</div>)\r\n                \r\n\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> also appears at:</div>   \r\n                    <div>{renderedContainers}</div>\r\n                    <div>{renderedModels}</div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    else return null;\r\n  }\r\n}\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\nimport '../App.css';\r\nimport * as canvasDraw from \"./CanvasDraw\";\r\nimport * as fileManager from '../Serialisation/FileManager';\r\nimport {DropdownButton,Dropdown} from \"react-bootstrap\";\r\n\r\nimport {Canvas} from './Canvas';\r\nimport {LeftMenu, LeftMenuType, StringToLeftMenuType, Tool} from './LeftMenu';\r\n\r\n// Semantic domain editor\r\nimport SemanticDomainEditor from \"./SemanticDomainEditor\";\r\nimport {resetRows} from \"./SemanticDomainEditor\";\r\n\r\n//Adding folders to the tree view\r\nimport {handleAddFolder, handleDeleteModel, handleAddModel,handleRenameFolder, getSelectedFolderKey, handleRenameModel, handleAddVertex, getModelNameFromKey, getFolderData} from './ContainmentTree';\r\nimport { handleDeleteFolder } from './ContainmentTree';\r\n\r\nimport { showVertexPath } from './ContainmentTree';\r\nimport { someVertexPath } from './ContainmentTree';\r\nimport { ContextMenu } from './ContextMenu'\r\nimport {save, load, importLoad, undo, redo, getsaveStates} from '../Serialisation/NewFileManager'\r\n\r\nimport iconNewFolder from \"../Resources/create_folder.svg\"\r\nimport iconDeleteFolder from \"../Resources/delete_folder.svg\"\r\nimport iconEditFolder from  \"../Resources/changeFolderName.svg\"\r\nimport iconNewModel from \"../Resources/NewModel.svg\"\r\nimport iconDeleteModel from \"../Resources/DeleteModel.svg\"\r\nimport iconEditModel from \"../Resources/editModel.svg\"\r\nimport iconaddVertex from \"../Resources/createVertex.svg\"\r\nimport iconRedo from \"../Resources/redo.svg\"\r\nimport iconUndo from \"../Resources/undo.svg\"\r\nimport { Undo } from '@material-ui/icons';\r\n\r\n\r\nexport const version = 1;\r\n\r\nexport const serverURL = 'http://localhost:8080'\r\n\r\nlet folderName = \"Unnamed Folder\";\r\n\r\n\r\nexport class MainProgramClass extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            zoomLevel: 200,\r\n            drawMode: Tool.Vertex,\r\n            menu: LeftMenuType.TreeView,\r\n            selectedObject: null,\r\n        };\r\n\r\n        this.setMode = this.setMode.bind(this);\r\n        this.setLeftMenu = this.setLeftMenu.bind(this);\r\n        this.setLeftMenuToTree = this.setLeftMenuToTree.bind(this);\r\n        this.semanticTableEnabled = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setMode(Tool.Select);\r\n        console.log(\"Mounted\");\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let div = document.getElementById(prevState.SelectedTool);\r\n\r\n        if (div !== null) {\r\n            div.style.backgroundColor = \"#FFFFFF\";\r\n        }\r\n\r\n        div = document.getElementById(this.state.SelectedTool);\r\n\r\n        div.style.backgroundColor = \"#CFFFFF\";\r\n\r\n        //console.log(\"Mode set to: \" + this.state.SelectedTool);\r\n\r\n        // This bit of code here updates the path for whatever vertex is being updated\r\n        if (this.state.selectedObject !== null){\r\n            if (this.state.selectedObject.typeName === \"Vertex\"){\r\n                showVertexPath(this.state.selectedObject)\r\n                this.state.selectedObject.setPath(someVertexPath)\r\n            }\r\n        }\r\n\r\n        \r\n        \r\n    }\r\n\r\n\r\n\r\n    updateFolderName = () => {\r\n        folderName = document.getElementById(\"FolderName\").value\r\n    }\r\n\r\n    //The following add/delete functions Now reload the treeview on add/deleteing folders and models - Lachlan\r\n    //The async function is due to javascript executing SetLeftMenuToTree without waiting for handleadd/delete to manipulate data for the new tree - LAchlan\r\n    addFolder = () => {\r\n        //handleAddFolder({modelName:document.getElementById(\"FolderName\").value});\r\n        //ContainmentTree.state = ContainmentTree.state;\r\n        //LeftMenu.state = LeftMenu.state;\r\n        (async() => {\r\n        //Your IDE might tell you this and following await's do nothing, but it is neccesary to stop setLeftMenuToTree fireing early - Lachlan\r\n        await handleAddFolder(folderName,getSelectedFolderKey());\r\n        this.setLeftMenuToTree();\r\n        })();\r\n        \r\n    }\r\n\r\n    deleteFolder = () => {\r\n        (async() => {\r\n            await handleDeleteFolder(getSelectedFolderKey());\r\n            this.setLeftMenuToTree();\r\n            })();\r\n    }\r\n\r\n    editFolderName = () => {\r\n        (async() => {\r\n            await handleRenameFolder(folderName,getSelectedFolderKey());\r\n            this.setLeftMenuToTree();\r\n        })();\r\n    }\r\n\r\n    addVertex = () =>{\r\n        (async() => {\r\n            await handleAddVertex(folderName,getSelectedFolderKey());\r\n            this.setLeftMenuToTree();\r\n        })();\r\n    }\r\n\r\n    addModel = () => {\r\n        (async() => {\r\n            await handleAddModel(folderName);\r\n            this.setLeftMenuToTree();\r\n            })();\r\n    }\r\n\r\n    deleteModel = () => {\r\n        \r\n        (async() => {\r\n            await handleDeleteModel(canvasDraw.getCurrentModel());\r\n            this.setLeftMenuToTree();\r\n            })();\r\n    }\r\n\r\n    editModelName = () => {\r\n        (async() => {\r\n            await handleRenameModel(folderName,canvasDraw.getCurrentModel());\r\n            this.setLeftMenuToTree();\r\n        })();\r\n    }\r\n\r\n    zoom = (type) => {\r\n        let cZoom = this.state.zoomLevel;\r\n        if (type === \"+\") {\r\n            if (this.state.zoomLevel < 500) {\r\n                this.setState({zoomLevel:cZoom += 25});\r\n                canvasDraw.setZoom(cZoom);\r\n            }\r\n        } else if (type === \"-\") {\r\n            if (this.state.zoomLevel > 100) {\r\n                this.setState({zoomLevel:cZoom -= 25});\r\n                canvasDraw.setZoom(cZoom);\r\n            }\r\n\r\n        } else {\r\n            console.log(\"Invalid Zoom Type\")\r\n        }\r\n    };\r\n\r\n\r\n    setMode(mode) {\r\n\r\n        if(mode === Tool.Visibility || mode === Tool.Edge || mode === Tool.Specialisation){\r\n            this.setState({drawMode: \"Arrow\"})\r\n        }else if (mode === Tool.Vertex){\r\n            this.setState({drawMode: \"Vertex\"})\r\n        }else if (mode === Tool.Select){\r\n            this.setState({drawMode: \"Select\"})\r\n        } else if (mode === Tool.Artifact) {\r\n            this.setState({ drawMode: \"Artifact\" })\r\n        } else if (mode === Tool.Container) {\r\n            this.setState({ drawMode: \"Container\" })\r\n        }\r\n\r\n        //console.log(Tool[mode]);\r\n\r\n        this.setState({SelectedTool: Tool[mode]});\r\n\r\n        canvasDraw.setArrowType(mode)\r\n\r\n    };\r\n\r\n    // chooses which left hand menu to display, based on the selected item\r\n    setLeftMenu(nearestObject, ctrl = false, OP = []) {\r\n        \r\n        if (OP !== null){\r\n            for(let i = 0;i<OP.length;i++){\r\n                OP[i].setSelected(false); //visually deselects elements\r\n            }\r\n        }\r\n        // checks if that specific object was clicked\r\n        // if it wasn't then deselect it\r\n        // i.e. determines if objects are selected or not\r\n        if (this.state.selectedObject !== null && ctrl === false) {\r\n            this.state.selectedObject.setSelected(false);\r\n            \r\n        }\r\n\r\n        // check if the nearest object was too far away or didnt exist\r\n        if (nearestObject === null) {\r\n            this.setState({\r\n                menu: LeftMenuType.TreeView,\r\n                selectedObject: null,\r\n            });\r\n\r\n        }\r\n\r\n        // if the selected object has a left menu,\r\n        else if (StringToLeftMenuType[nearestObject.typeName] !== null) {\r\n            this.setState({\r\n                menu: nearestObject.typeName,\r\n                selectedObject: nearestObject\r\n            });\r\n            //console.log(\"below should be selectedObject\");\r\n            //console.log(this.state.selectedObject)\r\n            nearestObject.setSelected(true);\r\n        } else {\r\n            if (this.state.selectedObject !== null) {\r\n                canvasDraw.drawAll();\r\n            }\r\n\r\n            this.setState({\r\n                menu: LeftMenuType.TreeView,\r\n                selectedObject: null\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    //Function for setting left menu to tree\r\n    //This function serves as a direct way to \"statechange\" the treeview menu - Lachlan\r\n    setLeftMenuToTree(){\r\n        \r\n        if (this.state.selectedObject !== null) {\r\n            \r\n            canvasDraw.drawAll();\r\n        }\r\n        this.setState({\r\n            \r\n            menu: LeftMenuType.None,\r\n        });\r\n        this.setState({\r\n            menu: LeftMenuType.TreeView,\r\n            selectedObject: null\r\n            \r\n        });\r\n        console.log(\"set left menu To Tree enacted\")\r\n        \r\n    }\r\n\r\n    setModelName = () => {\r\n        this.setState({modelName:document.getElementById(\"ModelName\").value})\r\n    };\r\n\r\n    // Code for file uploading\r\n    // If you know how to move it elsewhere to clean up this file\r\n    // Please move it to src/DataStructures/FileManager.js or similar\r\n    showFile = () => {\r\n        let refreshTree = this.setLeftMenuToTree //This is used so we can point to setLeftMenuToTree within the reader object\r\n        if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n            try {\r\n                let file = document.querySelector('input[type=file]').files[0];\r\n                let reader = new FileReader();\r\n                reader.readAsText(file);\r\n                console.log(reader.result)\r\n                reader.onload = function () {\r\n                    let text = reader.result\r\n                    load(text)\r\n                    refreshTree();\r\n                }\r\n            }catch(e){\r\n                alert(e +\" did you select a file?\")\r\n            }\r\n        } else {\r\n            alert(\"Your browser is too old to support HTML5 File API\");\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    importFile = () => {\r\n        let refreshTree = this.setLeftMenuToTree //make setLeftMenuToTree local to the block so the reader can use it\r\n        if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n            try {\r\n                let file = document.getElementById('File-Select-Import').files[0];\r\n                let reader = new FileReader();\r\n                reader.readAsText(file);\r\n                console.log(reader.result)\r\n                reader.onload = function () {\r\n                    let text = reader.result\r\n                    importLoad(text)\r\n                    refreshTree();\r\n                }\r\n            }catch(e){\r\n                alert(e +\" did you select a file?\")\r\n            }\r\n        } else {\r\n            alert(\"Your browser is too old to support HTML5 File API\");\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    async updateTree(){ // have to use this weird function to update tree when swapping back from semantic editor.\r\n        await this.setLeftMenuToTree(); \r\n        this.setLeftMenuToTree();\r\n    }\r\n\r\n    // Used to enable/disable the semantic domain editor\r\n    toggleSemanticDomainState = () => {\r\n        if (this.semanticTableEnabled) {\r\n            this.semanticTableEnabled = false;\r\n            canvasDraw.drawAll();\r\n            this.setState(this.state);\r\n            this.updateTree()\r\n            console.log(\"Semantic Domain disabled\");\r\n            \r\n        } else {\r\n            this.semanticTableEnabled = true;\r\n            resetRows();\r\n            this.setState(this.state);\r\n            console.log(\"Semantic Domain enabled\");\r\n        }\r\n    };\r\n\r\n    async mainUndo(){\r\n        await undo();\r\n        this.setLeftMenuToTree();\r\n\r\n    }\r\n\r\n    async mainRedo(){\r\n        await redo();\r\n        this.setLeftMenuToTree();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let GUI =\r\n        <><ContextMenu setLeftMenuToTree={this.setLeftMenuToTree} /><div className=\"Program\">\r\n                <div className={this.semanticTableEnabled ? \"SemanticDomain\" : \"hidden\"}>\r\n                    <SemanticDomainEditor />\r\n                </div>\r\n\r\n                <div className=\"TopMenus\">\r\n\r\n                    <DropdownButton variant=\"Primary\" id=\"File-Menu\" title=\"File\" size=\"lg\">\r\n\r\n                        <Dropdown.Item>\r\n                            <div className=\"TopBar\">\r\n                                <button id=\"file\" onClick={() => canvasDraw.newFile()}>New File</button>\r\n                            </div>\r\n                        </Dropdown.Item>\r\n\r\n                        <Dropdown.Item>\r\n                            <div className=\"TopBar\">\r\n                                <button id=\"downloader\" onClick={() => canvasDraw.getDownload()} download=\"image.png\">Export as .png</button>\r\n                            </div>\r\n                        </Dropdown.Item>\r\n\r\n\r\n                        <div className=\"TopBar\">\r\n                            <label>Load</label>\r\n                            <input type=\"file\" id=\"File-Select\" onChange={this.showFile} />\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className=\"TopBar\">\r\n                            <label>Import</label>\r\n                            <input type=\"file\" id=\"File-Select-Import\" onChange={this.importFile} />\r\n                        </div>\r\n\r\n\r\n\r\n                        <Dropdown.Item>\r\n                            <div className=\"TopBar\">\r\n                                <button id=\"json-downloader\" onClick={() => save()}>Save (as Json)</button>\r\n                            </div>\r\n                        </Dropdown.Item>\r\n\r\n                        \r\n\r\n                    </DropdownButton>\r\n\r\n                    <div className=\"TopBar\" onClick={() =>  this.toggleSemanticDomainState()}>\r\n                        Semantic Editor\r\n                    </div>\r\n\r\n                    {/*<input className=\"TopBarSearch\" id=\"ModelName\" type=\"text\" name=\"modelName\" placeholder=\"Graph Name\" onChange={(e) => this.setModelName(e)} />*/}\r\n                    <input className=\"SelectedModel\" id=\"SelectedModel\" type=\"text\" name=\"selectedModel\" readonly='readonly' />\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    {/*<input className=\"TopBarSearch\" id=\"FolderName\" type=\"text\" name=\"folderName\" placeholder=\"New Container/Model\" onChange={(e) => this.updateFolderName(e)} />*/}\r\n                    {/*<div className=\"TopBarIcon\">&nbsp;</div>*/}\r\n                    {/*The + and - are backwards on purpose here*/}\r\n                    <div className=\"TopBarIcon\" onClick={() => this.zoom('-')}> - </div>\r\n\r\n                    {/*<div className=\"TopBarLabel\"> {this.state.zoomLevel}% </div>*/}\r\n\r\n                    <div className=\"TopBarIcon\" onClick={() => this.zoom('+')}> + </div>\r\n\r\n\r\n                    {/*<div className=\"TopBarIdentifier\">Rows:&nbsp;</div>*/}\r\n                    {/*<input className=\"TopBarSelector\" style={{\"border-left\": \"0px\"}} type=\"number\" id = \"canvasRows\" defaultValue=\"70\" min=\"0\" max=\"105\" onChange={() => canvasDraw.updateRows()}/>*/}\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.mainUndo()} ><img src={iconUndo} alt=\"Delete Container\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.mainRedo()} ><img src={iconRedo} alt=\"Add Container\" /></div>\r\n                    \r\n\r\n                    {/*<div className=\"TopBarIcon\" onClick={() => this.addFolder()}><img src={iconNewFolder} alt=\"Add Container\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.deleteFolder()}><img src={iconDeleteFolder} alt=\"Delete Container\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.editFolderName()}><img src={iconEditFolder} alt=\"Edit Container\" /></div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.addVertex()}><img src={iconaddVertex} alt=\"Add Vertex\" /></div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.addModel()}><img src={iconNewModel} alt=\"Add Model\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.deleteModel()}><img src={iconDeleteModel} alt=\"Delete Model\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.editModelName()}><img src={iconEditModel} alt=\"Edit Model\" /></div>*/}\r\n\r\n\r\n\r\n                </div>\r\n\r\n                <div className=\"LowerPanel\" id= \"LowerPanel\">\r\n                    <LeftMenu setMode={this.setMode} setLeftMenu={this.setLeftMenu} mainState={this.state} className=\"LeftMenus\" />\r\n                    <div className=\"Canvas\" id = \"Canvas\">\r\n                        <Canvas setLeftMenu={this.setLeftMenu} setMode={this.setMode} mainState={this.state} />\r\n                    </div>\r\n                </div>\r\n            </div></>;\r\n        return GUI\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as ServiceWorker from './ServiceWorker';\r\nimport {MainProgramClass} from './UIElements/MainView';\r\nimport {assignElement} from \"./UIElements/CanvasDraw\";\r\nimport {getSaveData} from \"./Serialisation/FileManager\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nReactDOM.render(<MainProgramClass />,document.getElementById(\"program\"));\r\nassignElement(\"drawCanvas\");\r\n\r\n// save to server every interval\r\n\r\n\r\n//setInterval(() => {\r\n//    let data = JSON.stringify(getSaveData());\r\n//\r\n//    fetch('http://localhost:8080/serialisation/save',{\r\n//        method:'POST',\r\n//        headers: {\r\n//            'Accept': '*/*',\r\n//            'Content-Type': 'application/json',\r\n//            'Content-Length':data.length\r\n//        },\r\n//        body: data\r\n//    });\r\n//},60000);\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nServiceWorker.unregister();\r\n\r\n"],"sourceRoot":""}