{"version":3,"sources":["Resources/vertex.svg","Resources/edge.svg","Resources/specialisation.svg","Resources/visibility.svg","Resources/select.svg","Resources/artifact.svg","Resources/container.svg","Resources/create_folder.svg","Resources/delete_folder.svg","Resources/changeFolderName.svg","Resources/NewModel.svg","Resources/DeleteModel.svg","Resources/editModel.svg","Resources/createVertex.svg","DataStructures/SemanticIdentity.js","DataStructures/Vertex.js","DataStructures/ArrowProperties.js","DataStructures/Cardinality.js","DataStructures/EdgeEnd.js","UIElements/LeftMenu.js","UIElements/CanvasDraw.js","DataStructures/Arrow.js","DataStructures/Graph.js","UIElements/SemanticDomainEditor.js","Serialisation/FileManager.js","UIElements/Canvas.js","UIElements/ContainmentTree.js","UIElements/MainView.js","UIElements/ContextMenu.js","App.js","ServiceWorker.js","index.js"],"names":["module","exports","SemanticIdentity","name","description","abbreviation","shortAbbreviation","UUID","translations","this","typeName","undefined","replace","c","crypto","getRandomValues","Uint8Array","toString","padding","Vertex","title","content","colour","x","y","width","height","semanticIdentity","icons","selected","imageElements","fontSize","orignalVertex","originalUUID","isContainer","Origin","realHeight","Math","max","isAbstract","vertexPath","vertexModelKey","getCurrentModel","vertexRenderKey","getModelRenderKey","renderedx","renderedy","awayx","floor","random","awayy","status","key","bool","newSem","path","newOrigin","mergedContent","i","length","concat","fileName","fileNames","Icons","Text","index","indexOf","push","splice","text","side","canvasContext","ex","ey","pad","hasContent","iconAreaHeight","contentHeight","draw","possibleWidth","iconListLen","increaseWidthIfNecessary","measureText","is","font","measuredNameText","maxWidth","measuredText","shadowOffsetX","shadowOffsetY","fillStyle","fillRect","strokeRect","drawMarker","dy","txPos","tyPos","slice","fillText","iconHeight","strokeStyle","cursorX","cursorY","getNearestSide","sides","xPercentage","abs","yPercentage","goodSide","forEach","distanceThreshold","rightDist","topDist","leftDist","closestIndex","closestDistance","distArrays","shortest","EdgeEnd","EdgeEndToString","StringToEdgeEnd","LineColour","LineColourToStringName","StringNameToLineColour","LineType","LineTypeToString","StringToLineType","Cardinality","lowerBound","upperBound","attachedToUUID","isVisible","numLowerBound","numUpperBound","getDescription","lower","upper","value","headType","ArrowProps","cardinality","label","edgeEndRenderKey","getCurrentRenderKey","edgeEndModelKey","type","visibility","points","strokeColour","fillColour","beginPath","moveTo","X","Y","lineTo","closePath","fill","stroke","angle","lineColour","angleFromLine","PI","angleInverted","arrowPoints","cos","sin","drawLines","sideLength","deg30","trianglePoints","deg20","diamondPoints","drawArrowEnd","drawTriangleEnd","drawDiamondEnd","console","log","newType","LeftMenuType","TreeView","Arrow","Artifact","Container","LeftMenuTypeToString","StringToLeftMenuType","canvasElement","mouseStartX","mouseStartY","previousObject","mouseOriginX","mouseOriginY","canvasWidth","canvasHeight","Tool","Select","Visibility","Edge","Specialisation","LeftMenu","props","testUpdateLabel","setPath","getVertexColour","state","selectedObject","getColour","setVertexColour","setColour","hex","canvasDraw","deleteTitle","setState","getMenu","leftMenuContents","toolbar","id","className","onClick","setMode","src","iconSelect","alt","onKeyDown","onKeyPressed","iconVertex","iconArtifact","iconContainer","iconEdge","iconSpecialisation","iconVisibility","menu","setLeftMenu","onInput","handleChange","getContentAsString","getS23MIconsSelector","getColourPicker","defaultChecked","getAbstract","toggleAbstract","deselectElement","vertexDeleteElement","placeholder","defaultValue","onKeyUp","setTitle","setContent","deleteElement","edgeType","getNavigable","setNavigable","getAggregation","setAggregation","onChange","getSourceCardinalityVisibility","toggleSourceCardinalityVisibility","getSourceCardinalityLowerBound","min","updateCardinality","getSourceCardinalityUpperBound","getDestCardinalityVisibility","toggleDestCardinalityVisibility","getDestCardinalityLowerBound","getDestCardinalityUpperBound","sourceEdgeEnd","setStartLabel","destEdgeEnd","setEndLabel","e","stripElement","ref","setFormRef","bind","formRef","element","event","target","mainState","selectedItem","drawMode","document","addEventListener","keyCode","nextProps","nextContext","prevProps","prevState","snapshot","leftMenu","getElementById","preventDefault","fetch","method","headers","then","res","json","data","icon","newTitle","newContent","split","newLineType","setLineType","newColour","setLineColour","newLabel","sourceLowerBound","sourceUpperBound","currentSourceVisibility","destLowerBound","destUpperBound","currentDestVisibility","updateSourceCardinality","updateDestCardinality","dropdownOptions","disabled","shouldIconBeSelected","setIcon","shouldTextBeSelected","setText","DropdownButton","color","onChangeComplete","presetColors","isTextSet","isIconSet","toggleNavigable","checked","toggleAggregation","SourceAggregation","DestAggregation","trimPath","reset","React","Component","objectsList","pathData","sourceVertexUUID","destVertexUUID","updateAttachedVertices","rebuildPath","lineType","sourceIsNavigable","destIsNavigable","sourceIsAggregation","destIsAggregation","arrowModelKey","arrowRenderKey","connectedObjectUUIDs","getObjectUUIDList","objects","pathItem","getZerothCasePathItem","error","output","item","pathStart","pathEnd","toggleVisibility","val","vertex","nodeIndex","d","topLeft","top","topRight","right","bottomRight","bottom","bottomLeft","left","vertexNodes","lineAngle","atan2","getSY","getNSY","getSX","getNSX","getEY","getNEY","getEX","getNEX","startIndex","endIndex","indexSx","indexEx","indexSy","indexEy","sourceText","destText","sourceCtext","destCtext","sxOffset","syOffset","exOffset","eyOffset","sxOffsetc","syOffsetc","exOffsetc","eyOffsetc","sourceTextWidth","destTextWidth","sourceCtextWidth","destCtextWidth","charWidth","sxFlip","syFlip","exFlip","eyFlip","E1index","E2index","startLRArrow","isPathSegmentLR","endLRArrow","SSX","SSY","SEX","SEY","ESX","ESY","EEX","EEY","sourceCardText","destCardText","Offsets","getTextOffsets","setLineDash","from","to","drawStartHead","drawEndHead","drawLabelsAndCardinalities","pos","cx","cy","intersectsSegment","getDistance","VertexNode","children","Set","cleanObjectPath","getModelName","vertexObjectPath","node","add","traversedVertices","isRemoved","has","delete","child","remove","recursive","getVertexNode","flattenedArray","childNode","flatten","flattenVertexNodes","returnOption","parsedRenderKey","ArrowChildren","VertexChildren","currentObjects","getRenderKey","setVertexTreePath","tempTreeObj","renderkey","modelkey","getModelKey","opened","finalString","ourSourceEnd","ourDestEnd","textSource","textDest","j","someObject","treeAppearanceSwitches","arrowIcon","folderTitle","treePath","ArrowEdge","flattenedVertexNodes","arrow","updateVertices","sourceVertexNodeObject","destVertexNodeObject","isSourceFound","isDestFound","vertexNode","Graph","vertexArrayFlattened","arrowArrayFlattened","rootVertices","arrows","Array","isArray","object","addVertex","addArrow","originalVertex","sID","getArrowEdge","destVertexNode","sourceVertexNode","isAnotherRoot","sourceVertex","returnArray","destVertex","newobject","isEquivalentArrow","isArrowWithSameSource","isEquivalentSource","isEquivalentDest","removeFromChildren","rootNode","arrowEdge","doFlattenVertices","doFlattenArrows","verticesSet","arrowsSet","yRows","zoom","savedArrows","currentRenderKey","totalRenderKeys","currentModel","totalModels","setNewRenderKey","newKey","getTotalRenderKeys","incrementTotalRenderKeys","getCurrentObjects","setNewModel","newModel","getTotalModels","incrementTotalModels","arrowPath","lastX","lastY","resizing","arrowType","firstArrowJoint","cancelDraw","past_location","past_size","blockBeenSelected","nameElement","resetMouseOrigin","canvasRect","getBoundingClientRect","canvasContainer","getElementsByClassName","styleHeight","getComputedStyle","getPropertyValue","styleWidth","setAttribute","getEffectiveZoom","recalculateScale","clearCanvas","drawAll","updateArrows","resetTransform","scale","sourceUUIDs","ArrowUUIDSource","destUUIDs","ArrowUUIDDest","findNearestGridY","slotHeight","checkResizeBounds","currentObjectsFlattened","bounds","getBounds","x1","y1","x2","y2","inYBounds","inXBounds","getConnectionDataForArrow","nearest","nearestDistance","sideData","getNearestSideFrom","coordinate","coord","snapped","lastPathX","lastPathY","relAngle","l","angles","nearestAngle","nearestRad","xv","yv","getSelectedObject","canvas","resizeObjectOnMouseMove","resizeVars","coords","getGraphXYFromMouseEvent","expandSide","conData","StickArrowToObject","updateA","addObject","arrowToolSelected","getObjectFromUUID","foundObject","connectionData","onLeftMousePress","tool","saveBlockStates","onmousemove","intersection","findIntersected","cDist","nearestPointIndex","nearestArrow","point","hypot","findNearestArrowPointIndex","func","moveArrowPointOnMouseMove","removeEventListener","onMouseMove","compareSizesToMoveAll","Object","objectID","box","verticalArray","horizontalArray","boxArray","collectMehBox","boxes","bigbox","arrangeboxesandarrows","b","collectsidebox","arrangeboxesandarrowshorizontal","onLeftMouseRelease","secondObject","newObject","createObject","first","second","upBoxes","upArrows","downBoxes","downArrows","leftBoxes","leftArrows","rightBoxes","rightArrows","bigBox","smallBox","shiftBoxes","orderCoordinates","vy1","vy2","createArtifact","newVert","setIsContainer","createContainer","position","globalAlpha","onMiddleClick","savedObjects","shiftDown","friendObject","arrowsVert","arrowsHoriz","ObjectsToCheck","nextObjects","n","newfriendObject","nf","of","p","F","S","saveDisX","saveDisY","moveObject","friends","k","solidifyObject","setZoom","newZoom","xpos","ypos","oldLineWidth","lineWidth","oldStrokeStyle","oldFillStyle","arc","sqrt","pow","intersects","updateLinkedContainers","inputContainer","updateVertex","vertexData","getLinkedVertex","parentRenderKey","verticies","newPath","clientX","clientY","sx","sy","rows","setRows","setColumns","textInput","createRef","translationColumns","onSave","workbook","xlsx","writeBuffer","buffer","saveAs","Blob","getRowId","row","styles","input","container","selector","StartEditActionSelector","withStyles","defaultAction","changeAction","classes","Grid","alignItems","Typography","OutlinedInput","labelWidth","margin","MenuItem","SelectTextChecker","isSelectText","changeSelectText","FormControlLabel","control","Checkbox","EditPropsPanel","FocusableCell","restProps","Cell","tabIndex","onFocus","useState","createColumns","columns","setColumnsRet","columnName","editingEnabled","editingStateColumnExtensions","generatedRows","setRowsRet","wordWrapEnabled","tableColumnExtensions","startEditAction","setStartEditAction","selectTextOnEditStart","setSelectTextOnEditStart","exporterRef","useRef","startExport","useCallback","current","exportGrid","Paper","InputGroup","FormControl","aria-label","aria-describedby","Append","Button","variant","updateColumns","addColumn","removeColumn","onCommitChanges","changedRows","added","changed","deleted","startingAddedId","map","o","updateChangedObject","updateChangedObjects","deletedSet","filter","columnExtensions","cellComponent","getRowForObject","translation","columnNames","set","save","JSONdata","vertexObjects","arrowObjects","version","vertices","getSaveData","dataStr","JSON","stringify","DLelement","createElement","dataFile","href","URL","createObjectURL","download","body","appendChild","click","rebuildObject","verticesArray","open","jsonString","newObjects","newColumns","loadedJSON","parse","newVertices","newArrows","serialisedVertex","serialisedArrow","alert","selectMultiple","selectDown","Canvas","ocm","mouseDown","startX","startY","shiftKey","button","ctrlKey","foundEnd","ob","mouseUp","window","setTimeout","CollideCount","canvasRef","zoomLevel","dragEnter","dragOver","dragLeave","drop","droppedSemanticID","dataTransfer","getData","droppedVertex","getVertexData","vert","mouseCoords","newName","visibilityCheck","canvasVert","originText","getContainerData","find","folder","renderKey","setOrigin","onContextMenu","onMouseDown","onMouseUp","onMouseLeave","mouseLeave","folderName","MainProgramClass","updateFolderName","addFolder","a","handleAddFolder","getSelectedFolderKey","setLeftMenuToTree","deleteFolder","handleDeleteFolder","editFolderName","handleRenameFolder","handleAddVertex","addModel","handleAddModel","deleteModel","handleDeleteModel","editModelName","handleRenameModel","cZoom","setModelName","modelName","showFile","File","FileReader","FileList","file","querySelector","files","reader","readAsText","onload","fileManager","result","toggleSemanticDomainState","semanticTableEnabled","newRows","resetRows","theObject","div","SelectedTool","style","backgroundColor","currentlySelectedObject","showingVertPath","someVertexPath","mode","nearestObject","ctrl","OP","setSelected","None","SemanticDomainEditor","size","Dropdown","Item","confirm","location","reload","toDataURL","iconNewFolder","iconDeleteFolder","iconEditFolder","iconaddVertex","iconNewModel","iconDeleteModel","iconEditModel","readonly","treeData","folderData","decoyVertexData","folderDataRoot","selectedFolderKey","decoyFolderData","modelObjects","decoyModelObjects","folderAltered","setSelectedFolderKey","getFolderData","getModelData","loadFirstModel","modelKey","setPresent","setAway","model","parentKey","tempFolderThing","NaN","folderThing2","selectedRenderKey","deleteFolderChildren","selectedFolder","folderChildren","deleteModelChildren","selectedModel","verticesFolder","v","rKey","vertexName","tempVertexThing","vertexThing2","semanticID","decoyModelThing","tempModelThing","handleDeleteVertex","selectedUUID","selectedModelKey","mKey","determineOwnership","vertexOrArrow","determineSubFolders","getModelNameFromKey","rightClickedObject","initialFolderAdded","ContainmentTree","canvasItems","subFolderItems","combinedItems","toTreeViewElement","core","root","selectedVertex","highestLevel","nextLevel","vertexOrEdge","actualObject","cont","treeDat","dragStart","vertData","setData","original","handleElementSelect","draggable","rightClickedItem","rightClickedItemKey","menuType","ContextMenu","xPos","yPos","showMenu","handleClick","includes","newFolderKey","newRkey","handleModelRebase","parseInt","baseUUID","mirrorUUID","baseSemantic","linkContainer","keys","handleKey","handleContextMenu","source","dest","sourceName","destName","pageX","pageY","renderedOutput","matchingContainers","matchingModels","matchingUUID","renderedContainers","renderedModels","App","elementID","Boolean","hostname","match","ReactDOM","render","StrictMode","getContext","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0f3c8bc8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vertex.4937cefd.svg\";","module.exports = __webpack_public_path__ + \"static/media/edge.09e9d9dc.svg\";","module.exports = __webpack_public_path__ + \"static/media/specialisation.3320bc80.svg\";","module.exports = __webpack_public_path__ + \"static/media/visibility.5452d398.svg\";","module.exports = __webpack_public_path__ + \"static/media/select.8b3cad47.svg\";","module.exports = __webpack_public_path__ + \"static/media/artifact.91473c28.svg\";","module.exports = __webpack_public_path__ + \"static/media/container.ddecd459.svg\";","module.exports = __webpack_public_path__ + \"static/media/create_folder.5ddfbbc9.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete_folder.ccd4d6e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/changeFolderName.d6c49e9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/NewModel.5f359781.svg\";","module.exports = __webpack_public_path__ + \"static/media/DeleteModel.8ff04828.svg\";","module.exports = __webpack_public_path__ + \"static/media/editModel.0c58ce6e.svg\";","module.exports = __webpack_public_path__ + \"static/media/createVertex.97bc72a7.svg\";","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nexport function createUUID() {\r\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\r\n        // eslint-disable-next-line\r\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\r\n    );\r\n}\r\n\r\nexport class SemanticIdentity {\r\n    constructor(name, description, abbreviation, shortAbbreviation, UUID, translations){\r\n        this.typeName = \"SemanticIdentity\";\r\n        \r\n        if (UUID !== undefined){\r\n            this.UUID = UUID;\r\n        } else {\r\n            this.UUID = createUUID();\r\n        }\r\n\r\n        this.name = name;\r\n        this.description = description;\r\n        this.abbreviation = abbreviation;\r\n        this.shortAbbreviation = shortAbbreviation;\r\n\r\n        if (translations !== undefined){\r\n            this.translations = translations;\r\n        } else {\r\n            this.translations = [];\r\n        }\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { drawMarker, distanceThreshold, getCurrentRenderKey, getCurrentModel } from \"../UIElements/CanvasDraw\";\r\nimport { getModelRenderKey } from \"../UIElements/ContainmentTree\";\r\nimport { SemanticIdentity, createUUID } from \"./SemanticIdentity\";\r\n\r\nexport var padding = 5;\r\nexport var defaultColour = \"#FFD5A9\";\r\nexport var defaultMinimumSize = 30;\r\n\r\nexport class Vertex {\r\n\r\n    constructor(title = \"unnamed\", content, colour, x, y, width, height, semanticIdentity) {\r\n        this.typeName = \"Vertex\";\r\n\r\n        if (semanticIdentity !== undefined){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            this.semanticIdentity = new SemanticIdentity(title,\"\",\"\",\"\", undefined ,[]);\r\n        }\r\n\r\n        this.title = title;\r\n        this.content = content;\r\n        this.colour = colour\r\n        this.x = x;\r\n        this.y = y;\r\n        this.icons = [[],[],[]];\r\n        this.selected = false;\r\n        this.imageElements = {};\r\n        this.fontSize = 12;\r\n        this.orignalVertex = true; // bool to see if the selected vertex is the original\r\n        this.originalUUID = this.originalUUID // going to store the UUID of the original vertex here as canvas objects need to be given a unique semanticUUID \r\n        this.isContainer = false; //Ignore this now, Kieth explained how containers work after finishing old implementation, direction other team was going was wrong - Lachlan\r\n        this.Origin = \"\" //package the vertex originates from if needed\r\n   \r\n\r\n        // Note these values often change in runtime\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.realHeight = height;\r\n\r\n        // Make sure width and height meet a reasonable minimum\r\n        this.width = Math.max(width, defaultMinimumSize);\r\n        this.height = Math.max(height, defaultMinimumSize);\r\n\r\n        this.isAbstract = false;\r\n\r\n        //Store the path to your given vertex here\r\n        this.vertexPath = \"\";\r\n\r\n        // USed to decide where to render the object\r\n        this.vertexModelKey = getCurrentModel();\r\n\r\n        // Used to decide where the object goes in the tree\r\n        this.vertexRenderKey = getModelRenderKey(this.vertexModelKey);\r\n\r\n\r\n        // Used for moving vertices out of the way when they're not being rendered to prevent invisible overlap\r\n        this.renderedx = x;\r\n        this.renderedy = y;\r\n\r\n        this.awayx = Math.floor(Math.random() * 2000000)+100000;\r\n        this.awayy = Math.floor(Math.random() * 2000000)+100000;\r\n\r\n        this.status = \"present\"\r\n        \r\n    }\r\n\r\n    // Save a vertice's proper x and y coordinate for later rendering and then send the vertex somewhere else\r\n    setAway(){\r\n        if (this.status === \"present\"){\r\n            this.renderedx = this.x;\r\n            this.renderedy = this.y;\r\n\r\n            this.x = this.awayx;\r\n            this.y = this.awayy;\r\n\r\n            this.status = \"away\"\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    setPresent(){\r\n\r\n        if (this.status === \"away\"){\r\n            this.x = this.renderedx;\r\n            this.y = this.renderedy;\r\n\r\n            this.status = \"present\"\r\n        }\r\n        \r\n    }\r\n\r\n    setModelKey(key){\r\n        this.vertexModelKey = key;\r\n    }\r\n\r\n    getModelKey(){\r\n        return this.vertexModelKey;\r\n    }\r\n\r\n    setIsContainer(bool){\r\n        this.isContainer = bool;\r\n    }\r\n\r\n    getIsContainer(){\r\n        return this.isContainer\r\n    }\r\n\r\n    getSemantic(){\r\n        return this.SemanticIdentity\r\n    }\r\n\r\n    setSemantic(newSem){\r\n        this.SemanticIdentity = newSem;\r\n    }\r\n\r\n    // Set the render key. Done in ContainmentTree.js\r\n    setRenderKey(key){\r\n        this.vertexRenderKey = key;\r\n    }\r\n\r\n    // Get the render key. Called in CanvasDraw.js\r\n    getRenderKey(){\r\n        return this.vertexRenderKey;\r\n    }\r\n\r\n    setPath(path){\r\n        this.vertexPath = path;\r\n    }\r\n\r\n    getPath(){\r\n        return this.vertexPath;\r\n    }\r\n\r\n    setSelected(selected) {\r\n        this.selected = selected;\r\n    }\r\n\r\n    getColour(){\r\n        return this.colour\r\n    }\r\n\r\n    setColour(colour){\r\n        this.colour = colour;\r\n    }\r\n\r\n    setTitle(title) {\r\n        this.title = title;\r\n        this.semanticIdentity.name = title;\r\n    }\r\n\r\n    setContent(content) {\r\n        this.content = content;\r\n        this.semanticIdentity.description = content;\r\n    }\r\n\r\n    getAbstract(){\r\n        return this.isAbstract\r\n    }\r\n\r\n    toggleAbstract(){\r\n        this.isAbstract = !this.isAbstract\r\n    }\r\n\r\n    setOrigin(newOrigin){\r\n        this.Origin = newOrigin;\r\n    }\r\n    getOrigin(){\r\n        return this.Origin;\r\n    }\r\n\r\n    getContentAsString() {\r\n        if (this.content !== null) {\r\n            let mergedContent = \"\";\r\n            \r\n            for (let i = 0; i < this.content.length; i++) {\r\n                mergedContent = mergedContent.concat(this.content[i]);\r\n                if (i < this.content.length - 1) {\r\n                    mergedContent = mergedContent.concat(\"\\n\");\r\n                }\r\n            }\r\n            \r\n            return mergedContent;\r\n\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    setIcon(fileName) {\r\n        let fileNames = this.icons[0];\r\n        let Icons = this.icons[1];\r\n        let Text = this.icons[2];\r\n\r\n        let index = fileNames.indexOf(fileName);\r\n\r\n        //icon not part of this vertex yet\r\n        if (index === -1) {\r\n            fileNames.push(fileName);\r\n            Icons.push(true);\r\n            Text.push(false);\r\n\r\n        } else {\r\n            Icons[index] = !Icons[index]\r\n        }\r\n\r\n        if (Text[index] === false && Icons[index] === false) {\r\n            Icons.splice(index,1);\r\n            Text.splice(index,1);\r\n            fileNames.splice(index,1);\r\n        }\r\n\r\n    }\r\n\r\n    setText(fileName) {\r\n        let fileNames = this.icons[0];\r\n        let icons = this.icons[1];\r\n        let text = this.icons[2];\r\n\r\n        let index = fileNames.indexOf(fileName);\r\n\r\n        //icon not part of this vertex yet\r\n        if (index === -1) {\r\n            fileNames.push(fileName);\r\n            icons.push(false);\r\n            text.push(true);\r\n\r\n        } else {\r\n            text[index] = !text[index]\r\n        }\r\n\r\n        if (text[index] === false && icons[index] === false) {\r\n            icons.splice(index,1);\r\n            text.splice(index,1);\r\n            fileNames.splice(index,1);\r\n        }\r\n\r\n    }\r\n\r\n    isIconSet(fileName) {\r\n        let index = this.icons[0].indexOf(fileName);\r\n        if (index === -1) {\r\n            return false;\r\n        }\r\n        return this.icons[1][index];\r\n    }\r\n\r\n    isTextSet(fileName) {\r\n            let index = this.icons[0].indexOf(fileName);\r\n            if (index === -1) {\r\n                return false;\r\n            } else {\r\n                return this.icons[2][index];\r\n            }\r\n    }\r\n\r\n    getBounds() {\r\n        return [this.x, this.y, this.x+this.width, this.y+this.realHeight-padding];\r\n    }\r\n\r\n    expandSide(side, x, y,canvasContext) {\r\n        let ex = 0;\r\n        let ey = 0;\r\n\r\n        let pad = (this.hasContent() ? padding*4 : padding*2);\r\n\r\n        switch (side) {\r\n            case \"topLeft\":\r\n                ey += this.y + this.height;\r\n                this.y = y;\r\n                this.height = ey-this.y;\r\n                ex += this.x + this.width;\r\n                this.x = x;\r\n                this.width = ex-this.x;\r\n                break;\r\n\r\n            case \"topRight\":\r\n                ey += this.y + this.height;\r\n                this.y = y;\r\n                this.height = ey-this.y;\r\n                this.width = x-this.x;\r\n                break;\r\n\r\n            case \"bottomLeft\":\r\n\r\n                this.height = y-this.y  - this.iconAreaHeight - this.contentHeight - pad;\r\n                ex += this.x + this.width;\r\n                this.x = x;\r\n                this.width = ex-this.x;\r\n                break;\r\n\r\n            case \"bottomRight\":\r\n\r\n                this.height = y - this.y - this.iconAreaHeight - this.contentHeight - pad;\r\n                this.width = x-this.x;\r\n                break;\r\n\r\n            case \"left\":\r\n                ex += this.x + this.width;\r\n                this.x = x;\r\n                this.width = ex-this.x;\r\n                break;\r\n\r\n            case \"right\":\r\n                this.width = x-this.x;\r\n                break;\r\n\r\n            case \"top\":\r\n                ey += this.y + this.height;\r\n                this.y = y;\r\n                this.height = ey-this.y;\r\n                break;\r\n\r\n            case \"bottom\":\r\n                this.height = y-this.y  - this.iconAreaHeight - this.contentHeight - pad;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        this.height = Math.max(this.height,12+padding);\r\n        this.draw(canvasContext)\r\n    }\r\n\r\n\r\n    increaseWidthIfNecessary(canvasContext, possibleWidth) {\r\n        if (possibleWidth > this.width) {\r\n            this.width = possibleWidth;\r\n        }\r\n\r\n    }\r\n\r\n    hasContent() {\r\n        return !(this.content[0] === \"\" && this.content.length === 1)\r\n    }\r\n\r\n\r\n    draw(canvasContext) {\r\n\r\n        // Icon height in px\r\n        let iconHeight = 20;\r\n        let iconPadding = 2;\r\n        let iconListLen = this.icons[0].length;\r\n\r\n        // check for width increases\r\n        for (let i = 0; i < this.icons[0].length; i++) {\r\n\r\n            if (this.icons[1][i] === true) {\r\n                if (this.icons[2][i] === true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, iconHeight + canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n            }else{\r\n                if (this.icons[2][i] === true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n            }\r\n        }\r\n        this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.title + this.Origin).width);\r\n\r\n        for (let i = 0; i < this.content.length; i++) {\r\n            this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.content[i]).width + padding*2);\r\n        }\r\n\r\n        // Font size\r\n        padding = 5;\r\n        // Set font settings\r\n        if(this.is)\r\n        canvasContext.font = this.fontSize+\"px Segoe UI\";\r\n        canvasContext.fontSize = this.fontSize;\r\n\r\n\r\n        // Find the maximum width of text and size the class accordingly\r\n        let measuredNameText = canvasContext.measureText(this.title + this.Origin).width;\r\n        let maxWidth = Math.max(measuredNameText + padding*2, this.width);\r\n        this.contentHeight = 0;\r\n\r\n        // Iterate over all content text lines\r\n        for (let i = 0; i < this.content.length; i++) {\r\n            let measuredText = canvasContext.measureText(this.content[i]);\r\n            maxWidth = Math.max(maxWidth, measuredText.width, measuredNameText);\r\n            this.contentHeight += this.fontSize+padding;\r\n        }\r\n\r\n        if(!this.hasContent()){\r\n            this.contentHeight = 0\r\n        }\r\n\r\n        if (maxWidth > this.width) {\r\n            this.width = maxWidth\r\n        }\r\n\r\n        // Configure drawing for shadows\r\n        // And generally make it look nice\r\n        canvasContext.shadowOffsetX = 2.0; canvasContext.shadowOffsetY = 2.0;\r\n        this.iconAreaHeight = (iconHeight + (iconPadding * 2)) * iconListLen;\r\n\r\n        // Update rect height\r\n        // Use this to force text to fit\r\n        if (this.content[0] !== \"\") {\r\n            this.realHeight = padding * 4 + this.height + this.iconAreaHeight + this.contentHeight;\r\n        }else{\r\n            this.realHeight = padding * 2 + this.height + this.iconAreaHeight\r\n        }\r\n\r\n        // Draw rect\r\n        \r\n        canvasContext.fillStyle = this.colour;\r\n        canvasContext.fillRect(this.x, this.y, this.width, this.realHeight);\r\n        canvasContext.strokeRect(this.x, this.y, this.width, this.realHeight);\r\n\r\n\r\n        if (this.content[0] !== \"\") {\r\n            canvasContext.strokeRect(this.x, this.y, this.width, this.height+this.iconAreaHeight+padding*2);\r\n        }\r\n\r\n        // Draw selected markers if rect is selected\r\n        if (this.selected) {\r\n            canvasContext.fillStyle = \"#000000\";\r\n            drawMarker(this.x, this.y);\r\n            drawMarker(this.x+this.width, this.y);\r\n            drawMarker(this.x, this.y+this.realHeight);\r\n            drawMarker(this.x+this.width, this.y+this.realHeight);\r\n        }\r\n\r\n        // Draw Icons by filename\r\n        let yPos = this.y + iconPadding;\r\n        let xPos = this.x + this.width + iconPadding;\r\n\r\n        function loadImage(imageElement) {\r\n            let sh = imageElement.height;\r\n            let sw = imageElement.width;\r\n            let scale = iconHeight / sh;\r\n            canvasContext.drawImage(imageElement, xPos-(iconPadding*2)-(sw*scale), yPos, sw * scale, sh * scale);\r\n            yPos += iconHeight + (iconPadding * 2); // What's the point of this line? yPos should be out of scope when this method is run\r\n\r\n        }\r\n\r\n       /* for (let i = 0; i < this.icons[0].length; i++) {\r\n\r\n            if (this.icons[1][i] === true) {\r\n                if (this.icons[2][i] === true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, iconHeight + canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n\r\n                let element = this.imageElements[this.icons[0][i]];\r\n\r\n                \r\n                if (element === undefined) {\r\n\r\n                    let imageElement = new Image();\r\n                    imageElement.src = \"http://localhost:8080/icons/\" + this.icons[0][i];\r\n                    imageElement.crossOrigin = \"anonymous\";\r\n\r\n                    imageElement.onload = () => {\r\n                        loadImage(imageElement);\r\n                        this.imageElements[this.icons[0][i]] = imageElement\r\n                    };\r\n                } else {\r\n                    loadImage(element)\r\n                }\r\n            } else {\r\n                yPos += iconHeight + (iconPadding * 2);\r\n            }\r\n            \r\n        } */\r\n\r\n        // Reset color for text\r\n        canvasContext.fillStyle = \"#000000\";\r\n\r\n        // Draw Height for text that will be increased to draw downward\r\n        let dy = padding+this.fontSize;\r\n\r\n        // Disable shadows for text\r\n        canvasContext.shadowOffsetX = 0.0; canvasContext.shadowOffsetY = 0.0;\r\n\r\n        let txPos = this.x + iconPadding;\r\n        let tyPos = this.y + iconHeight;\r\n\r\n        for (let i = 0; i < this.icons[0].length; i++) {\r\n            if (this.icons[2][i] === true) {\r\n                if (this.icons[1][i] !== true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n\r\n                let name = \"<< \" + this.icons[0][i].slice(0, -4) + \" >>\";\r\n                if (this.icons[0][i].slice(-6, -4) === \"_n\") {\r\n                    name = \"\";\r\n                }\r\n\r\n                canvasContext.fillText(name, txPos, tyPos);\r\n            }\r\n            tyPos += iconHeight + (iconPadding * 2);\r\n        }\r\n\r\n        // Draw name\r\n        this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.Origin + this.title).width);\r\n\r\n        if(this.isAbstract) {\r\n            canvasContext.font = \"italic \" + this.fontSize + \"px Segoe UI\";\r\n        }else{\r\n            canvasContext.font = this.fontSize + \"px Segoe UI\";\r\n        }\r\n\r\n        canvasContext.fillText(this.Origin + this.title , this.x+padding, this.y+dy+this.iconAreaHeight);\r\n        dy = padding*2 +this.height + this.contentHeight;\r\n\r\n        canvasContext.font = this.fontSize+\"px Segoe UI\";\r\n\r\n        // Draw text\r\n        for (let i = 0; i < this.content.length; i++) {\r\n            this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.content[i]).width + padding*2);\r\n            canvasContext.fillText(this.content[i], this.x+padding, this.y+dy+this.iconAreaHeight);\r\n            dy += this.fontSize + padding;\r\n        }\r\n\r\n        canvasContext.strokeStyle = \"black\"\r\n    }\r\n\r\n    // Checks if it intersects with point\r\n    intersects(x, y) {\r\n        if (x < this.x) return false;\r\n        if (y < this.y) return false;\r\n        if (x > this.x+this.width) return false;\r\n        return y <= this.y + this.height;\r\n\r\n    }\r\n\r\n    // Gets the nearest side, in Arrow compatible x,y percentage values\r\n    // Also returns a threshold distance\r\n    // Parameters are the cursor X and Y coordinates\r\n    // Return value:\r\n    //      [threshold, xRel, yRel]\r\n    //\r\n    // If threshold is -1, xRel and yRel are equal to cursorX, cursorY\r\n    // This only happens when cursor shouldn't connect to vertex\r\n    getNearestSideFrom(cursorX, cursorY) {\r\n\r\n        // Else\r\n        return this.getNearestSide(cursorX, cursorY);\r\n    }\r\n\r\n    getNearestSide(cursorX, cursorY) {\r\n        // Create possibilities\r\n        let sides = [];\r\n\r\n        // If can connect to top/bottom\r\n        if (cursorX > this.x && cursorX < this.x+this.width) {\r\n            //console.log(\"success\");\r\n            let xPercentage = (cursorX-this.x)/this.width;\r\n\r\n            sides.push([Math.abs(cursorY-(this.y)), xPercentage, 0]);\r\n            sides.push([Math.abs(cursorY-(this.y+this.realHeight)), xPercentage, 1]);\r\n        }\r\n\r\n        // If can connect to left/right\r\n        else if (cursorY > this.y && cursorY < this.y+(this.realHeight)) {\r\n            //console.log(\"success\");\r\n            let yPercentage = (cursorY-this.y)/(this.realHeight);\r\n\r\n            sides.push([Math.abs(cursorX-(this.x)), 0, yPercentage]);\r\n            sides.push([Math.abs(cursorX-(this.x+this.width)), 1, yPercentage]);\r\n        }\r\n\r\n        // Can't connect\r\n\r\n        let goodSide = false;\r\n\r\n        sides.forEach((side) => {\r\n            if(side[0] < distanceThreshold){\r\n                goodSide = true;\r\n            }\r\n        });\r\n\r\n        if(goodSide === false && cursorX > this.x && cursorX < this.x + this.width && cursorY > this.y && cursorY < this.y+this.realHeight){\r\n                // click was inside the vertex but not in tolerance\r\n                //console.log(\"trying things\")\r\n                let yPercentage = (cursorY-this.y)/(this.realHeight);\r\n                let xPercentage = (cursorX-this.x)/this.width;\r\n\r\n                // find closest side\r\n                let rightDist = Math.abs(xPercentage-1)*this.width;\r\n                let topDist = yPercentage*this.realHeight;\r\n                let leftDist = xPercentage*this.width;\r\n                let bottomDist = yPercentage*this.realHeight;\r\n\r\n                let closestIndex = 0;\r\n                let closestDistance = leftDist;\r\n                let distArrays = [leftDist,rightDist,topDist,bottomDist];\r\n\r\n                // no need to go through leftDist here as its already set as shortest\r\n                for(let i = 1; i< distArrays.length-1; i++){\r\n                    if(distArrays[i] < closestDistance){\r\n                        closestDistance = distArrays[i];\r\n                        closestIndex = i;\r\n                    }\r\n                }\r\n\r\n                if ( closestIndex === 0 ){\r\n                    return [0, 0, yPercentage]\r\n                }\r\n                if ( closestIndex === 1 ){\r\n                    return [0, 1, yPercentage]\r\n                }\r\n                if ( closestIndex === 2 ){\r\n                    return [0, xPercentage, 0]\r\n                }\r\n                if ( closestIndex === 3 ){\r\n                    return [0, xPercentage, 1]\r\n                }\r\n        }\r\n\r\n        if(sides.length === 0){\r\n            return null\r\n        }\r\n\r\n        // Return side with shortest distance\r\n        let shortest = sides[0];\r\n        for (let i = 1; i < sides.length; i++) {\r\n            if (sides[i][0] < shortest[0]) {\r\n                shortest = sides[i];\r\n            }\r\n        }\r\n        return shortest;\r\n    }\r\n\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\n //EDGE ENDS\r\nexport const EdgeEnd = {\r\n    NONE: \"None\",\r\n    ARROW: \"Arrow\",\r\n    TRIANGLE: \"Triangle\",\r\n    FILLED_TRIANGLE: \"Filled Triangle\",\r\n    DIAMOND: \"Diamond\",\r\n    FILLED_DIAMOND: \"Filled Diamond\"\r\n};\r\n\r\nexport const EdgeEndToString = {};\r\nEdgeEndToString[EdgeEnd.NONE] = \"None\";\r\nEdgeEndToString[EdgeEnd.ARROW] = \"Arrow\";\r\nEdgeEndToString[EdgeEnd.TRIANGLE] = \"Triangle\";\r\nEdgeEndToString[EdgeEnd.FILLED_TRIANGLE] = \"FilledTriangle\";\r\nEdgeEndToString[EdgeEnd.DIAMOND] = \"Diamond\";\r\nEdgeEndToString[EdgeEnd.FILLED_DIAMOND] = \"FilledDiamond\";\r\n\r\nexport const StringToEdgeEnd = {};\r\nStringToEdgeEnd[\"None\"] = EdgeEnd.NONE;\r\nStringToEdgeEnd[\"Arrow\"] = EdgeEnd.ARROW;\r\nStringToEdgeEnd[\"Triangle\"] = EdgeEnd.TRIANGLE;\r\nStringToEdgeEnd[\"FilledTriangle\"] = EdgeEnd.FILLED_TRIANGLE;\r\nStringToEdgeEnd[\"Diamond\"] = EdgeEnd.DIAMOND;\r\nStringToEdgeEnd[\"FilledDiamond\"] = EdgeEnd.FILLED_DIAMOND;\r\n\r\n//LINE COLOURS\r\nexport const LineColour = {\r\n    BLACK: \"#000000\",\r\n    RED: \"#FF0000\",\r\n    BLUE: \"#0000FF\",\r\n    GREEN: \"#00FF00\"\r\n};\r\n\r\nexport const LineColourToStringName = {};\r\nLineColourToStringName[LineColour.BLACK] = \"Black\";\r\nLineColourToStringName[LineColour.RED] = \"Red\";\r\nLineColourToStringName[LineColour.BLUE] = \"Blue\";\r\nLineColourToStringName[LineColour.GREEN] = \"Green\";\r\n\r\nexport const StringNameToLineColour = {};\r\nStringNameToLineColour[\"Black\"] = LineColour.BLACK;\r\nStringNameToLineColour[\"Red\"] = LineColour.RED;\r\nStringNameToLineColour[\"Blue\"] = LineColour.BLUE;\r\nStringNameToLineColour[\"Green\"] = LineColour.GREEN;\r\n\r\n//LINE TYPES\r\nexport const LineType = {\r\n    SOLID: 1,\r\n    DASHED: 2\r\n};\r\n\r\nexport const LineTypeToString = {};\r\nLineTypeToString[LineType.SOLID] = \"Solid\";\r\nLineTypeToString[LineType.DASHED] = \"Dashed\";\r\n\r\nexport const StringToLineType = {};\r\nStringToLineType[\"Solid\"] = LineType.SOLID;\r\nStringToLineType[\"Dashed\"] = LineType.DASHED;","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { SemanticIdentity } from \"./SemanticIdentity\";\r\n\r\nexport class Cardinality {\r\n    constructor(lowerBound, upperBound, attachedToUUID, isVisible = false, semanticIdentity) {\r\n        this.typeName = \"Cardinality\";\r\n        \r\n        this.numLowerBound = lowerBound;\r\n        this.numUpperBound = upperBound;\r\n        this.attachedToUUID = attachedToUUID;\r\n        this.isVisible = isVisible;\r\n\r\n        if (semanticIdentity !== undefined){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            this.semanticIdentity = new SemanticIdentity(this.toString(), this.getDescription())\r\n        }\r\n    }\r\n\r\n    set lowerBound(value){\r\n        this.numLowerBound = value;\r\n        this.semanticIdentity.name = this.toString();\r\n    }\r\n\r\n    get lowerBound(){\r\n        return this.numLowerBound;\r\n    }\r\n\r\n    set upperBound(value){\r\n        this.numUpperBound = value;\r\n        this.semanticIdentity.name = this.toString();\r\n    }\r\n\r\n    get upperBound(){\r\n        return this.numUpperBound;\r\n    }\r\n\r\n    toggleVisibility() {\r\n        this.isVisible = !this.isVisible;\r\n    }\r\n\r\n    toString() {\r\n        var lower;\r\n        var upper;\r\n\r\n        if (this.lowerBound === '-1') {\r\n            lower = 'n'\r\n        } else {\r\n            lower = this.lowerBound;\r\n        }\r\n\r\n        if (this.upperBound === '-1') {\r\n            upper = 'n'\r\n        } else {\r\n            upper = this.upperBound;\r\n        }\r\n\r\n        if (lower === upper) {\r\n            return lower;\r\n        } else {\r\n            return lower + \" .. \" + upper\r\n        }\r\n    }\r\n\r\n    getDescription(){\r\n        return `Cardinality of Edge End ${this.attachedToUUID}`;\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { SemanticIdentity } from \"./SemanticIdentity\";\r\nimport { Cardinality } from \"./Cardinality\";\r\nimport * as ArrowProps from \"./ArrowProperties\";\r\nimport { getCurrentModel, getCurrentRenderKey } from \"../UIElements/CanvasDraw\";\r\n\r\n\r\n// Object that contains all the parts of an arrow ending including:\r\n// Head type\r\n// Cardinality\r\n// Label\r\n//\r\n// Used in the Arrow class\r\nexport class EdgeEnd {\r\n    constructor(attachedToUUID, headType = ArrowProps.EdgeEnd.NONE, cardinality, label = \"\", semanticIdentity) {\r\n        this.attachedToUUID = attachedToUUID;\r\n        this.typeName = \"EdgeEnd\";\r\n\r\n        if (semanticIdentity !== undefined){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            this.semanticIdentity = new SemanticIdentity(this.toString(), this.getDescription())\r\n        }\r\n        \r\n        this.headType = headType;\r\n        \r\n        if (cardinality !== undefined){\r\n            this.cardinality = cardinality;\r\n        } else {\r\n            this.cardinality = new Cardinality(1, 1, this.semanticIdentity.UUID);\r\n        }\r\n\r\n        this.label = label;\r\n\r\n        // For deciding where it goes in the graph\r\n        this.edgeEndRenderKey = getCurrentRenderKey();\r\n\r\n        // For rendering the object\r\n        this.edgeEndModelKey = getCurrentModel();\r\n    }\r\n\r\n    // Set the model key\r\n    setModelKey(key){\r\n        this.edgeEndModelKey = key;\r\n    }\r\n\r\n    // Return the model key\r\n    getModelKey(){\r\n        return this.edgeEndModelKey;\r\n    }\r\n\r\n    // Set the render key. Done in ContainmentTree.js\r\n    setRenderKey(key){\r\n        this.edgeEndRenderKey = key;\r\n    }\r\n\r\n    // Return the render key. Done in CanvasDraw.js\r\n    getRenderKey(key){\r\n        return this.edgeEndRenderKey;\r\n    }\r\n\r\n    set type(newType){\r\n        this.headType = newType;\r\n        this.semanticIdentity.name = this.toString();\r\n    }\r\n\r\n    get type(){\r\n        return this.headType;\r\n    }\r\n\r\n    toString(){\r\n        return `${this.type} type Edge End`;\r\n    }\r\n\r\n    getDescription(){\r\n        return `Edge end of ${this.attachedToUUID}`;\r\n    }\r\n\r\n    updateCardinality(lowerBound, upperBound, visibility){\r\n        this.cardinality.lowerBound = lowerBound;\r\n        this.cardinality.upperBound = upperBound;\r\n        this.cardinality.visibility = visibility;\r\n    }\r\n\r\n    drawLines(canvasContext, points, strokeColour, fillColour) {\r\n        canvasContext.strokeStyle = strokeColour;\r\n        if (fillColour !== undefined) {\r\n            canvasContext.fillStyle = fillColour;\r\n        }\r\n\r\n        canvasContext.beginPath();\r\n        canvasContext.moveTo(points[0].X, points[0].Y);\r\n        for (let i = 1; i < points.length; i++) {\r\n            canvasContext.lineTo(points[i].X, points[i].Y)\r\n        }\r\n        \r\n        if (fillColour !== undefined) {\r\n            canvasContext.closePath();\r\n            canvasContext.fill();\r\n        }\r\n        canvasContext.stroke();\r\n\r\n        canvasContext.fillStyle = \"#000\"\r\n        canvasContext.strokeStyle = \"#000\";\r\n    }\r\n\r\n    drawArrowEnd(canvasContext, x, y, angle, lineColour) {\r\n        //Constants\r\n        const strokeLength = 7;\r\n        const angleFromLine = Math.PI/6;\r\n        const angleInverted = angle + Math.PI;\r\n\r\n        //Generate points for the arrowhead\r\n        var arrowPoints = [];\r\n        arrowPoints.push({\r\n            X: x + strokeLength * Math.cos(angleInverted - angleFromLine),\r\n            Y: y + strokeLength * Math.sin(angleInverted - angleFromLine)\r\n        });\r\n        arrowPoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n        arrowPoints.push({\r\n            X: x + strokeLength * Math.cos(angleInverted + angleFromLine),\r\n            Y: y + strokeLength * Math.sin(angleInverted + angleFromLine)\r\n        });\r\n\r\n        //Arrowhead drawing\r\n        this.drawLines(canvasContext, arrowPoints, lineColour)\r\n    }\r\n\r\n    drawTriangleEnd(canvasContext, x, y, angle, lineColour, fillColour = \"#FFF\") {\r\n        //Constants\r\n        const sideLength = 7;\r\n        const deg30 = Math.PI / 6;\r\n        const angleInverted = angle + Math.PI;\r\n\r\n        //Generate points for the triangle\r\n        var trianglePoints = [];\r\n        trianglePoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n        trianglePoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted - deg30),\r\n            Y: y + sideLength * Math.sin(angleInverted - deg30)\r\n        });\r\n        trianglePoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted + deg30),\r\n            Y: y + sideLength * Math.sin(angleInverted + deg30)\r\n        });\r\n        trianglePoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n\r\n        //Triangle drawing\r\n        this.drawLines(canvasContext, trianglePoints, lineColour, fillColour);\r\n    }\r\n\r\n    drawDiamondEnd(canvasContext, x, y, angle, lineColour, fillColour = \"#FFF\") {\r\n        //Constants\r\n        const sideLength = 7;\r\n        const deg20 = Math.PI / 9;\r\n        const angleInverted = angle + Math.PI;\r\n\r\n        //Generate points for the diamond\r\n        var diamondPoints = [];\r\n        diamondPoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n        diamondPoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted - deg20),\r\n            Y: y + sideLength * Math.sin(angleInverted - deg20)\r\n        });\r\n        diamondPoints.push({\r\n            X: x + sideLength * 2 * Math.cos(angleInverted),\r\n            Y: y + sideLength * 2 * Math.sin(angleInverted)\r\n        });\r\n        diamondPoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted + deg20),\r\n            Y: y + sideLength * Math.sin(angleInverted + deg20)\r\n        });\r\n        diamondPoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n\r\n        //Diamond drawing\r\n        this.drawLines(canvasContext, diamondPoints, lineColour, fillColour);\r\n    }\r\n\r\n    draw(canvasContext, x, y, angle, lineColour){\r\n        switch (this.type) {\r\n            case ArrowProps.EdgeEnd.NONE:\r\n                break;\r\n            case ArrowProps.EdgeEnd.ARROW:\r\n                this.drawArrowEnd(canvasContext, x, y, angle, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.TRIANGLE:\r\n                this.drawTriangleEnd(canvasContext, x, y, angle, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.FILLED_TRIANGLE:\r\n                this.drawTriangleEnd(canvasContext, x, y, angle, lineColour, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.DIAMOND:\r\n                this.drawDiamondEnd(canvasContext, x, y, angle, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.FILLED_DIAMOND:\r\n                this.drawDiamondEnd(canvasContext, x, y, angle, lineColour, lineColour);\r\n                break;\r\n            default:\r\n                console.log(\"EdgeEnd had unexpected type: %s\", this.type);\r\n        }\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\nimport * as canvasDraw from \"./CanvasDraw\";\r\nimport {LineColourToStringName, LineTypeToString} from \"../DataStructures/ArrowProperties\"\r\nimport { ContainmentTree, handleAddVertex, handleDeleteVertex } from \"./ContainmentTree\";\r\n\r\nimport { SketchPicker } from 'react-color';\r\n\r\n// Icons\r\nimport iconVertex from \"../Resources/vertex.svg\";\r\nimport iconEdge from \"../Resources/edge.svg\";\r\nimport iconSpecialisation from \"../Resources/specialisation.svg\";\r\nimport iconVisibility from \"../Resources/visibility.svg\"\r\nimport iconSelect from \"../Resources/select.svg\"\r\nimport iconArtifact from \"../Resources/artifact.svg\"\r\nimport iconContainer from \"../Resources/container.svg\"\r\n\r\n\r\nimport {deleteElement, currentObjects} from \"./CanvasDraw\";\r\nimport { vertexDeleteElement } from './CanvasDraw';\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport {vertexData} from \"./ContainmentTree.js\"\r\n\r\n// Show the vertex path\r\nimport {showVertexPath} from \"./ContainmentTree.js\";\r\n\r\n// The variable that contains the found path of a given vertex\r\nimport { someVertexPath } from './ContainmentTree';\r\nimport e from 'cors';\r\n\r\n//Property Enums\r\nexport const LeftMenuType = {\r\n    TreeView: \"TreeView\",\r\n    Vertex: \"Vertex\",\r\n    Arrow: \"Arrow\",\r\n\r\n    //FTreeView: \"FocussedTreeView\"\r\n\r\n    Artifact: \"Artifact\",\r\n    Container:\"Container\"\r\n\r\n};\r\n\r\nexport const LeftMenuTypeToString = {};\r\nLeftMenuTypeToString[LeftMenuType.TreeView] = \"TreeView\";\r\nLeftMenuTypeToString[LeftMenuType.Vertex] = \"Vertex\";\r\nLeftMenuTypeToString[LeftMenuType.Arrow] = \"Arrow\";\r\nLeftMenuTypeToString[LeftMenuType.Arrow] = \"Artifact\";\r\nLeftMenuTypeToString[LeftMenuType.Arrow] = \"Container\";\r\n\r\nexport const StringToLeftMenuType = {};\r\nLeftMenuTypeToString[\"TreeView\"] = LeftMenuType.TreeView;\r\nLeftMenuTypeToString[\"Vertex\"] = LeftMenuType.Vertex;\r\nLeftMenuTypeToString[\"Arrow\"] = LeftMenuType.Arrow;\r\nLeftMenuTypeToString[\"Artifact\"] = LeftMenuType.Artifact;\r\nLeftMenuTypeToString[\"Container\"] = LeftMenuType.Container;\r\n\r\nexport const Tool = {\r\n    Select: \"Select\",\r\n    Vertex: \"Vertex\",\r\n    Visibility: \"Visibility\",\r\n    Edge: \"Edge\",\r\n    Specialisation: \"Specialisation\",\r\n    Artifact: \"Artifact\",\r\n    Container: \"Container\",\r\n};\r\n\r\n// class to display the left hand menu, where we will be showing\r\n// object editing tools for now\r\nexport class LeftMenu extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            menu: LeftMenuType.TreeView,\r\n            selectedObject: null,\r\n            fileNames: [],\r\n            title: \"\",\r\n            content: [],\r\n\r\n        };\r\n        this.setTitle = this.setTitle.bind(this);\r\n        this.setContent = this.setContent.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        this.formRef = null;\r\n\r\n        this.setFormRef = element =>{\r\n            this.formRef = element;\r\n        };\r\n\r\n        //this.setIcons();\r\n\r\n    }\r\n    handleChange(event){\r\n        this.setState({title: event.target.value})\r\n        this.setState({title:\"\"})\r\n        this.setTitle();\r\n        this.setContent();\r\n    }\r\n    /*\r\n    leftMenuContents = <form id = \"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.title} onKeyUp={() => this.setTitle()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n    \r\n                */\r\n               \r\n    /// This is a test function, remove it if I forget to\r\n    testUpdateLabel = () =>{\r\n        this.setPath(\"fffffffff\")\r\n        //document.getElementById(\"VertPath\").value = \"It doth been updated\";\r\n        \r\n        //console.log(\"RIGHT HERE \" + document.getElementById(\"VertPath\").value)\r\n    }\r\n\r\n\r\n\r\n    /// \r\n\r\n    componentDidMount() {\r\n        this.menu = this.props.mainState.menu;\r\n        this.selectedItem = this.props.mainState.drawMode;\r\n        this.props.setMode(this.selectedItem)\r\n\r\n        document.addEventListener(\"keydown\", this.onKeyPressed.bind(this));\r\n        \r\n    }\r\n\r\n\r\n    //For quickKeys\r\n\r\n\r\n    onKeyPressed(e) {\r\n        if (e.keyCode === 86 && this.state.selectedObject === null){\r\n            this.props.setMode(Tool.Vertex);\r\n        }\r\n\r\n\r\n        if (e.keyCode === 69 && this.state.selectedObject === null){\r\n            this.props.setMode(Tool.Edge);\r\n        }\r\n\r\n        if (e.keyCode === 46){\r\n            console.log(this.state.selectedObject);\r\n            if(this.state.selectedObject.typeName === \"Vertex\"){\r\n                vertexDeleteElement(this.state.selectedObject);\r\n            }\r\n            else{\r\n                deleteElement(this.state.selectedObject);\r\n            }\r\n            this.setState({menu:\"TreeView\"});\r\n            canvasDraw.drawAll();\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n    componentWillReceiveProps(nextProps,nextContext) {\r\n        this.setState({menu:nextProps.mainState.menu,selectedObject:nextProps.mainState.selectedObject});\r\n        \r\n        //document.removeEventListener(\"keydown\", this.onKeyPressed.bind(this));\r\n\r\n    }\r\n    \r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        let leftMenu = document.getElementById(\"VertexMenu\");\r\n        if(leftMenu === null){\r\n            leftMenu = document.getElementById(\"ArrowMenu\");\r\n        }\r\n        if(leftMenu !== null){\r\n            leftMenu.addEventListener(\"keypress\", (e) => {\r\n                if(e.key === \"Enter\") {\r\n                    e.preventDefault();\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    setIcons() {\r\n        fetch('http://localhost:8080/icons/list',{\r\n            method:'GET',\r\n            headers: {\r\n                'Accept': '*/*',\r\n            },\r\n        })\r\n            .then((res) => {return res.json()})\r\n            .then((data) => {\r\n                let fileNames = [];\r\n                data.icons.forEach((icon) => {\r\n                    fileNames.push(icon)\r\n                });\r\n                this.setState({fileNames:fileNames})\r\n            })\r\n    }\r\n\r\n    //VERTEX SETTERS\r\n\r\n    \r\n    setTitle() {\r\n        let newTitle = document.getElementById(\"LeftTitle\").value;\r\n        this.state.selectedObject.setTitle(newTitle);\r\n        canvasDraw.updateVertex(this.state.selectedObject);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n\r\n    setContent() {\r\n        let newContent = document.getElementById(\"LeftContent\").value;\r\n        newContent = newContent.split(\"\\n\");\r\n        this.state.selectedObject.setContent(newContent);\r\n        canvasDraw.updateVertex(this.state.selectedObject);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    //ARROW SETTERS\r\n    setLineType() {\r\n        let newLineType = document.getElementById(\"LineType\").value;\r\n        this.state.selectedObject.setLineType(newLineType);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    setColour() {\r\n        let newColour = document.getElementById(\"LineColour\").value;\r\n        this.state.selectedObject.setLineColour(newColour);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    setStartLabel() {\r\n        let newLabel = document.getElementById(\"SourceLabel\").value;\r\n        this.state.selectedObject.setStartLabel(newLabel);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    setEndLabel() {\r\n        let newLabel = document.getElementById(\"DestLabel\").value;\r\n        this.state.selectedObject.setEndLabel(newLabel);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    updateCardinality() {\r\n        let sourceLowerBound = document.getElementById(\"sourceFromCardindality\").value;\r\n        let sourceUpperBound = document.getElementById(\"sourceToCardindality\").value;\r\n        let currentSourceVisibility = this.state.selectedObject.getSourceCardinalityVisibility();\r\n        let destLowerBound = document.getElementById(\"destFromCardindality\").value;\r\n        let destUpperBound = document.getElementById(\"destToCardindality\").value;\r\n        let currentDestVisibility = this.state.selectedObject.getDestCardinalityVisibility();\r\n\r\n        this.state.selectedObject.updateSourceCardinality(sourceLowerBound, sourceUpperBound, currentSourceVisibility);\r\n        this.state.selectedObject.updateDestCardinality(destLowerBound, destUpperBound, currentDestVisibility);\r\n\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    toggleSourceCardinalityVisibility() {\r\n        this.state.selectedObject.toggleSourceCardinalityVisibility();\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    toggleDestCardinalityVisibility() {\r\n        this.state.selectedObject.toggleDestCardinalityVisibility();\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    toggleAbstract(){\r\n        this.state.selectedObject.toggleAbstract()\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    getS23MIconsSelector() {\r\n        let dropdownOptions = [<div className=\"DropdownItem\"><div className=\"dropdownLabel\">Name</div><div className=\"checkBoxContainer\">Text</div><div className=\"checkBoxContainer\">Icon</div></div>];\r\n\r\n        let name = \"\";\r\n        this.state.fileNames.forEach(fileName => {\r\n            if (fileName.slice(-6, -4) === \"_n\") {\r\n                name = fileName.slice(0, -6);\r\n                dropdownOptions.push(<div className=\"DropdownItem\" ref={fileName}> <div className=\"dropdownLabel\">{name}</div> <div className=\"checkBoxContainer\"><input type='checkbox' disabled=\"disabled\" /> </div>  <div className=\"checkBoxContainer\"><input type='checkbox' defaultChecked={this.shouldIconBeSelected(fileName)} onClick={() => {this.setIcon(fileName)}}/></div> </div>)\r\n            } else {\r\n                name = fileName.slice(0, -4);\r\n                dropdownOptions.push(<div className=\"DropdownItem\" ref={fileName}> <div className=\"dropdownLabel\">{name}</div> <div className=\"checkBoxContainer\"><input type='checkbox' defaultChecked={this.shouldTextBeSelected(fileName)} onClick={() => {this.setText(fileName)}} /> </div>  <div className=\"checkBoxContainer\"><input type='checkbox' defaultChecked={this.shouldIconBeSelected(fileName)} onClick={() => {this.setIcon(fileName)}}/></div> </div>)\r\n            }\r\n        });\r\n\r\n        return <DropdownButton title=\"Category Selector\" name=\"Icons\" id=\"IconSelector\" className=\"IconSelector\">\r\n            {dropdownOptions}\r\n        </DropdownButton>;\r\n    }\r\n\r\n    getVertexColour = () => {\r\n        return this.state.selectedObject.getColour()\r\n    };\r\n\r\n    setVertexColour = (colour) =>{\r\n        this.state.selectedObject.setColour(colour.hex);\r\n        canvasDraw.updateVertex(this.state.selectedObject);\r\n        canvasDraw.drawAll()\r\n    };\r\n\r\n    getColourPicker() {\r\n        return <DropdownButton title = \"Colour Selector\" id = \"ColourSelector\">\r\n        <SketchPicker\r\n            color={this.getVertexColour}\r\n            onChangeComplete={this.setVertexColour}\r\n            presetColors = {[\"#FFD5A9\",\"#F5B942\",\"#FFFFFF\"]}\r\n        /></DropdownButton>\r\n    }\r\n\r\n    shouldTextBeSelected(fileName) {\r\n        return this.state.selectedObject.isTextSet(fileName)\r\n    }\r\n\r\n    shouldIconBeSelected(fileName) {\r\n        return this.state.selectedObject.isIconSet(fileName)\r\n    }\r\n\r\n    setText(fileName) {\r\n        this.state.selectedObject.setText(fileName);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    setIcon(fileName) {\r\n        this.state.selectedObject.setIcon(fileName);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    setNavigable(side){\r\n\r\n        this.state.selectedObject.toggleNavigable(side);\r\n\r\n        document.getElementById(\"SourceIsNavigable\").checked = this.state.selectedObject.getNavigable(0);\r\n        document.getElementById(\"DestIsNavigable\").checked = this.state.selectedObject.getNavigable(1);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    setAggregation(side){\r\n        if(!this.state.selectedObject.getNavigable(side)){\r\n            this.state.selectedObject.toggleNavigable(side);\r\n        }\r\n        this.state.selectedObject.toggleAggregation(side);\r\n        let SourceAggregation = this.state.selectedObject.getAggregation(0);\r\n        let DestAggregation = this.state.selectedObject.getAggregation(1);\r\n        if(SourceAggregation) {\r\n            document.getElementById(\"SourceIsNavigable\").checked = true;\r\n        }\r\n        if(DestAggregation){\r\n            document.getElementById(\"DestIsNavigable\").checked = true;\r\n        }\r\n        document.getElementById(\"SourceIsAggregation\").checked = SourceAggregation;\r\n        document.getElementById(\"DestIsAggregation\").checked = DestAggregation;\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    deselectElement(){\r\n        this.props.setLeftMenu(null);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    showTreeView(){\r\n        //this.state.menu = LeftMenuType.TreeView;\r\n        //console.log(\"HENLO: \" + this.state);\r\n        //leftMenuContents = <ContainmentTree setLeftMenu = {this.props.setLeftMenu} />;\r\n        this.state.selectedObject(null)\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    stripElement(e){\r\n        e.preventDefault()\r\n        this.state.selectedObject.trimPath();\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n   \r\n    deleteTitle = () => {\r\n        this.setState({title: \"\"})\r\n    };\r\n   \r\n\r\n// return the correct menu based on the selected item\r\n    getMenu = () =>{\r\n\r\n        \r\n\r\n        let leftMenuContents;\r\n\r\n        let toolbar = <div id = \"Toolbar\" className = \"Toolbar\">\r\n            <div id = \"Select\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Select)}><img src={iconSelect} alt =\"Select\"/></div>\r\n\r\n            <div id = \"Vertex\" className=\"ToolbarItem\" onClick={() => {this.props.setMode(Tool.Vertex); }} onKeyDown={() => this.onKeyPressed()}    ><img src={iconVertex} alt =\"Vertex\"/></div>\r\n\r\n            <div id=\"Artifact\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Artifact)} onKeyDown={() => this.onKeyPressed()}    ><img src={iconArtifact} alt=\"Artifact\" /></div>\r\n            <div id=\"Container\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Container)} onKeyDown={() => this.onKeyPressed()}    ><img src={iconContainer} alt=\"Container\" /></div>\r\n\r\n            <div id = \"Edge\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Edge)}><img src={iconEdge} alt =\"Edge\"/></div>\r\n            <div id = \"Specialisation\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Specialisation)}><img src={iconSpecialisation} alt =\"Specialisation\"/></div>\r\n            <div id = \"Visibility\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Visibility)}><img src={iconVisibility} alt =\"Visibility\"/></div>\r\n        </div>;\r\n\r\n        if (this.state.menu === LeftMenuType.TreeView) {\r\n            leftMenuContents = <ContainmentTree setLeftMenu = {this.props.setLeftMenu} />\r\n            //console.log(\"A new tree has been created\");\r\n\r\n        } else if (this.state.menu === LeftMenuType.Vertex) {\r\n            canvasDraw.drawAll();\r\n            \r\n            leftMenuContents = <form id = \"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" value={this.state.selectedObject.title} onInput={this.handleChange}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Content</label>\r\n                <textarea id=\"LeftContent\" className =\"LeftContent\" value={this.state.selectedObject.getContentAsString()} onInput={this.handleChange}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getS23MIconsSelector()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getColourPicker()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Is Abstract?</label>\r\n                <input type=\"checkbox\" id=\"IsAbstract\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAbstract()} onClick={() => this.toggleAbstract()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => {/*deleteElement(this.state.selectedObject)*/vertexDeleteElement(this.state.selectedObject);this.setState({menu:\"TreeView\"})}} placeholder=\"NoTabIndex\">Remove</button>\r\n\r\n\r\n\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                \r\n    \r\n                <input id=\"VertPath\" className=\"vertexPath\" defaultValue={this.state.selectedObject.vertexPath}/>\r\n                \r\n\r\n\r\n            </form>;\r\n            \r\n        } else if (this.state.menu === LeftMenuType.Artifact) {\r\n            canvasDraw.drawAll();\r\n\r\n            leftMenuContents = <form id=\"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.title} onKeyUp={() => this.setTitle()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Content</label>\r\n                <textarea id=\"LeftContent\" className=\"LeftContent\" defaultValue={this.state.selectedObject.getContentAsString()} onKeyUp={() => this.setContent()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getS23MIconsSelector()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getColourPicker()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Is Abstract?</label>\r\n                <input type=\"checkbox\" id=\"IsAbstract\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAbstract()} onClick={() => this.toggleAbstract()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => { deleteElement(this.state.selectedObject); this.setState({ menu: \"TreeView\" }) }} placeholder=\"NoTabIndex\">Remove</button>\r\n            </form>;\r\n\r\n        } else if (this.state.menu === LeftMenuType.Container) {\r\n            canvasDraw.drawAll();\r\n            leftMenuContents = <form id=\"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.title} onKeyUp={() => this.setTitle()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Content</label>\r\n                <textarea id=\"LeftContent\" className=\"LeftContent\" defaultValue={this.state.selectedObject.getContentAsString()} onKeyUp={() => this.setContent()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getS23MIconsSelector()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Is Abstract?</label>\r\n                <input type=\"checkbox\" id=\"IsAbstract\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAbstract()} onClick={() => this.toggleAbstract()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => { deleteElement(this.state.selectedObject); this.setState({ menu: \"TreeView\" }) }} placeholder=\"NoTabIndex\">Remove</button>\r\n            </form>;\r\n\r\n        }else if (this.state.menu === LeftMenuType.Arrow) {\r\n            console.log(\"Arrow Selected\");\r\n            console.log(this.state.selectedObject)\r\n\r\n            if(this.state.selectedObject.edgeType === Tool.Edge){\r\n\r\n            leftMenuContents = <form id = \"ArrowMenu\">\r\n                <div className=\"LeftHeader\">Edge Properties</div>\r\n\r\n                <label className=\"LeftLabel\">Source Is Navigable?</label>\r\n                <input type=\"checkbox\" id=\"SourceIsNavigable\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getNavigable(0)} onClick={() => this.setNavigable(0)}/>\r\n\r\n                <label className=\"LeftLabel\">Destination Is Navigable?</label>\r\n                <input type=\"checkbox\" id=\"DestIsNavigable\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getNavigable(1)} onClick={() => this.setNavigable(1)}/>\r\n\r\n                <label className=\"LeftLabel\">Source Is Aggregation?</label>\r\n                <input type=\"checkbox\" id=\"SourceIsAggregation\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAggregation(0)} onClick={() => this.setAggregation(0)}/>\r\n\r\n                <label className=\"LeftLabel\">Destination Is Aggregation?</label>\r\n                <input type=\"checkbox\" id=\"DestIsAggregation\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAggregation(1)} onClick={() => this.setAggregation(1)}/>\r\n\r\n                <label className=\"LeftLabel\">Line Colour</label>\r\n                <select name=\"LineColour\" id=\"LineColour\" className=\"LeftSelector\" defaultValue={LineColourToStringName[this.state.selectedObject.lineColour]} onChange={() => this.setColour()}>\r\n                    <option value = \"Black\">Black</option>\r\n                    <option value = \"Red\">Red</option>\r\n                    <option value = \"Blue\">Blue</option>\r\n                    <option value = \"Green\">Green</option>\r\n                </select>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {/* -1 represents n or *  */}\r\n                <label className=\"LeftLabel\">Source Cardinality</label>\r\n                <div className=\"CardinalityArea\"> <div className=\"LeftCheckboxLabel\"> Visible: </div> <input type=\"checkbox\" id = \"sourceCardinalityShown\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getSourceCardinalityVisibility()} onChange={() => {this.toggleSourceCardinalityVisibility();canvasDraw.drawAll()}}/>\r\n                    <input type=\"number\" id = \"sourceFromCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getSourceCardinalityLowerBound()} min=\"0\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                    <label>..</label>\r\n                    <input type=\"number\" id = \"sourceToCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getSourceCardinalityUpperBound()} min=\"-1\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                </div>\r\n\r\n\r\n                <label className=\"LeftLabel\">Destination Cardinality</label>\r\n                <div className=\"CardinalityArea\"> <div className=\"LeftCheckboxLabel\">Visible:</div> <input type=\"checkbox\" id = \"destCardinalityShown\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getDestCardinalityVisibility()} onChange={() => {this.toggleDestCardinalityVisibility();canvasDraw.drawAll()}}/>\r\n                    <input type=\"number\" id = \"destFromCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getDestCardinalityLowerBound()} min=\"0\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                    <label>..</label>\r\n                    <input type=\"number\" id = \"destToCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getDestCardinalityUpperBound()} min=\"-1\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                </div>\r\n\r\n                <label className=\"LeftLabel\">Source Label</label>\r\n                    <input id=\"SourceLabel\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.sourceEdgeEnd.label} onKeyUp={() => this.setStartLabel()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Destination Label</label>\r\n                    <input id=\"DestLabel\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.destEdgeEnd.label} onKeyUp={() => this.setEndLabel()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => { deleteElement(this.state.selectedObject); this.setState({ menu: LeftMenuType.TreeView, selectedObject: null }) }}>Remove</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={(e) => this.stripElement(e)}>Make Straight</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => {deleteElement(this.state.selectedObject);this.setState({menu:LeftMenuType.TreeView,selectedObject:null})}}>Remove</button>\r\n\r\n            </form>\r\n            }else{\r\n                leftMenuContents = <form id = \"ArrowMenu\">\r\n                    <div className=\"LeftHeader\">Selected Edge</div>\r\n                    <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                    <label className=\"LeftSpacer\">&nbsp;</label>\r\n                    <button className=\"LeftMenuButton\" onClick={() => {deleteElement(this.state.selectedObject);this.setState({menu:LeftMenuType.TreeView,selectedObject:null})}}>Remove</button>\r\n\r\n                    \r\n\r\n                    </form>\r\n            }\r\n        }\r\n\r\n        return <div>{toolbar}<form ref={this.setFormRef} className={this.props.className}>\r\n            {leftMenuContents}\r\n            </form></div>;\r\n        \r\n    };\r\n\r\n    render() {\r\n        let menu = this.getMenu();\r\n        if (this.formRef !== null) {\r\n            this.formRef.reset();\r\n        }\r\n        return menu;\r\n    }\r\n\r\n\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { Vertex } from \"../DataStructures/Vertex\";\r\nimport { Arrow } from \"../DataStructures/Arrow\";\r\nimport { Tool } from \"./LeftMenu\";\r\nimport { Graph } from \"../DataStructures/Graph\";\r\nimport {getFolderNameFromKey, getModelData,handleAddModel, vertexData} from \"./ContainmentTree\";\r\nimport { rgbToHex } from \"@material-ui/core\";\r\n\r\n\r\n// Core variables\r\nlet canvasElement;\r\nlet canvasContext;\r\n\r\n// Mouse / Cursor\r\nlet mouseStartX;\r\nlet mouseStartY;\r\n\r\nlet previousObject;\r\nlet startX, startY, endX, endY;\r\n\r\nlet yRows = 70;\r\n\r\nexport var mouseOriginX;\r\nexport var mouseOriginY;\r\n\r\n// Non zoomed in Width/Height (in pixels)\r\nlet canvasWidth;\r\nlet canvasHeight;\r\n\r\n// Zoom and Pan\r\nlet zoom = 200.0;\r\n\r\n// Renderable objects\r\nexport var currentObjects = new Graph();\r\n\r\nexport var savedArrows = [];\r\n\r\n// The naming conventions here are terrible, but basically the render keys determine where\r\n// a tree view element is placed in the graph while the model functions determine what's \r\n// actually being rendered\r\n\r\nexport let currentRenderKey = 0;\r\nexport let totalRenderKeys = 0\r\n\r\nexport let currentModel = 0;\r\nexport let totalModels = 0;\r\n\r\nexport function getCurrentRenderKey() {\r\n    return currentRenderKey;\r\n}\r\n\r\nexport function setNewRenderKey(newKey) {\r\n    currentRenderKey = newKey;\r\n}\r\n\r\nexport function getTotalRenderKeys() {\r\n    return totalRenderKeys;\r\n}\r\n\r\nexport function incrementTotalRenderKeys() {\r\n    totalRenderKeys = totalRenderKeys += 1;\r\n}\r\n\r\nexport function getCurrentObjects() {\r\n    return currentObjects;\r\n}\r\n\r\n// --- Model Key Stuff --- //\r\n\r\nexport function getCurrentModel() {\r\n    return currentModel;\r\n}\r\n\r\nexport function setNewModel(newModel) {\r\n    currentModel = newModel;\r\n}\r\n\r\nexport function getTotalModels() {\r\n    return totalModels;\r\n}\r\n\r\nexport function incrementTotalModels() {\r\n    totalModels = totalModels += 1;\r\n}\r\n\r\n\r\n\r\n\r\n// Arrow Path\r\nexport var arrowPath = [];\r\nlet lastX = 0;\r\nlet lastY = 0;\r\n\r\n// Arrow moving\r\nlet startMoveX = 0;\r\nlet startMoveY = 0;\r\n\r\n// Resize status\r\nlet resizing = false;\r\n\r\nlet arrowType = 0;\r\nlet firstArrowJoint = true;\r\n\r\nlet cancelDraw = false;\r\n\r\n//Block Past location var\r\nlet past_location = [];\r\nlet past_size = [];\r\nlet selectedObject;\r\nexport var blockBeenSelected = false;\r\n\r\n// Init\r\nexport function assignElement(elementID) {\r\n    canvasElement = document.getElementById(elementID);\r\n    canvasContext = canvasElement.getContext(\"2d\");\r\n\r\n    resetMouseOrigin();\r\n\r\n}\r\n\r\nexport function getModelName() {\r\n    let nameElement = document.getElementById(\"ModelName\")\r\n\r\n    if (nameElement === null) {\r\n        return \"Root\"\r\n    }\r\n    if (nameElement.value === \"\" || nameElement.value === null || nameElement.value === undefined) {\r\n        return \"Root\"\r\n    }\r\n    return nameElement.value;\r\n}\r\n\r\nexport function resetMouseOrigin() {\r\n    try {\r\n        let canvasRect = canvasElement.getBoundingClientRect();\r\n        mouseOriginX = canvasRect.left;\r\n        mouseOriginY = canvasRect.top;\r\n        recalculateScale();\r\n        clearCanvas();\r\n    } catch {\r\n        console.error(\"Failed to acquire canvas element\");\r\n    }\r\n    drawAll()\r\n}\r\n\r\n\r\n// Core functions\r\nexport function drawAll() {\r\n    updateArrows();\r\n    clearCanvas();\r\n\r\n    canvasContext.resetTransform();\r\n    canvasContext.scale(getEffectiveZoom(), getEffectiveZoom());\r\n\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item !== null) {\r\n            //console.log(\"HERE \" + item.typeName)\r\n            //Only render the objects which are in the currently selected containment\r\n\r\n            if (item.getModelKey() === currentModel) {\r\n                /*\r\n                if (item.typeName === \"Vertex\"){\r\n                    console.log(\"Item is set as present\")\r\n                    item.setPresent();\r\n                }\r\n                */\r\n                item.draw(canvasContext);\r\n\r\n            }\r\n\r\n            /*\r\n            else if (item.getModelKey() !== currentModel && item.typeName === \"Vertex\"){\r\n                console.log(\"Item is sent away\")\r\n                item.setAway();\r\n                //console.log(\"The item to not be rendered is\" + item.typeName);\r\n            }\r\n            */\r\n\r\n        }\r\n    });\r\n\r\n}\r\n\r\nexport function deleteElement(element) {\r\n    if (element !== null) {\r\n        if (!currentObjects.remove(element)) {\r\n            console.error(\"Failed to delete object with UUID %s\", element.semanticIdentity.UUID);\r\n        }\r\n    } else {\r\n        console.error(\"Attempted to delete a null element\");\r\n    }\r\n\r\n    drawAll()\r\n}\r\n\r\n//this is the same as the above, except when you're deleting a vertex with an arrow connected the edge connection code freaks out.\r\n//this here deletes any arrows connected to the vertex before deleting the vertex to get around this\r\nexport function vertexDeleteElement(element) {\r\n    console.log(\"vDeleteE occurs\")\r\n    //find the UUID of the vertex for arrow dest and source matching\r\n    //let selectedVertUUID = element.semanticIdentity.UUID;\r\n\r\n    //Get the arrow UUID's\r\n    let sourceUUIDs = currentObjects.ArrowUUIDSource(element);\r\n    let destUUIDs = currentObjects.ArrowUUIDDest(element);\r\n    //find an arrow with matching source/dest if they exist\r\n\r\n    sourceUUIDs.forEach(element => currentObjects.remove(element.arrow));\r\n    destUUIDs.forEach(element => currentObjects.remove(element.arrow))\r\n\r\n    //Now that the arrows are out of the way, we're safe to delete the vertex (same code as above)\r\n    if (element !== null) {\r\n        console.log(\"vdl if staement pass\")\r\n        if (!currentObjects.remove(element)) {\r\n            \r\n            console.error(\"Failed to delete object with UUID %s\", element.semanticIdentity.UUID);\r\n        }\r\n    } else {\r\n        console.error(\"Attempted to delete a null element\");\r\n    }\r\n\r\n    drawAll()\r\n\r\n}\r\n\r\nexport function updateRows() {\r\n    yRows = document.getElementById(\"canvasRows\").value;\r\n    drawAll()\r\n}\r\n\r\n// Format co-ordinate so that the value aligns with a row\r\nfunction findNearestGridY(y, top) {\r\n\r\n    // distance to topmost top rowLine\r\n    let slotHeight = canvasHeight / yRows * zoom / 100 * 200 / zoom;\r\n\r\n    // which row to put it in\r\n    let slot = Math.floor(y / slotHeight);\r\n\r\n    // y co-ordinate of that row (if bottom then go up by row gap)\r\n    return slotHeight * slot + (slotHeight / 2 * + top)\r\n}\r\n\r\n// Checks to see which side it should resize on\r\nfunction checkResizeBounds(x, y) {\r\n    // Iterate through all objects and only check vertices\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n    for (let i = 0; i < currentObjectsFlattened.length; i++) {\r\n        let item = currentObjectsFlattened[i];\r\n\r\n        if (item.typeName === \"Vertex\") {\r\n            // Get vertex bounds\r\n            // x1 y1 are the lower coordinates\r\n            // x2 y2 are the upper coordinates\r\n            // Note: x2 y2 are not width/height values\r\n\r\n            //tolerance in px\r\n            let tolerance = 10;\r\n\r\n            let bounds = item.getBounds();\r\n            let x1 = bounds[0];\r\n            let y1 = bounds[1];\r\n            let x2 = bounds[2];\r\n            let y2 = bounds[3];\r\n\r\n            let top = Math.abs(y1 - y) < tolerance;\r\n            let bottom = Math.abs(y2 - y) < tolerance;\r\n            let left = Math.abs(x1 - x) < tolerance;\r\n            let right = Math.abs(x2 - x) < tolerance;\r\n            let inYBounds = y > y1 && y < y2;\r\n            let inXBounds = x > x1 && x < x2;\r\n\r\n            if (right && inYBounds) {\r\n                return [item, \"right\"];\r\n            }\r\n\r\n            if (top && left) {\r\n                return [item, \"topLeft\"];\r\n            } else if (top && right) {\r\n                return [item, \"topRight\"];\r\n            } else if (bottom && left) {\r\n                return [item, \"bottomLeft\"];\r\n            } else if (bottom && right) {\r\n                return [item, \"bottomRight\"];\r\n            } else if (left && inYBounds) {\r\n                return [item, \"left\"];\r\n            } if (right && inYBounds) {\r\n                return [item, \"right\"];\r\n            } else if (top && inXBounds) {\r\n                return [item, \"top\"];\r\n            } else if (bottom && inXBounds) {\r\n                return [item, \"bottom\"];\r\n            }\r\n        }\r\n    }\r\n\r\n    // All else fails\r\n    return [null, null];\r\n}\r\n\r\nexport const distanceThreshold = 15;\r\n\r\n// Find connectable for arrow within a threshold distance\r\nfunction getConnectionDataForArrow(cursorX, cursorY) {\r\n    const angleThreshold = 8;\r\n\r\n    let nearest = null;\r\n    let nearestDistance = 0;\r\n\r\n    // Find nearest connectable\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item !== null) {\r\n            if (item.typeName === \"Vertex\") {\r\n                let sideData = item.getNearestSideFrom(cursorX, cursorY, lastX, lastY);\r\n                // Only check if valid\r\n                if (sideData !== null && sideData[0] < distanceThreshold) {\r\n                    // Compare dist\r\n                    if (nearest === null || sideData[0] < nearestDistance) {\r\n                        nearest = [0, item.semanticIdentity.UUID, sideData[1], sideData[2]];\r\n                        nearestDistance = sideData[0];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    // Set coordinates\r\n    let coordinate = nearest;\r\n    if (nearest === null) {\r\n        coordinate = [1, cursorX, cursorY];\r\n    }\r\n\r\n    // If can't snap to right angles\r\n    if (arrowPath.length < 1 || coordinate[0] === 0) return { coord: coordinate, snapped: nearest !== null, nearest: nearest };\r\n\r\n    // Get angle\r\n    let lastPathX = arrowPath[arrowPath.length - 1][1];\r\n    let lastPathY = arrowPath[arrowPath.length - 1][2];\r\n    let x = coordinate[1] - lastPathX;\r\n    let y = coordinate[2] - lastPathY;\r\n\r\n    // must be y,x check documentation if you dont believe me\r\n    let angle = Math.atan2(y, x) * (180 / Math.PI);\r\n    // Make positive\r\n    angle = (angle + 360) % 360;\r\n    // Get relative\r\n    let relAngle = angle % 90;\r\n\r\n    // Check if it should snap to right angles\r\n    if (relAngle > 90 - angleThreshold || relAngle < angleThreshold) {\r\n        // Get length\r\n        let l = getDistance(0, 0, x, y);\r\n\r\n        // Choose angle\r\n        let angles = [0, 90, 180, 270, 360];\r\n        let nearestAngle = angles[0];\r\n        for (let i = 1; i < angles.length; i++) {\r\n            if (Math.abs(angles[i] - angle) < Math.abs(nearestAngle - angle)) {\r\n                nearestAngle = angles[i];\r\n            }\r\n        }\r\n        let nearestRad = nearestAngle * (Math.PI / 180);\r\n\r\n        // Create vector\r\n        let xv = l * Math.cos(nearestRad);\r\n        let yv = l * Math.sin(nearestRad);\r\n\r\n        // Create point (not vector sitting on 0,0)\r\n        coordinate = [coordinate[0], lastPathX + xv, lastPathY + yv];\r\n\r\n\r\n    }\r\n\r\n    return { coord: coordinate, snapped: nearest !== null, nearest: nearest }\r\n}\r\n\r\nexport function getSelectedObject(canvas) {\r\n    return canvas.props.mainState.selectedObject\r\n}\r\n\r\nfunction resizeObjectOnMouseMove(e, resizeVars) {\r\n    let coords = getGraphXYFromMouseEvent(e);\r\n\r\n    resizeVars[0].expandSide(resizeVars[1], coords[0], coords[1], canvasContext);\r\n\r\n    //grab object and arrows connected to it\r\n    // update arrows\r\n    updateA();\r\n    \r\n    \r\n}\r\n\r\n// Sets the objects uuid and adds it to the root of currentObjects\r\nexport function addObject(object) {\r\n    if (object === null || object === undefined) return;\r\n    currentObjects.add(object);\r\n}\r\n\r\n// Sets the currentObjects value to a new one. WARNING it will override the current value without any checks\r\nexport function setCurrentObjects(newObjects) {\r\n    currentObjects = newObjects;\r\n    drawAll();\r\n}\r\n\r\nexport function newFile() {\r\n    // Confirm\r\n    let r = window.confirm(\"Are you sure, this will clear the current canvas!\");\r\n    if (r === true) {\r\n        console.log(\"Clearing canvas\");\r\n        window.location.reload();\r\n    } else {\r\n        console.log(\"User opted to not clear the canvas\");\r\n    }\r\n\r\n    // Redraw\r\n    drawAll(currentObjects);\r\n}\r\n\r\nfunction arrowToolSelected() {\r\n    return arrowType === Tool.Visibility || arrowType === Tool.Edge || arrowType === Tool.Specialisation\r\n}\r\n\r\nexport function getObjectFromUUID(UUID) {\r\n    let foundObject;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.semanticIdentity.UUID === UUID) {\r\n            foundObject = item;\r\n        }\r\n    });\r\n    return foundObject;\r\n}\r\n\r\n\r\nfunction findNearestArrowPointIndex(x, y) {\r\n    let nearestPointIndex = -1;\r\n    // Nearest distance here is used as a tolerance variable\r\n    let nearestDistance = 30;\r\n    let cDist;\r\n    let nearestArrow = null;\r\n\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n            item.path.forEach((point) => {\r\n                cDist = Math.hypot(x - point[0], y - point[1]);\r\n                console.log(cDist);\r\n                if (cDist < nearestDistance) {\r\n                    nearestDistance = cDist;\r\n                    nearestPointIndex = item.path.indexOf(point);\r\n                    nearestArrow = item\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return [nearestPointIndex, nearestArrow]\r\n}\r\n\r\nfunction StickArrowToObject(connectionData, arrow, index) {\r\n    // so the line sticks to object\r\n    if (connectionData['snapped'] === false) {\r\n        let coord = connectionData['coord'];\r\n        // update the arrow\r\n        arrow.path[index] = [coord[1], coord[2]]\r\n    } else {\r\n        let vertexUUID = connectionData['nearest'][1];\r\n        let vertex = getObjectFromUUID(vertexUUID);\r\n\r\n        if (vertex !== undefined) {\r\n            arrow.path[index] = arrow.rebuildPath()\r\n        }\r\n    }\r\n}\r\n\r\nfunction moveArrowPointOnMouseMove(e, index, arrow) {\r\n    let x, y;\r\n    [x, y] = getGraphXYFromMouseEvent(e);\r\n    let conData = getConnectionDataForArrow(x, y);\r\n    arrow.pathData[index] = conData['nearest'];\r\n    StickArrowToObject(conData, arrow, index);\r\n\r\n\r\n}\r\n\r\n\r\n// Event based functions\r\nexport function onLeftMousePress(canvas, x, y) {\r\n\r\n    // Checks if your mouse is in range of the borders of a box to resize them\r\n    let resizeVars = checkResizeBounds(x, y);\r\n    if (canvas.tool === Tool.Vertex || canvas.tool === Tool.Select) {\r\n        if (resizeVars[0] !== null) {\r\n            if (resizeVars[0] === getSelectedObject(canvas)) {\r\n                saveBlockStates(canvas, x, y);\r\n                resizing = true;\r\n                canvasElement.onmousemove = function (e) {\r\n                    resizeObjectOnMouseMove(e, resizeVars);\r\n\r\n                };\r\n                \r\n                return;\r\n            }\r\n        } else {\r\n        }\r\n\r\n\r\n\r\n        let intersection = findIntersected(x, y);\r\n        if (canvas.tool === Tool.Vertex && intersection !== null) {\r\n            //console.log(\"Selecting intersected Vertex\");\r\n            canvas.props.setLeftMenu(intersection);\r\n            canvas.props.setMode(Tool.Select);\r\n            cancelDraw = true;\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    if (canvas.tool === Tool.Select) {\r\n        let index, arrow;\r\n        [index, arrow] = findNearestArrowPointIndex(x, y);\r\n        //console.log(index, arrow);\r\n        if (arrow === getSelectedObject(canvas)) {\r\n            if (index !== -1) {\r\n                resizing = true;\r\n                let func = function (e) {\r\n                    moveArrowPointOnMouseMove(e, index, arrow)\r\n                };\r\n\r\n\r\n                canvasElement.addEventListener(\"mousemove\", func);\r\n                canvasElement.addEventListener(\"mouseup\", () => {\r\n                    canvasElement.removeEventListener(\"mousemove\", func);\r\n                    console.log(\"removed\")\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    mouseStartX = x;\r\n    mouseStartY = y;\r\n\r\n\r\n\r\n    // Enable example draw while user is deciding shape\r\n    canvasElement.onmousemove = function (e) { onMouseMove(e, canvas) }\r\n\r\n\r\n}\r\n\r\n//aligning lines when large box moved\r\nexport function checkArrowsConnectedToBox(Object) {\r\n    // check arrows which one matches the box that was moved by its ID \r\n\r\n    // check how much the box has changed\r\n    let objectID;\r\n\r\n    let arrowArray = [];\r\n\r\n    resizing = true;\r\n    objectID = Object.semanticIdentity.UUID;\r\n    console.log(objectID);\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n            let conData = 0;\r\n            //If the object is connected to destination\r\n            if (objectID === item.destVertexUUID) {\r\n                arrowArray.push(item);\r\n\r\n                // get connection data calcs min dist to travel and hopefully it's straight up\r\n                // first object destination y is less than object y\r\n                if (item.path[0][1] < Object.y) {\r\n                    conData = getConnectionDataForArrow(item.path[0][0], Object.y);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(item.path[0][0], Object.y + Object.height);\r\n                }\r\n                item.pathData[1] = conData['nearest'];\r\n                console.log(\"dest one\")\r\n                StickArrowToObject(conData, item, 1);\r\n\r\n                //If the object is connected to Source\r\n            } else if (objectID === item.sourceVertexUUID) {\r\n                arrowArray.push(item);\r\n                if (item.path[1][1] < Object.y) {\r\n                    conData = getConnectionDataForArrow(item.path[1][0], Object.y);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(item.path[1][0], Object.y + Object.height);\r\n                }\r\n                item.pathData[0] = conData['nearest'];\r\n                console.log(\"source one\");\r\n                StickArrowToObject(conData, item, 0);\r\n\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    resizing = false;\r\n\r\n\r\n}\r\n\r\nexport function checkHorizArrowsConnectedToBox(Object) {\r\n    let objectID;\r\n\r\n    let arrowArray = [];\r\n\r\n    resizing = true;\r\n    objectID = Object.semanticIdentity.UUID;\r\n    console.log(objectID);\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n            let conData = 0;\r\n            //If the object is connected to destination\r\n            if (objectID === item.destVertexUUID) {\r\n                arrowArray.push(item);\r\n\r\n                if (item.path[0][0] < Object.x) {\r\n                    conData = getConnectionDataForArrow(Object.x + 1, item.path[0][1]);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(Object.x + Object.width - 1, item.path[0][1]);\r\n                }\r\n                item.pathData[1] = conData['nearest'];\r\n                console.log(\"dest one\")\r\n                StickArrowToObject(conData, item, 1);\r\n\r\n                //If the object is connected to Source\r\n            } else if (objectID === item.sourceVertexUUID) {\r\n                arrowArray.push(item);\r\n                if (item.path[1][0] < Object.x) {\r\n                    conData = getConnectionDataForArrow(Object.x + 1, item.path[0][1]);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(Object.x + Object.width - 1, item.path[0][1]);\r\n                }\r\n                item.pathData[0] = conData['nearest'];\r\n                console.log(\"source one\");\r\n                StickArrowToObject(conData, item, 0);\r\n\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    resizing = false;\r\n\r\n\r\n}\r\n\r\n\r\n//save the position of the clicked variable as global\r\nexport function saveBlockStates(canvas, x, y) {\r\n    selectedObject = getSelectedObject(canvas);\r\n    if (getSelectedObject(canvas) === null) {\r\n        selectedObject = findIntersected(x, y);\r\n    }\r\n    if (selectedObject !== null) {\r\n        blockBeenSelected = true;\r\n\r\n        //console.log(\"Block States Have been Saved\");\r\n        past_location = [selectedObject.x, selectedObject.y];\r\n        past_size = [selectedObject.width, selectedObject.height];\r\n    }\r\n}\r\n\r\nexport function setArrowType(type) {\r\n    arrowType = type\r\n}\r\n\r\n//make sure boxes don't collide\r\nexport function checkCollision(canvas, x, y) {\r\n    //console.log(\"Collision Tests:\");\r\n    let object = selectedObject;\r\n    let CollideCount = 0;\r\n    //console.log(past_size);\r\n    // for loop to check all boxes in the list\r\n    if (currentObjects.flatten() !== null && object !== null) {\r\n        currentObjects.flatten().forEach((item) => {\r\n            if (item.typeName === \"Vertex\") {\r\n                //make sure coords are > coords of box u just placed + its width\r\n                if (object.x === item.x && object.y === item.y) {\r\n                    //console.log(\"collides with itself\");\r\n                }\r\n                // error of 10 pixels for item's height\r\n                else if ((object.y > (item.y + item.height + 10)) || (object.x > (item.x + item.width))\r\n                    || (item.x > (object.x + object.width)) || (item.y > (object.y + object.height + 10))) {\r\n                    //console.log(\"NoCollide\");\r\n                }\r\n                else {\r\n                    // revert to past stored location\r\n                    object.x = past_location[0];\r\n                    object.y = past_location[1];\r\n                    object.width = past_size[0];\r\n                    object.height = past_size[1];\r\n                    CollideCount++;\r\n                    //console.log(\"Collided\");\r\n                }\r\n            }\r\n        });\r\n        // as long as never collided, change to new location\r\n        if (CollideCount === 0) {\r\n            past_location = [object.x, object.y];\r\n            past_size = [object.width, object.height]\r\n            //console.log(CollideCount);\r\n        }\r\n        blockBeenSelected = false;\r\n        drawAll(currentObjects);\r\n    }\r\n}\r\n\r\n\r\nexport function onRightMouseRelease(canvas, x, y) {\r\n    let ET = findIntersected(x, y);\r\n    if (arrowToolSelected() && ET !== null) {\r\n        // Create\r\n\r\n        let newObject = createObject(canvas, mouseStartX, mouseStartY, x, y);\r\n\r\n        // Reset path\r\n        arrowPath = [];\r\n        firstArrowJoint = true;\r\n\r\n        addObject(newObject);\r\n\r\n        // Disable example draw\r\n        canvasElement.onmousemove = null;\r\n        drawAll(currentObjects);\r\n\r\n        canvas.props.setLeftMenu(newObject)\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n}\r\n\r\nexport function updateA() {\r\n    let conData = 0;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n\r\n            conData = getConnectionDataForArrow(item.path[1][0], item.path[1][1]);\r\n            item.pathData[1] = conData['nearest'];\r\n            StickArrowToObject(conData, item, 0);\r\n\r\n\r\n        }\r\n    });\r\n}\r\nexport function compareSizesToMoveAll(Object) {\r\n\r\n    //for loop to get all the arrows\r\n    //for loop to check destination and source\r\n    //if object ID is equal \r\n    //find whichever one is not the currently selected block\r\n    // if it's smaller move it else do nothing\r\n\r\n    let objectID;\r\n    let verticalArray = [];\r\n    let horizontalArray = [];\r\n    let box;\r\n    let boxArray = [];\r\n\r\n    objectID = Object.semanticIdentity.UUID;\r\n    console.log(Object);\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n\r\n            //If the object is connected to destination\r\n            if (objectID === item.destVertexUUID) {\r\n                box = getObjectFromUUID(item.sourceVertexUUID);\r\n                if ((box.height + 10) * box.width < (Object.height + 10) * Object.width) {\r\n                    boxArray.push(box);\r\n\r\n                }\r\n                //check if arrow is on top/ below\r\n                if (item.path[0][1] < Object.y || item.path[0][1] > Object.y + Object.height + 10) {\r\n                    //push to vertical array\r\n                    verticalArray.push(item);\r\n                }\r\n                //check if arrow is left/ right\r\n                else if (item.path[0][0] < Object.x || item.path[0][0] > Object.x + Object.width) {\r\n                    //push to horizontal array\r\n                    horizontalArray.push(item);\r\n                }\r\n\r\n\r\n\r\n            }\r\n            //If the object is connected to Source\r\n            else if (objectID === item.sourceVertexUUID) {\r\n                box = getObjectFromUUID(item.destVertexUUID);\r\n                if ((box.height + 10) * box.width < (Object.height + 10) * Object.width) {\r\n                    boxArray.push(box);\r\n                }\r\n                //check if arrow is on top/ below\r\n                if (item.path[1][1] < Object.y || item.path[1][1] > Object.y + Object.height + 10) {\r\n                    //push to vertical array\r\n                    verticalArray.push(item);\r\n\r\n                }\r\n                //check if arrow is left/ right\r\n                else if (item.path[1][0] < Object.x || item.path[1][0] > Object.x + Object.width) {\r\n                    //push to horizontal array\r\n                    horizontalArray.push(item);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    });\r\n    return [boxArray, verticalArray, horizontalArray];\r\n}\r\n\r\nexport function checkBoxSizesAndReturnBigBox(first, second) {\r\n    if ((first.width) * (first.height + 10) <= (second.width) * (second.height + 10)) {\r\n        return [second, first];\r\n    } else {\r\n        return [first, second];\r\n    }\r\n}\r\n\r\n//line intersect\r\nexport function lineIntersect(canvas, x, y, secondObject) {\r\n    endX = 0;\r\n    endY = 0;\r\n\r\n    startX = 0;\r\n    startY = 0;\r\n\r\n    console.log(\"\\n \\n arrow path: \" + arrowPath + \"\\n\\n\");\r\n    arrowPath = [];\r\n\r\n    //previous object is below\r\n    if (previousObject.y > y && previousObject.x + previousObject.width > x) {\r\n        console.log(\"\\n\\n\\n prev object was below \\n\\n\\n\");\r\n        startY = previousObject.y;\r\n        startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n        endY = secondObject.y + secondObject.height + 10;\r\n        endX = secondObject.x + (0.5 * secondObject.width);\r\n\r\n    }\r\n    // previous object is above\r\n    else if (previousObject.y < y && previousObject.x + previousObject.width > x && previousObject.x < x) {\r\n        console.log(\"\\n\\n\\n prev object was above \\n\\n\\n\");\r\n        startY = previousObject.y + previousObject.height + 10; //+ means go to bottom\r\n        startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n        endY = secondObject.y;\r\n        endX = secondObject.x + (0.5 * secondObject.width);\r\n    }\r\n    //previous object is left of //if you click higher it counts as above\r\n\r\n    //sizes based on Total Area\r\n    let blockPre = previousObject.height + previousObject.width;\r\n    let blockSec = secondObject.height + secondObject.width;\r\n\r\n    //previous object is below\r\n    if (previousObject.y > (secondObject.y + secondObject.height + 10)) {\r\n        //console.log(\"\\n\\n\\n prev object was below \\n\\n\\n\");\r\n        //if previous is inside second range\r\n        if ((previousObject.x > secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            startY = previousObject.y;\r\n            startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n            endY = startY - (startY - (secondObject.y + secondObject.height + 10));\r\n            endX = startX;\r\n        }\r\n        //if second is inside previous range\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) > (secondObject.x + secondObject.width))) {\r\n            startY = secondObject.y + secondObject.height + 10;\r\n            startX = secondObject.x + (0.5 * secondObject.width);\r\n\r\n            endY = startY + (previousObject.y - startY);\r\n            endX = startX;\r\n        }\r\n        //If pre is downLeft of sec extend whichever box is bigger horizontally and fit\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + (secondObject.x - previousObject.x);\r\n                secondObject.x = previousObject.x;\r\n\r\n                startY = previousObject.y;\r\n                startX = secondObject.x + previousObject.width / 2;\r\n                endY = secondObject.y + secondObject.height;\r\n                endX = startX;\r\n                //second obj is changing size\r\n                checkArrowsConnectedToBox(secondObject);\r\n\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + ((secondObject.x + secondObject.width) - (previousObject.x + previousObject.width));\r\n                previousObject.x = previousObject.x;\r\n\r\n                startY = secondObject.y + secondObject.height;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y;\r\n                endX = startX;\r\n                //prev obj is changing size\r\n\r\n                //this one works\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n        //If pre is downright of sec extend whichever box is better horizontally and fit\r\n        else if (previousObject.x > secondObject.x) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + ((previousObject.x + previousObject.width) - (secondObject.x + secondObject.width));\r\n\r\n                startY = previousObject.y;\r\n                startX = previousObject.x + previousObject.width / 2;\r\n                endY = secondObject.y + secondObject.height;\r\n                endX = startX;\r\n                //second obj is changing size\r\n\r\n                checkArrowsConnectedToBox(secondObject, endX - startX, endY - startY);\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + (previousObject.x - secondObject.x);\r\n                previousObject.x = secondObject.x;\r\n\r\n                startY = secondObject.y + secondObject.height;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y;\r\n                endX = startX;\r\n                //prev obj is changing size\r\n\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n    }\r\n    // previous object is above\r\n    else if (previousObject.y + previousObject.height + 10 < secondObject.y) {\r\n        //console.log(\"\\n\\n\\n prev object was above \\n\\n\\n\");\r\n        //if previous is inside second range\r\n        if ((previousObject.x > secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            startY = previousObject.y + previousObject.height;\r\n            startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n            endY = startY - (startY - (secondObject.y));\r\n            endX = startX;\r\n        }\r\n        //if second is inside previous range\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) > (secondObject.x + secondObject.width))) {\r\n            startY = secondObject.y;\r\n            startX = secondObject.x + (0.5 * secondObject.width);\r\n\r\n            endY = startY + previousObject.height + (previousObject.y - startY);\r\n            endX = startX;\r\n        }\r\n        //If pre is upLeft of sec extend whichever box is better horizontally and fit\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + (secondObject.x - previousObject.x);\r\n                secondObject.x = previousObject.x;\r\n\r\n                startY = previousObject.y + previousObject.height;\r\n                startX = secondObject.x + previousObject.width / 2;\r\n                endY = secondObject.y;\r\n                endX = startX;\r\n                //second obj is changing size\r\n\r\n                //fixed\r\n                checkArrowsConnectedToBox(secondObject);\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + ((secondObject.x + secondObject.width) - (previousObject.x + previousObject.width));\r\n                previousObject.x = previousObject.x;\r\n\r\n                startY = secondObject.y;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y + previousObject.height;\r\n                endX = startX;\r\n                //previous obj is changing size\r\n\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n        //If pre is upright of sec extend whichever box is bigger horizontally and fit\r\n        else if (previousObject.x > secondObject.x) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + ((previousObject.x + previousObject.width) - (secondObject.x + secondObject.width));\r\n\r\n                startY = previousObject.y + previousObject.height;\r\n                startX = previousObject.x + previousObject.width / 2;\r\n                endY = secondObject.y;\r\n                endX = startX;\r\n                //previous obj is changing size\r\n\r\n                //this one is fixed\r\n                checkArrowsConnectedToBox(secondObject);\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + (previousObject.x - secondObject.x);\r\n                previousObject.x = secondObject.x;\r\n\r\n                startY = secondObject.y;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y + previousObject.height;\r\n                endX = startX;\r\n\r\n                //second obj is changing size\r\n\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //previous object is left \r\n    else if (previousObject.x + previousObject.width < secondObject.x) {\r\n\r\n        //Previous is smaller\r\n        if (previousObject.y > secondObject.y && previousObject.y + previousObject.height + 10 < secondObject.y + secondObject.height + 10) {\r\n            startY = previousObject.y + (previousObject.height + 10) / 2;\r\n            startX = previousObject.x + previousObject.width;\r\n\r\n            endX = secondObject.x;\r\n            endY = startY;\r\n\r\n        }\r\n        //Second is smaller\r\n        else if (secondObject.y > previousObject.y && secondObject.y + secondObject.height + 10 < previousObject.y + previousObject.height + 10) {\r\n            startY = secondObject.y + (secondObject.height + 10) / 2;\r\n            startX = secondObject.x;\r\n\r\n            endX = previousObject.x + previousObject.width;\r\n            endY = startY;\r\n\r\n        }\r\n        //Top Left and peeking\r\n        else if (previousObject.y + previousObject.height + 10 > secondObject.y && secondObject.y > previousObject.y) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.height = secondObject.height + (secondObject.y - previousObject.y);\r\n                secondObject.y = previousObject.y;\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = previousObject.x + previousObject.width;\r\n                endX = secondObject.x;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n                console.log(\"m\");\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                let increase = previousObject.height + 10 + ((secondObject.y + secondObject.height) - (previousObject.y + previousObject.height));\r\n                //looks at x coord and y coord and @ that coord checks if there's a box\r\n                //resizeVars[0] returns the box if there is a\r\n                //resizeVars[1] is which side/corner of the box that its coords are expected to be at (else null)\r\n                let resizeVars = checkResizeBounds(previousObject.x + previousObject.width, previousObject.y + previousObject.height + 10);\r\n                console.log(resizeVars);\r\n                resizeVars[0].expandSide(resizeVars[1], previousObject.x + previousObject.width, previousObject.y + increase, canvasContext);\r\n\r\n\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n                startX = secondObject.x;\r\n\r\n                endX = previousObject.x + previousObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n                console.log(\"n\");\r\n            }\r\n        }\r\n        //Bottom Left and peeking\r\n        else if (secondObject.y + secondObject.height + 10 > previousObject.y && previousObject.y + previousObject.height + 10 > secondObject.y + secondObject.height + 10) {\r\n            if (blockPre <= blockSec) {\r\n\r\n                let increase = secondObject.y + secondObject.height + 10 + ((previousObject.y + previousObject.height + 10) - (secondObject.y + secondObject.height + 10));\r\n\r\n                let resizeVars = checkResizeBounds(secondObject.x + secondObject.width, secondObject.y + secondObject.height + 10);\r\n                console.log(resizeVars);\r\n                resizeVars[0].expandSide(resizeVars[1], secondObject.x + secondObject.width, increase, canvasContext);\r\n\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = secondObject.x;\r\n\r\n                endX = previousObject.x + previousObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n                console.log(\"o\");\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                previousObject.height = previousObject.height + 10 + (previousObject.y - secondObject.y);\r\n                previousObject.y = secondObject.y;\r\n\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n                startX = secondObject.x;\r\n\r\n                endX = previousObject.x + previousObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n                console.log(\"p\");\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    //Previous object is right side\r\n    else if (previousObject.x > (secondObject.x + secondObject.width)) {\r\n\r\n        //Previous is smaller and on inside\r\n        if (previousObject.y > secondObject.y && previousObject.y + previousObject.height < secondObject.y + secondObject.height) {\r\n            startY = previousObject.y + (previousObject.height + 10) / 2;\r\n            startX = previousObject.x;\r\n\r\n            endX = secondObject.x + secondObject.width;\r\n            endY = startY;\r\n\r\n        }\r\n        //Second is smaller and on inside\r\n        else if (secondObject.y > previousObject.y && secondObject.y + secondObject.height < previousObject.y + previousObject.height) {\r\n            startY = secondObject.y + (secondObject.height + 10) / 2;\r\n            startX = secondObject.x + secondObject.width;\r\n\r\n            endX = previousObject.x;\r\n            endY = startY;\r\n\r\n            console.log(\"r\");\r\n        }\r\n        //Top Right and peeking\r\n        else if (previousObject.y + previousObject.height + 10 > secondObject.y && secondObject.y > previousObject.y) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.height = secondObject.height + 10 + (secondObject.y - previousObject.y);\r\n                secondObject.y = previousObject.y;\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = previousObject.x;\r\n\r\n                endX = secondObject.x + secondObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n                console.log(\"s\");\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                previousObject.height = previousObject.height + 10 + ((secondObject.y + secondObject.height + 10) - (previousObject.y + previousObject.height + 10));\r\n\r\n                startX = secondObject.x + secondObject.width;\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n\r\n                endX = previousObject.x;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n                console.log(\"t\");\r\n            }\r\n\r\n        }\r\n        //Bottom Left and peeking\r\n        else if (secondObject.y + secondObject.height + 10 < previousObject.y + previousObject.height + 10 && previousObject.y < secondObject.y + secondObject.height + 10) {\r\n            if (blockPre <= blockSec) {\r\n                let increase = secondObject.height + 10 + ((previousObject.y + previousObject.height + 10) - (secondObject.y + secondObject.height + 10));\r\n                let resizeVars = checkResizeBounds(secondObject.x + secondObject.width, secondObject.y + secondObject.height + 10);\r\n                console.log(resizeVars);\r\n                resizeVars[0].expandSide(resizeVars[1], secondObject.x + secondObject.width, secondObject.y + increase, canvasContext);\r\n\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = previousObject.x;\r\n\r\n                endX = secondObject.x + secondObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n                console.log(\"u\");\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                let increase = previousObject.height + 10 + (previousObject.y - secondObject.y);\r\n                let resizeVars = checkResizeBounds(previousObject.x + previousObject.width, previousObject.y + previousObject.height + 10);\r\n                console.log(resizeVars);\r\n                resizeVars[0].expandSide(resizeVars[1], previousObject.x + previousObject.width, previousObject.y + increase, canvasContext);\r\n\r\n                previousObject.y = secondObject.y;\r\n\r\n\r\n                startX = previousObject.x;\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n\r\n                endX = secondObject.x + secondObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n                console.log(\"v\");\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    arrowPath.push(getConnectionDataForArrow(startX, startY).coord);\r\n\r\n\r\n    let newObject = createObject(canvas, startX, startY, endX, endY);\r\n\r\n\r\n\r\n    return newObject;\r\n\r\n\r\n\r\n}\r\n//\r\nexport function collectMehBox(boxes, arrows, bigbox, item, index) {\r\n\r\n    //console.log(\"runningcollect\");\r\n    if (bigbox.semanticIdentity.UUID === item.destVertexUUID) {\r\n        let box = getObjectFromUUID(item.sourceVertexUUID);\r\n        if ((bigbox.y) * index + (box.y) * (1 - index) > (box.y + box.height + 10) * index + (bigbox.y + bigbox.height + 10) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n\r\n\r\n    } else if (bigbox.semanticIdentity.UUID === item.sourceVertexUUID) {\r\n        let box = getObjectFromUUID(item.destVertexUUID);\r\n        if ((bigbox.y) * index + (box.y) * (1 - index) > (box.y + box.height + 10) * index + (bigbox.y + bigbox.height + 10) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n    }\r\n    return [boxes, arrows];\r\n}\r\n//Will arrange boxes and arrows in linked order above or below the big box.\r\n//Bigbox - The larger important box\r\n//boxes - list of all the boxes being moved\r\n//arrows - arrows connect to the above boxes\r\n//index - denotes the side that boxes are connected to \r\nexport function arrangeboxesandarrows(bigbox, boxes, arrows, index) {\r\n    //index = 1 = up\r\n    if (boxes.length >= 2) {\r\n        let b = 0;\r\n        let x = bigbox.x;\r\n        let y = bigbox.y + (bigbox.height + 30) * (1 - index);\r\n        for (b; b < boxes.length; b++) {\r\n            boxes[b].x = x;\r\n            boxes[b].y = y - ((boxes[b].height + 30) * index);\r\n            x = x + boxes[b].width + 20;\r\n\r\n            if (boxes[b].x + boxes[b].width > bigbox.x + bigbox.width) {\r\n                bigbox.width = bigbox.width + boxes[b].width\r\n            }\r\n        }\r\n        b = 0;\r\n        for (b; b < boxes.length; b++) {\r\n            console.log(arrows[b]);\r\n            let conData = getConnectionDataForArrow(boxes[b].x + boxes[b].width / 2, bigbox.y + (bigbox.height + 10) * (1 - index));\r\n            arrows[b].pathData[1] = conData['nearest'];\r\n            StickArrowToObject(conData, arrows[b], 1);\r\n        }\r\n    }\r\n}\r\n//\r\nexport function collectsidebox(boxes, arrows, bigbox, item, index) {\r\n\r\n    if (bigbox.semanticIdentity.UUID === item.destVertexUUID) {\r\n        let box = getObjectFromUUID(item.sourceVertexUUID);\r\n        if ((bigbox.x) * index + (box.x) * (1 - index) > (box.x + box.width) * index + (bigbox.x + bigbox.width) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n\r\n\r\n    } else if (bigbox.semanticIdentity.UUID === item.sourceVertexUUID) {\r\n        let box = getObjectFromUUID(item.destVertexUUID);\r\n        if ((bigbox.x) * index + (box.x) * (1 - index) > (box.x + box.width) * index + (bigbox.x + bigbox.width) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n    }\r\n    return [boxes, arrows];\r\n}\r\nexport function arrangeboxesandarrowshorizontal(bigbox, boxes, arrows, index) {\r\n    //index = 0 = right\r\n    if (boxes.length >= 2) {\r\n        let b = 0;\r\n        let x = bigbox.x + (bigbox.width + 30) * (1 - index);\r\n        let y = bigbox.y;\r\n        for (b; b < boxes.length; b++) {\r\n            boxes[b].x = x - ((boxes[b].width + 30) * index);\r\n            boxes[b].y = y;\r\n            y = y + boxes[b].height + 20;\r\n            //extending box\r\n            if (boxes[b].y + boxes[b].height + 10 > bigbox.y + bigbox.height + 10) {\r\n                bigbox.height = bigbox.height + boxes[b].height;\r\n            }\r\n        }\r\n        b = 0;\r\n        for (b; b < boxes.length; b++) {\r\n            console.log(arrows[b]);\r\n            let conData = getConnectionDataForArrow(bigbox.x + (bigbox.width) * (1 - index), boxes[b].y + (boxes[b].height + 10) / 2);\r\n            arrows[b].pathData[1] = conData['nearest'];\r\n            StickArrowToObject(conData, arrows[b], 1);\r\n        }\r\n    }\r\n}\r\n\r\nexport function shiftBoxes(secondObject) {\r\n    //if box is within horizontal bounds\r\n\r\n    let upBoxes = [];\r\n    let upArrows = [];\r\n    let downBoxes = [];\r\n    let downArrows = [];\r\n    let leftBoxes = [];\r\n    let leftArrows = [];\r\n    let rightBoxes = [];\r\n    let rightArrows = [];\r\n    let [bigBox, smallBox] = checkBoxSizesAndReturnBigBox(previousObject, secondObject);\r\n\r\n    //grab all arrows connected to either object\r\n    //Index 0 means down index 1 means up\r\n\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n            //get the big box because it has all the arrows connected\r\n            if (bigBox.y + bigBox.height + 10 < smallBox.y && smallBox.x > bigBox.x && smallBox.x + smallBox.width < bigBox.x + bigBox.width) {\r\n                [downBoxes, downArrows] = collectMehBox(downBoxes, downArrows, bigBox, item, 0);\r\n\r\n\r\n            } else if (bigBox.y > (smallBox.y + smallBox.height + 10) && smallBox.x > bigBox.x && smallBox.x + smallBox.width < bigBox.x + bigBox.width) {\r\n                [upBoxes, upArrows] = collectMehBox(upBoxes, upArrows, bigBox, item, 1);\r\n\r\n            } else if (bigBox.x > smallBox.x + smallBox.width && smallBox.y > bigBox.y && smallBox.y + smallBox.height + 10 < bigBox.y + bigBox.height + 10) {\r\n                console.log(\"left ran\");\r\n                [leftBoxes, leftArrows] = collectsidebox(leftBoxes, leftArrows, bigBox, item, 1);\r\n\r\n            } else if (bigBox.x + bigBox.width < smallBox.x && smallBox.y > bigBox.y && smallBox.y + smallBox.height + 10 < bigBox.y + bigBox.height + 10) {\r\n                console.log(\"right ran\");\r\n                [rightBoxes, rightArrows] = collectsidebox(rightBoxes, rightArrows, bigBox, item, 0);\r\n            }\r\n        }\r\n    });\r\n    //Do stuff to boxes\r\n    //1 = up\r\n    //0 = down\r\n    arrangeboxesandarrows(bigBox, downBoxes, downArrows, 0);\r\n    arrangeboxesandarrows(bigBox, upBoxes, upArrows, 1);\r\n\r\n    arrangeboxesandarrowshorizontal(bigBox, leftBoxes, leftArrows, 1);\r\n    arrangeboxesandarrowshorizontal(bigBox, rightBoxes, rightArrows, 0);\r\n\r\n    //console.log(downboxes.length);\r\n\r\n\r\n\r\n}\r\n\r\nexport function onLeftMouseRelease(canvas, x, y) {\r\n\r\n\r\n    if (cancelDraw) {\r\n        cancelDraw = false;\r\n        return;\r\n    }\r\n\r\n    if (resizing === true) {\r\n        resizing = false;\r\n        canvasElement.onmousemove = null;\r\n        return\r\n    }\r\n\r\n    // Disable example draw\r\n    canvasElement.onmousemove = null;\r\n\r\n    if (arrowToolSelected()) {\r\n        \r\n\r\n        if (getConnectionDataForArrow(x, y).snapped && !firstArrowJoint) {\r\n            // Create\r\n            let secondObject = findIntersected(x, y);\r\n            let newObject = null;\r\n            let firstObject = arrowPath[0] // the first position in the arrowpath array will either be null or the first vertex that is clicked with an arrow. \r\n                                            // therefor the arrow will not be created unless the first object that is clicked with the arrow tool is a vertex. - cooper\r\n            \r\n            if (firstObject !== null && secondObject !== null && savedArrows !== null) {\r\n                // create the arrow using the createObject function rather than the other function they were using as this seems much more stable - cooper\r\n                // also deleted a weird forloop that they had that i assume was for stopping the arrow overlap issue, but they themselves commented that it doesnt work\r\n                newObject = createObject(canvas, mouseStartX, mouseStartY, x, y); \r\n               \r\n            } \r\n\r\n            // Reset path\r\n            arrowPath = [];\r\n            firstArrowJoint = true;\r\n\r\n\r\n            if (newObject !== null) {\r\n                addObject(newObject);\r\n            }\r\n\r\n\r\n            drawAll(currentObjects);\r\n\r\n\r\n\r\n            //converting all arrows to savedArrows array\r\n            let i = 0;\r\n            currentObjects.flatten().forEach((item) => {\r\n                if (item.typeName === \"Arrow\") {\r\n                    savedArrows[i] = item.path;\r\n                    i++;\r\n                }\r\n\r\n            });\r\n\r\n            if (newObject !== null) {\r\n                canvas.props.setLeftMenu(newObject);\r\n            }\r\n\r\n            canvas.props.setMode(Tool.Select);\r\n            if (previousObject !== null && secondObject !== null) {\r\n                shiftBoxes(secondObject);\r\n            }\r\n            previousObject = null;\r\n\r\n\r\n        } else {\r\n            //maybe here where we can disable compound lines\r\n\r\n            //save object here\r\n            previousObject = findIntersected(x, y);\r\n            \r\n        \r\n\r\n            arrowPath.push(getConnectionDataForArrow(x, y).coord);\r\n            lastX = x;\r\n            lastY = y;\r\n            canvasElement.onmousemove = function (e) {\r\n                onMouseMove(e, canvas)\r\n            };\r\n            firstArrowJoint = false;\r\n        }\r\n\r\n    }\r\n\r\n    if (canvas.tool === Tool.Vertex) {\r\n        let newObject = createObject(canvas, mouseStartX, mouseStartY, x, y);\r\n        addObject(newObject);\r\n\r\n        canvas.props.setLeftMenu(newObject);\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n    if (canvas.tool === Tool.Artifact) {\r\n        let newObject = createArtifact(canvas, mouseStartX, mouseStartY);\r\n        addObject(newObject);\r\n\r\n        canvas.props.setLeftMenu(newObject);\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n    if (canvas.tool === Tool.Container) {\r\n        let newObject = createContainer(canvas, mouseStartX, mouseStartY);\r\n        newObject.setColour(\"#FFFFFF\");\r\n        addObject(newObject);\r\n        canvas.props.setLeftMenu(newObject);\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n\r\n\r\n\r\n\r\n    drawAll(currentObjects);\r\n\r\n}\r\n\r\nfunction onMouseMove(e, canvas) {\r\n    let position = getGraphXYFromMouseEvent(e);\r\n\r\n    // Redraw Existing Objects\r\n    drawAll(currentObjects);\r\n\r\n    // Draw the new object\r\n    let newObject = createObject(canvas, mouseStartX, mouseStartY, position[0], position[1]);\r\n\r\n    canvasContext.globalAlpha = 0.75;\r\n    if (newObject !== null) {\r\n        newObject.draw(canvasContext);\r\n    }\r\n    canvasContext.globalAlpha = 1.0;\r\n}\r\n\r\nexport function onMiddleClick(canvas, x, y, savedObjects = null, shiftDown = false) {\r\n    // for arrows\r\n    startMoveX = x;\r\n    startMoveY = y;\r\n    // selecting the object based on coordinate\r\n    // if it doesnt find an object dont run it\r\n\r\n    let selectedObject = findIntersected(x, y);\r\n\r\n    //compareSizesToMoveAll returns any connected vertices to the selected along with the arrows themselves to be updated\r\n    let [friendObject, arrowsVert, arrowsHoriz] = compareSizesToMoveAll(selectedObject);\r\n\r\n        //If the selected block has a friend (connected by arrow) it will begin to try and identify friends of friends\r\n    if (friendObject !== null || friendObject.length >= 1) {\r\n        let ObjectsToCheck = friendObject;\r\n        let nextObjects = [];\r\n\r\n        //For loop to check all the closest friends (connected directly to selected )\r\n        for (let n = 0; n < ObjectsToCheck.length; n++) {\r\n            let [newfriendObject, newarrowsVert, newarrowsHoriz] = compareSizesToMoveAll(ObjectsToCheck[n]);\r\n            if (newfriendObject !== null) {\r\n\r\n                //for loop to check for duplicates and remove if any\r\n                for (let nf = 0; nf < newfriendObject.length; nf++) {\r\n                    console.log(ObjectsToCheck.length)\r\n                    for (let of = 0; of < ObjectsToCheck.length; of++) {\r\n                        //doesn't get run?:\r\n                        if (newfriendObject[nf].semanticIdentity.UUID === ObjectsToCheck[of].semanticIdentity.UUID) {\r\n                            newfriendObject.splice(nf, 1);\r\n                        }\r\n                    }\r\n                }\r\n                //Adds the objects that are connected to the friends to the friend list.\r\n                if (newfriendObject.length >= 1) {\r\n                    for (let p = 0; p < newfriendObject.length; p++) {\r\n                        nextObjects.push(newfriendObject[p]);\r\n                        friendObject.push(newfriendObject[p]);\r\n                    }\r\n\r\n                } \r\n            }\r\n           \r\n        }\r\n        //Updates the friendlist to begin a new search. \r\n        ObjectsToCheck = nextObjects; \r\n\r\n\r\n\r\n    }\r\n    let F = [];\r\n    if (friendObject !== null) {\r\n        let i = 0;\r\n        for (i; i < friendObject.length; i++) {\r\n            F.push([x - friendObject[i].x, y - friendObject[i].y]); //distance from mouse to actual object's x, y\r\n            //console.log(F);\r\n        }\r\n    }\r\n\r\n    let S = []; //previous coords\r\n    if (savedObjects !== null) {\r\n        let i = 0;\r\n        for (i; i < savedObjects.length; i++) {\r\n            S.push([x - savedObjects[i].x, y - savedObjects[i].y]);\r\n            //console.log(F);\r\n        }\r\n    }\r\n\r\n    if (selectedObject !== null) {\r\n        saveBlockStates(canvas, x, y);\r\n        // check the distance between the mouse and the object\r\n        let saveDisX = x - selectedObject.x;\r\n        let saveDisY = y - selectedObject.y;\r\n\r\n\r\n        canvasElement.onmousemove = function (e) { moveObject(e, selectedObject, friendObject, F, savedObjects, S, saveDisX, saveDisY, arrowsVert, arrowsHoriz, shiftDown) }\r\n    }\r\n\r\n}\r\n\r\nexport function onMouseLeave() {\r\n    canvasElement.onmousemove = {};\r\n    firstArrowJoint = true;\r\n    drawAll()\r\n}\r\n\r\n// moving objects in respect to cursor values saveDisX, saveDisY\r\n// friends = the smaller boxes that are connected to the bigger box\r\nfunction moveObject(e, object, friends, F, savedObjects = null, S, saveDisX, saveDisY, arrowsVert, arrowsHoriz, shiftDown) {\r\n    if (object != null) {\r\n        if (object.typeName === \"Vertex\") {\r\n            let position = getGraphXYFromMouseEvent(e);\r\n            let x = position[0] - saveDisX;\r\n            let y = position[1] - saveDisY;\r\n\r\n            //for loop iterate through all boxes assume they not empty\r\n            if (shiftDown) {\r\n                if (friends !== null) {\r\n                    let i = 0;\r\n                    //check friends' previous location and cursors location\r\n                    for (i; i < friends.length; i++) {\r\n                        friends[i].x = position[0] - F[i][0];\r\n                        friends[i].y = position[1] - F[i][1];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (savedObjects !== null) {\r\n                let i = 0;\r\n                //check friends' previous location and cursors location\r\n                for (i; i < savedObjects.length; i++) {\r\n                    savedObjects[i].x = position[0] - S[i][0];\r\n                    savedObjects[i].y = position[1] - S[i][1];\r\n                }\r\n            }\r\n\r\n\r\n\r\n            if (arrowsVert !== null) {\r\n                let conData = 0;\r\n                let j = 0;\r\n\r\n                for (j; j < arrowsVert.length; j++) {\r\n                    // source = one that's been clicked\r\n                    arrowsVert[j].path[1][0] = arrowsVert[j].path[0][0];\r\n                    conData = getConnectionDataForArrow(arrowsVert[j].path[1][0], arrowsVert[j].path[1][1]);\r\n\r\n\r\n\r\n                    if (conData['nearest'] !== null) {\r\n\r\n                        arrowsVert[j].pathData[1] = conData['nearest'];\r\n                        StickArrowToObject(conData, arrowsVert[j], 0);\r\n                        //console.log(arrowsVert[j].path);\r\n                    } else {\r\n                        //delete arrow                        \r\n                        deleteElement(arrowsVert[j]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (arrowsHoriz !== null) {\r\n                let conData = 0;\r\n                let k = 0;\r\n                for (k; k < arrowsHoriz.length; k++) {\r\n                    // source = one that's been clicked\r\n                    arrowsHoriz[k].path[1][1] = arrowsHoriz[k].path[0][1];\r\n                    conData = getConnectionDataForArrow(arrowsHoriz[k].path[1][0], arrowsHoriz[k].path[1][1]);\r\n\r\n                    if (conData['nearest'] !== null) {\r\n\r\n                        arrowsHoriz[k].pathData[1] = conData['nearest'];\r\n                        StickArrowToObject(conData, arrowsHoriz[k], 0);\r\n                        //console.log(arrowsHoriz[k].path);\r\n                    } else {\r\n                        //delete arrow\r\n                        deleteElement(arrowsHoriz[k]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            object.x = x;\r\n            object.y = y;\r\n\r\n            updateArrows();\r\n\r\n\r\n        } else if (object.typeName === \"Arrow\") {\r\n            return;\r\n\r\n        }\r\n    }\r\n}\r\nexport function updateArrows() {\r\n    let flattenedObjects = currentObjects.flatten();\r\n    flattenedObjects.forEach((item) => {\r\n        if (item !== null) {\r\n            if (item.typeName === \"Arrow\") {\r\n                item.rebuildPath();\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function solidifyObject() {\r\n    canvasElement.onmousemove = null;\r\n}\r\n\r\n// Zoom and pan\r\nexport function setZoom(newZoom) {\r\n    zoom = newZoom;\r\n\r\n    resetMouseOrigin();\r\n\r\n    drawAll();\r\n}\r\n\r\n// Useful for debugging\r\nexport function drawMarker(xpos, ypos) {\r\n    const radius = 2;\r\n    const lineWidth = 0.5;\r\n    const strokeColour = \"#007ACC\";\r\n    const fillColour = \"#007ACC55\";\r\n\r\n    let oldLineWidth = canvasContext.lineWidth;\r\n    canvasContext.lineWidth = lineWidth;\r\n    let oldStrokeStyle = canvasContext.strokeStyle;\r\n    canvasContext.strokeStyle = strokeColour;\r\n    let oldFillStyle = canvasContext.fillStyle;\r\n    canvasContext.fillStyle = fillColour;\r\n\r\n    canvasContext.globalAlpha = 1.0;\r\n    canvasContext.beginPath();\r\n    canvasContext.arc(xpos, ypos, radius, 0, Math.PI * 2, false);\r\n    canvasContext.fill();\r\n    canvasContext.stroke();\r\n    canvasContext.closePath();\r\n\r\n    canvasContext.lineWidth = oldLineWidth;\r\n    canvasContext.strokeStyle = oldStrokeStyle;\r\n    canvasContext.fillStyle = oldFillStyle;\r\n}\r\n\r\n// Gets the distance between x1, y1 and x2, y2\r\nexport function getDistance(x1, y1, x2, y2) {\r\n    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\r\n}\r\n\r\n// Finds the object that is intersected with the cursor, returns null if no objects are intersected\r\nexport function findIntersected(x, y) {\r\n    let selectedItem = null;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item !== null) {\r\n            if (item.intersects(x, y)) {\r\n                //console.log(\"Intersection detected with \", item.typeName);\r\n                selectedItem = item;\r\n            }\r\n        }\r\n    });\r\n    return selectedItem;\r\n}\r\n\r\nfunction createArtifact(canvas, x1, y1) {\r\n    let newPath;\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    if (canvas.tool === Tool.Artifact) {\r\n        // Get positions\r\n        let pos = orderCoordinates(x1, y1, x1 + 450, y1 + 50);\r\n        let vy1 = findNearestGridY(pos[1], 0);\r\n        let vy2 = findNearestGridY(pos[3], 0);\r\n\r\n        // Add vertex\r\n        return new Vertex(\"\", [\"\"], pos[0], findNearestGridY(y1, 1), pos[2] - pos[0], vy2 - vy1);\r\n\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction createContainer(canvas, x1, y1) {\r\n    let newPath;\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    if (canvas.tool === Tool.Container) {\r\n        // Get positions\r\n        let pos = orderCoordinates(x1, y1, x1 + 100, y1 + 60);\r\n        let vy1 = findNearestGridY(pos[1], 0);\r\n        let vy2 = findNearestGridY(pos[3], 0);\r\n\r\n        // Add Container\r\n        let newVert =  new Vertex(\"new Container\", [\"\"], pos[0], findNearestGridY(y1, 1), pos[2] - pos[0], vy2 - vy1);\r\n        newVert.setIsContainer(true);\r\n        return newVert;\r\n\r\n    }\r\n    return null;\r\n}\r\n\r\n//Links the container with the mirrorSemantic to the container with the Base (Mirror becomes base)\r\n\r\nexport function linkContainer(baseUUID,mirrorUUID){\r\n    let baseSemantic = null;\r\n    console.log(currentObjects.rootVertices) \r\n    //Since rootvertices was made as a set, cant just find indexes to reference, have to keep for looping to what we want\r\n    for(let i of currentObjects.rootVertices){\r\n        if(i.vertex.semanticIdentity.UUID === baseUUID){\r\n            baseSemantic = i;\r\n            break\r\n        }\r\n    }\r\n    for(let i of currentObjects.rootVertices){\r\n        if(i.vertex.semanticIdentity.UUID === mirrorUUID){\r\n            i.vertex.semanticIdentity = baseSemantic.vertex.semanticIdentity;\r\n            break\r\n        }\r\n    }\r\n    for(let i of currentObjects.rootVertices){\r\n        if(i.vertex.semanticIdentity.UUID === baseUUID){\r\n            updateLinkedContainers(baseSemantic.vertex);\r\n        }\r\n    }\r\n\r\n    console.log(currentObjects.rootVertices)\r\n\r\n}\r\n//Updates the appearances of linked containers to match the input container\r\n//Without a source container or doing a general scan, containers would be matched to copy the first vertex in the set, not the one that most recently changed\r\nexport function updateLinkedContainers(inputContainer){\r\n    for(let i of currentObjects.rootVertices){\r\n        if(inputContainer.semanticIdentity.UUID === i.vertex.semanticIdentity.UUID){\r\n            i.vertex.title = inputContainer.title\r\n            i.vertex.content = inputContainer.content\r\n            i.vertex.icons = inputContainer.icons\r\n            i.vertex.colour = inputContainer.colour\r\n            i.vertex.imageElements = inputContainer.imageElements\r\n            i.vertex.fontSize = inputContainer.fontSize\r\n        }\r\n    }\r\n    drawAll()\r\n}\r\n\r\n//Function for creating a vertex object without the left menu tools - Lachlan\r\nexport function createVertex(x1, y1, width, height,name,content,colour,icons,imageElements,fontSize,semanticIdentity){\r\n\r\n    return new Vertex(name, content, colour, x1, findNearestGridY(y1, 1), width, height,semanticIdentity);\r\n\r\n}\r\n\r\nexport function updateVertex(selectedObject){ // function to update the data of the contaimnment tree object and all other objects sharing the semantic- cooper\r\n    let vertex = getLinkedVertex(selectedObject); // 'vertex' refers to the treeview object.\r\n\r\n    vertex.text = selectedObject.title + \" 🟧\";\r\n    vertex.content = selectedObject.content;\r\n    vertex.width = selectedObject.width;\r\n    vertex.height = selectedObject.height;\r\n\r\n    if(vertex.parentRenderKey === selectedObject.vertexRenderKey){\r\n        console.log(vertex)\r\n        console.log(selectedObject)\r\n    }\r\n    else{\r\n        \r\n    }\r\n\r\n\r\n    for(let verticies of currentObjects.flatten()){\r\n        if(vertex.semanticIdentity.UUID === verticies.originalUUID && verticies !== selectedObject){ // updates all of the canvas objects that come from the treeview object.\r\n\r\n            //check if This graph vertex is in a different folder to the base vertex, if so make it white and add location\r\n            //console.log(vertex.parentRenderKey)\r\n            //console.log(verticies.vertexRenderKey)\r\n\r\n            if(vertex.parentRenderKey === verticies.vertexRenderKey){\r\n                \r\n            //If the vertex's model is in same folder\r\n            verticies.title = vertex.text.replace(\" 🟧\", \"\")\r\n            verticies.colour = vertex.colour;\r\n            verticies.content = vertex.content;\r\n            }\r\n            else{\r\n            verticies.title = vertex.text.replace(\" 🟧\", \"\")\r\n            verticies.colour = \"#FFFFFF\";\r\n            verticies.content = vertex.content;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getLinkedVertex(selectedObject){ // grabs the contaiment tree object - cooper\r\n    for(let vertex of vertexData){\r\n        if(vertex.semanticIdentity.UUID === selectedObject.originalUUID)\r\n        return vertex;\r\n    }\r\n}\r\n\r\nfunction createObject(canvas, x1, y1, x2, y2) {\r\n    let newPath;\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    if (canvas.tool === \"Vertex\") {\r\n        // Get positions\r\n        let pos = orderCoordinates(x1, y1, x2 + 10, y2);\r\n        let vy1 = findNearestGridY(pos[1], 0);\r\n        let vy2 = findNearestGridY(pos[3], 0);\r\n\r\n        // Add vertex\r\n        return new Vertex(\"\", [\"\"], pos[0], findNearestGridY(y1, 1), pos[2] - pos[0], vy2 - vy1);\r\n\r\n    } else if (arrowToolSelected()) {\r\n        // Generate path\r\n\r\n        newPath = arrowPath.concat([getConnectionDataForArrow(x2, y2).coord]);\r\n\r\n        // Check if first path connects to a vertex, and ignore if it doesn't\r\n        // Should be 0 if the connectable connects to a vertex\r\n        //\r\n        //\r\n        //because createObject is always running when moving mouse\r\n        //\r\n        // if current mouse pos is not over a box, don't create arrow\r\n        // if removed here, it is still removed in another function \r\n        //let intersection = findIntersected(x2, y2);\r\n        if (newPath[0][0] !== 0) {\r\n            return null;\r\n        }\r\n\r\n        // Create arrow\r\n        \r\n        let arrow = new Arrow(currentObjectsFlattened, newPath, arrowType);\r\n        arrow.rebuildPath(currentObjectsFlattened);\r\n        return arrow;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function getGraphXYFromMouseEvent(e) {\r\n    resetMouseOrigin();\r\n\r\n    let x = (e.clientX - mouseOriginX) / getEffectiveZoom();\r\n    let y = (e.clientY - mouseOriginY) / getEffectiveZoom();\r\n\r\n    return [x, y];\r\n}\r\n\r\nexport function getDownload() {\r\n\r\n    let DLelement = document.createElement(\"a\");\r\n    DLelement.href = canvasElement.toDataURL(\"image/png\").replace(/^data:image\\/[^;]/, 'data:application/octet-stream');\r\n    DLelement.download = \"Graph.png\";\r\n    document.body.appendChild(DLelement);\r\n    DLelement.click();\r\n\r\n}\r\n\r\nfunction orderCoordinates(sx, sy, ex, ey) {\r\n    // This code also ensures x1 < x2 and y1 < y2\r\n    let x1 = Math.min(sx, ex);\r\n    let y1 = Math.min(sy, ey);\r\n    let x2 = Math.max(sx, ex);\r\n    let y2 = Math.max(sy, ey);\r\n\r\n    return [x1, y1, x2, y2];\r\n}\r\n\r\n// Gets the effective (percentage) zoom from the current zoom\r\nfunction getEffectiveZoom() {\r\n    return zoom / 100;\r\n}\r\n\r\n// This should be used whenever the window itself resizes\r\nfunction recalculateScale() {\r\n    // Adjusts the aspect ratio so it is 1:1 instead of matching the windows.\r\n    // Also removes blurry rendering\r\n    //let dpi = window.devicePixelRatio;\r\n    let canvasContainer = document.getElementsByClassName(\"Canvas\")[0];\r\n    let styleHeight = +getComputedStyle(canvasContainer).getPropertyValue(\"height\").slice(0, -2);\r\n    let styleWidth = +getComputedStyle(canvasContainer).getPropertyValue(\"width\").slice(0, -2);\r\n\r\n    canvasElement.setAttribute('height', styleHeight * getEffectiveZoom());\r\n    canvasElement.setAttribute('width', styleWidth * getEffectiveZoom());\r\n\r\n    // Configurable\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n}\r\n\r\nfunction clearCanvas() {\r\n    // Fill base canvas\r\n    canvasContext.fillStyle = \"#ffffff\";\r\n    canvasContext.fillRect(0, 0, canvasWidth, canvasHeight);\r\n}\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { SemanticIdentity } from \"./SemanticIdentity\";\r\nimport {drawMarker, getDistance, getCurrentRenderKey} from \"../UIElements/CanvasDraw\";\r\nimport {getModelRenderKey} from \"../UIElements/ContainmentTree\";\r\nimport * as ArrowProps from \"./ArrowProperties\";\r\nimport { EdgeEnd } from \"./EdgeEnd\";\r\nimport {Tool} from \"../UIElements/LeftMenu\";\r\nimport * as canvasDraw from \"../UIElements/CanvasDraw\"\r\n\r\nexport class Arrow {\r\n    // Connects an arrow fromVertex to toVertex\r\n    // pathData is an array of objects that can either be a:\r\n    //      0) Vertex Data\r\n    //         [0, UUID, xPercentage, yPercentage]\r\n    //         The Percentage data is the relative percentage\r\n    //              e.g. 0,0 represents top left, 1,1 bottom right etc\r\n    //      1) Array containing an x and y element\r\n    //         [1, x, y]\r\n    constructor(objectsList, pathData, type, semanticIdentity) {\r\n        this.typeName = \"Arrow\";\r\n\r\n        if (semanticIdentity !== undefined || objectsList === null){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            if (objectsList.length > 1) {\r\n                this.semanticIdentity = new SemanticIdentity(\"Arrow from \" + objectsList[0].semanticIdentity.UUID + \" to \" + objectsList[1].semanticIdentity.UUID, \"\", \"\", \"\", undefined, []);\r\n            } else if (objectsList.length === 1) {\r\n                this.semanticIdentity = new SemanticIdentity(\"Arrow connecting \" + objectsList[0].semanticIdentity.UUID, \"\", \"\", \"\", undefined, []);\r\n            } else {\r\n                this.semanticIdentity = new SemanticIdentity(\"Arrow connecting 1 or less vertices\", \"\", \"\", \"\", undefined, []);\r\n            }\r\n        }\r\n\r\n        this.sourceEdgeEnd = new EdgeEnd(this.semanticIdentity.UUID);\r\n        this.destEdgeEnd = new EdgeEnd(this.semanticIdentity.UUID);\r\n\r\n        // Ensure there are at least 2 points\r\n        if (pathData.length === 1) pathData.push(pathData[0]);\r\n        // Save pathData for later\r\n        this.pathData = pathData;\r\n\r\n        this.sourceVertexUUID = null;\r\n        this.destVertexUUID = null;\r\n        this.updateAttachedVertices();\r\n\r\n        // Construct Path\r\n        this.rebuildPath();\r\n        \r\n        // Type\r\n\r\n        this.lineColour = ArrowProps.LineColour.BLACK;\r\n        this.lineType = ArrowProps.LineType.SOLID;\r\n\r\n        if (type === Tool.Edge || type === Tool.Specialisation || type === Tool.Visibility) {\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n        }else{\r\n            console.log(\"Failed to find correct tool\");\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n        }\r\n\r\n        if (type === Tool.Edge) {\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n            this.typeName = \"Arrow\";\r\n        }else if (type === Tool.Specialisation){\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.TRIANGLE\r\n            this.typeName = \"Specialisation\";\r\n        }else if (type === Tool.Visibility){\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            this.lineType = ArrowProps.LineType.DASHED\r\n            this.typeName = \"Visibility\";\r\n        }else{\r\n            console.log(\"Failed to find correct tool\");\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n        }\r\n\r\n        this.edgeType = type;\r\n\r\n        this.selected = false;\r\n\r\n        this.sourceIsNavigable = false;\r\n        this.destIsNavigable = false;\r\n        this.sourceIsAggregation = false;\r\n        this.destIsAggregation = false;\r\n\r\n        // Model key for rendering\r\n        this.arrowModelKey = canvasDraw.getCurrentModel();\r\n\r\n        // Render key for the arrow for placing in tree\r\n        this.arrowRenderKey = getModelRenderKey(this.arrowModelKey);\r\n    }\r\n\r\n    // Set the model key\r\n    setModelKey(key){\r\n        this.arrowModelKey = key;\r\n    }\r\n\r\n    getModelKey(){\r\n        return this.arrowModelKey;\r\n    }\r\n\r\n    // Set the render key. This is done in ContainmentTree.js\r\n    setRenderKey(key){\r\n        this.arrowRenderKey = key;\r\n    }\r\n\r\n    // Return the render key. This is called in CanvasDraw\r\n    getRenderKey(){\r\n        return this.arrowRenderKey;\r\n    }\r\n\r\n    toggleNavigable(side){\r\n        if(side === 0) {\r\n            this.sourceIsNavigable = !this.sourceIsNavigable;\r\n        }else if(side === 1){\r\n            this.destIsNavigable = !this.destIsNavigable;\r\n        }\r\n        if(this.sourceIsAggregation){\r\n            this.sourceIsNavigable = true;\r\n        }\r\n        if(this.destIsAggregation){\r\n            this.destIsNavigable = true;\r\n        }\r\n\r\n        if(this.sourceIsNavigable && this.destIsNavigable){\r\n            if(this.sourceIsAggregation){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }\r\n            else if(this.destIsAggregation){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n            }else{\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }\r\n        }else if(this.sourceIsNavigable){\r\n            if(this.sourceIsAggregation){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }else {\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }\r\n        }else if(this.destIsNavigable){\r\n            if(this.destIsAggregation){\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }else {\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }\r\n        }else{\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n        }\r\n\r\n    }\r\n\r\n    toggleAggregation(side){\r\n        if(side === 0){\r\n            this.sourceIsAggregation = !this.sourceIsAggregation;\r\n            if(this.destIsAggregation && this.sourceIsAggregation){\r\n                this.destIsAggregation = false;\r\n            }\r\n        }else{\r\n            this.destIsAggregation = !this.destIsAggregation;\r\n            if(this.destIsAggregation && this.sourceIsAggregation){\r\n                this.sourceIsAggregation = false;\r\n            }\r\n        }\r\n\r\n\r\n        if(this.sourceIsAggregation) {\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n            if(this.destIsNavigable){\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }else{\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n            }\r\n        }else if(this.destIsAggregation){\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n            if(this.sourceIsNavigable){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }else{\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n            }\r\n        }else{\r\n            // this updates the arrow heads so they are correct\r\n            this.toggleNavigable(100)\r\n        }\r\n    }\r\n\r\n    getNavigable(side){\r\n        if(side === 0){\r\n            return this.sourceIsNavigable;\r\n        }else{\r\n            return this.destIsNavigable;\r\n        }\r\n\r\n    }\r\n\r\n    getAggregation(side){\r\n        if(side === 0){\r\n            return this.sourceIsAggregation\r\n        }else{\r\n            return this.destIsAggregation\r\n        }\r\n\r\n    }\r\n\r\n    trimPath(){\r\n        this.pathData = [this.pathData[0], this.pathData[this.pathData.length-1]];\r\n        this.path = [this.path[0], this.path[this.path.length-1]];\r\n    }\r\n\r\n    // Rebuilds path from cached pathData\r\n    rebuildPath() {\r\n\r\n        let connectedObjectUUIDs = this.getObjectUUIDList();\r\n        let objects = [];\r\n\r\n        connectedObjectUUIDs.forEach((UUID) => {\r\n            objects.push(canvasDraw.getObjectFromUUID(UUID))\r\n        });\r\n\r\n        // X, Y data for path\r\n        this.path = [];\r\n\r\n        for (let i = 0; i < this.pathData.length; i++) {\r\n            // Check if its case 0 or 1\r\n            let pathItem = this.pathData[i];\r\n\r\n            //If the first element of a PathItem is 0, the second element contains the UUID of an object\r\n            if (pathItem[0] === 0) {\r\n                this.path.push(this.getZerothCasePathItem(objects, pathItem));\r\n            }\r\n            //If the first element is 1, the next two elements are the X and Y points, respectively\r\n            else if (pathItem[0] === 1) {\r\n                this.path.push([pathItem[1], pathItem[2]]);\r\n            } else {\r\n                console.error(\"Invalid PathData case, wrong case\", pathItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Gets pathItem from object (hopefully a vertex) based on UUID\r\n    // will come back to this to sort out arrows overlapping on creation\r\n    // for extra clarity pathItem[2] is where the arrow from/end is on the x axis of the vertex(0..1)\r\n    // and pathItem[3] is where the arrow is from/end is on the y axis of the vertex(0..1) - cooper\r\n    getZerothCasePathItem(objects, pathItem) {\r\n        for (let i = 0; i < objects.length; i++) {\r\n           // if(objects[0].semanticIdentity.UUID === objects[1].semanticIdentity.UUID){\r\n\r\n           // }\r\n            if (objects[i] !== null && objects[i] !== undefined) {\r\n                if (objects[i].semanticIdentity.UUID === pathItem[1]) {\r\n                    let x = pathItem[2]*objects[i].width + objects[i].x;\r\n                    let y = pathItem[3]*objects[i].realHeight + objects[i].y;\r\n                    return [x, y]\r\n                }\r\n            }\r\n        }\r\n\r\n        console.error(\"Could not find vertex to connect for pathItem\", pathItem);\r\n        return null;\r\n    }\r\n\r\n    getObjectUUIDList(){\r\n        let output = [];\r\n            this.pathData.forEach((item) => {\r\n                let index = this.pathData.indexOf(item);\r\n                if(item == null){\r\n                    this.pathData[index] = [1,this.path[index][0],this.path[index][1]]\r\n                }\r\n                if (this.pathData[index][0] === 0) {\r\n                    output.push(item[1])\r\n                }\r\n            });\r\n        return output\r\n    }\r\n\r\n    updateAttachedVertices() {\r\n        var pathStart = this.pathData[0];\r\n        var pathEnd = this.pathData[this.pathData.length - 1];\r\n\r\n        if (pathStart[0] === 0) {\r\n            this.sourceVertexUUID = pathStart[1];\r\n        } else {\r\n            this.sourceVertexUUID = null;\r\n        }\r\n\r\n        if (pathEnd[0] === 0) {\r\n            this.destVertexUUID = pathEnd[1];\r\n        } else {\r\n            this.destVertexUUID = null;\r\n        }\r\n    }\r\n\r\n    setSelected(selected) {\r\n        this.selected = selected;\r\n    }\r\n\r\n    updateSourceCardinality(lowerBound, upperBound, visibility) {\r\n        this.sourceEdgeEnd.updateCardinality(lowerBound, upperBound, visibility);\r\n    }\r\n\r\n    getSourceCardinalityVisibility() {\r\n        return this.sourceEdgeEnd.cardinality.isVisible;\r\n    }\r\n\r\n    toggleSourceCardinalityVisibility() {\r\n        this.sourceEdgeEnd.cardinality.toggleVisibility();\r\n    }\r\n\r\n    getSourceCardinalityLowerBound() {\r\n        return this.sourceEdgeEnd.cardinality.lowerBound;\r\n    }\r\n\r\n    getSourceCardinalityUpperBound() {\r\n        return this.sourceEdgeEnd.cardinality.upperBound;\r\n    }\r\n\r\n    updateDestCardinality(lowerBound, upperBound, visibility) {\r\n        this.destEdgeEnd.updateCardinality(lowerBound, upperBound, visibility);\r\n    }\r\n\r\n    getDestCardinalityVisibility() {\r\n        return this.destEdgeEnd.cardinality.isVisible;\r\n    }\r\n\r\n    toggleDestCardinalityVisibility() {\r\n        this.destEdgeEnd.cardinality.toggleVisibility();\r\n    }\r\n\r\n    getDestCardinalityLowerBound() {\r\n        return this.destEdgeEnd.cardinality.lowerBound;\r\n    }\r\n\r\n    getDestCardinalityUpperBound() {\r\n        return this.destEdgeEnd.cardinality.upperBound;\r\n    }\r\n\r\n    setStartLabel(label) {\r\n        this.sourceEdgeEnd.label = label;\r\n    }\r\n\r\n    setEndLabel(label) {\r\n        this.destEdgeEnd.label = label;\r\n    }\r\n\r\n    setLineColour(lineColour) {\r\n        let val = ArrowProps.StringNameToLineColour[lineColour];\r\n        if (val !== undefined) {\r\n            this.lineColour = val;\r\n        } else {\r\n            console.log(\"Attempted to assign invalid lineColour: %s\", lineColour);\r\n        }\r\n    }\r\n\r\n    setLineType(lineType) {\r\n        let val = ArrowProps.StringToLineType[lineType];\r\n        if (val !== undefined) {\r\n            this.lineType = val;\r\n        } else {\r\n            console.log(\"Attempted to assign invalid lineType: %s\", lineType);\r\n        }\r\n    }\r\n\r\n    // Creates nodes for an algorithmn to path find around a vertex\r\n    createPathNodesForVertex(vertex, nodeIndex, d) {\r\n        // Set ids\r\n        let topLeft     = nodeIndex++;\r\n        let top         = nodeIndex++;\r\n        let topRight    = nodeIndex++;\r\n        let right       = nodeIndex++;\r\n        let bottomRight = nodeIndex++;\r\n        let bottom      = nodeIndex++;\r\n        let bottomLeft  = nodeIndex++;\r\n        let left        = nodeIndex++;\r\n\r\n        // Create nodes for: fromVertex\r\n        let vertexNodes = [];\r\n        vertexNodes.push([topLeft,     vertex.x-d,              vertex.y+vertex.height+d, [left, top]]);               // Top    Left\r\n        vertexNodes.push([top,         vertex.x+vertex.width/2, vertex.y+vertex.height+d, [topLeft, topRight]]);       // Top\r\n        vertexNodes.push([topRight,    vertex.x+vertex.width+d, vertex.y+vertex.height+d, [top, right]]);              // Top    Right\r\n        vertexNodes.push([right,       vertex.x+vertex.width+d, vertex.y+vertex.height/2, [topRight, bottomRight]]);   //        Right\r\n        vertexNodes.push([bottomRight, vertex.x+vertex.width+d, vertex.y-d,               [right, bottom]]);           // Bottom Right\r\n        vertexNodes.push([bottom,      vertex.x+vertex.width/2, vertex.y-d,               [bottomRight, bottomLeft]]); // Bottom\r\n        vertexNodes.push([bottomLeft,  vertex.x-d,              vertex.y-d,               [bottomRight, left]]);       // Bottom Left\r\n        vertexNodes.push([left,        vertex.x-d,              vertex.y+vertex.height/2, [bottomLeft, topLeft]]);     //        Left\r\n        return [nodeIndex, vertexNodes];\r\n    }\r\n\r\n    drawStartHead(canvasContext) {\r\n        let lineAngle = Math.atan2(this.getSY() - this.getNSY(), this.getSX() - this.getNSX());\r\n        this.sourceEdgeEnd.draw(canvasContext, this.getSX(), this.getSY(), lineAngle, this.lineColour);\r\n    }\r\n\r\n    drawEndHead(canvasContext) {\r\n        let lineAngle = Math.atan2(this.getEY() - this.getNEY(), this.getEX() - this.getNEX());\r\n        this.destEdgeEnd.draw(canvasContext, this.getEX(), this.getEY(), lineAngle, this.lineColour);\r\n    }\r\n\r\n    isPathSegmentLR(startIndex,endIndex){\r\n        let indexSx = this.path[startIndex][0];\r\n        let indexEx = this.path[endIndex][0];\r\n        let indexSy = this.path[startIndex][1];\r\n        let indexEy = this.path[endIndex][1];\r\n\r\n        return Math.abs(indexSx-indexEx) > Math.abs(indexSy-indexEy)\r\n    }\r\n\r\n    getTextOffsets(canvasContext, sourceText, destText, sourceCtext, destCtext) {\r\n        let sourceTextWidth = canvasContext.measureText(sourceText).width;\r\n        let destTextWidth = canvasContext.measureText(destText).width;\r\n        let sourceCtextWidth = canvasContext.measureText(sourceCtext).width;\r\n        let destCtextWidth = canvasContext.measureText(destCtext).width;\r\n        let textHeight = 15;\r\n        // 'M' is the widest possible character\r\n        let charWidth = canvasContext.measureText(\"M\").width;\r\n\r\n        let sxOffset;\r\n        let syOffset;\r\n        let exOffset;\r\n        let eyOffset;\r\n\r\n        let sxOffsetc;\r\n        let syOffsetc;\r\n        let exOffsetc;\r\n        let eyOffsetc;\r\n\r\n        let sxFlip = true;\r\n        let syFlip = true;\r\n        let exFlip = true;\r\n        let eyFlip = true;\r\n\r\n        // true if arrow is landscape, false if arrow is portrait;\r\n        let E1index = this.path.length-2;\r\n        let E2index = this.path.length-1;\r\n\r\n        let startLRArrow = this.isPathSegmentLR(0,1);\r\n        let endLRArrow = this.isPathSegmentLR(E1index,E2index);\r\n\r\n        let SSX = this.path[0][0];\r\n        let SSY = this.path[0][1];\r\n        let SEX = this.path[1][0];\r\n        let SEY = this.path[1][1];\r\n\r\n        let ESX = this.path[E1index][0];\r\n        let ESY = this.path[E1index][1];\r\n        let EEX = this.path[E2index][0];\r\n        let EEY = this.path[E2index][1];\r\n\r\n        if (startLRArrow) {\r\n            if (SSX > SEX) {\r\n                sxFlip = !sxFlip;\r\n            }\r\n        } else {\r\n            if (SSY > SEY) {\r\n                syFlip = !syFlip;\r\n            }\r\n        }\r\n\r\n        if (endLRArrow) {\r\n            if (ESX > EEX) {\r\n                exFlip = !exFlip;\r\n            }\r\n        } else {\r\n            if (ESY > EEY) {\r\n                eyFlip = !eyFlip;\r\n            }\r\n        }\r\n\r\n\r\n        if (sxFlip) {\r\n            sxOffset = charWidth/2;\r\n            if (startLRArrow) {\r\n                sxOffsetc = charWidth/2;\r\n            } else {\r\n                sxOffsetc = -1*(sourceCtextWidth+charWidth/2)\r\n            }\r\n        } else {\r\n            sxOffset = -1*(sourceTextWidth+charWidth/2);\r\n            if (startLRArrow) {\r\n                sxOffsetc = -1*(sourceCtextWidth+charWidth/2)\r\n            } else {\r\n                sxOffsetc = charWidth/2;\r\n            }\r\n        }\r\n        \r\n\r\n        if (syFlip) {\r\n            syOffset = textHeight;\r\n            if (startLRArrow) {\r\n                syOffsetc = -1*(textHeight/2)\r\n            } else {\r\n                syOffsetc = syOffset;\r\n            }\r\n        } else {\r\n            syOffset = -1*(textHeight/2);\r\n            if (startLRArrow) {\r\n                syOffsetc = syOffset;\r\n            } else {\r\n                syOffsetc = -1*(textHeight/2)\r\n            }\r\n        }\r\n\r\n\r\n        //if true arrow moves more in x than in y\r\n        exFlip = !exFlip;\r\n        eyFlip = !eyFlip;\r\n\r\n        if (exFlip) {\r\n            exOffset = charWidth/2;\r\n            if (endLRArrow) {\r\n                exOffsetc = charWidth/2;\r\n            } else {\r\n                exOffsetc = -1*(destCtextWidth+charWidth/2)\r\n            }\r\n        } else {\r\n            exOffset = -1*(destTextWidth+charWidth/2);\r\n            if (endLRArrow) {\r\n                exOffsetc = -1*(destCtextWidth+charWidth/2)\r\n            } else {\r\n                exOffsetc = charWidth/2;\r\n            }\r\n        }\r\n\r\n\r\n        if (eyFlip) {\r\n            eyOffset = textHeight;\r\n            if (endLRArrow) {\r\n                eyOffsetc = -1*(textHeight/2);\r\n            } else {\r\n                eyOffsetc = eyOffset;\r\n            }\r\n        } else {\r\n            eyOffset = -1*(textHeight/2);\r\n            if (endLRArrow) {\r\n                eyOffsetc = textHeight;\r\n            } else {\r\n                eyOffsetc = eyOffset;\r\n            }\r\n        }\r\n\r\n\r\n        return [sxOffset,syOffset,exOffset,eyOffset,sxOffsetc,syOffsetc,exOffsetc,eyOffsetc]\r\n    }\r\n\r\n\r\n\r\n    drawLabelsAndCardinalities(canvasContext) {\r\n        let sourceCardText = this.sourceEdgeEnd.cardinality.toString();\r\n        let destCardText = this.destEdgeEnd.cardinality.toString();\r\n        let Offsets = this.getTextOffsets(canvasContext,this.sourceEdgeEnd.label,this.destEdgeEnd.label,sourceCardText,destCardText);\r\n\r\n        canvasContext.fillStyle = \"#000\";\r\n\r\n        //draw source text\r\n        canvasContext.fillText(this.sourceEdgeEnd.label, this.getSX() + Offsets[0], this.getSY() + Offsets[1]);\r\n\r\n        //draw destination text\r\n        canvasContext.fillText(this.destEdgeEnd.label, this.getEX() + Offsets[2], this.getEY() + Offsets[3]);\r\n\r\n        //draw source cardinality\r\n        if (this.getSourceCardinalityVisibility()) {\r\n            canvasContext.fillText(sourceCardText, this.getSX() + Offsets[4], this.getSY() + Offsets[5]);\r\n        }\r\n\r\n        //draw destination cardinality\r\n        if (this.getDestCardinalityVisibility()) {\r\n            canvasContext.fillText(destCardText, this.getEX() + Offsets[6], this.getEY() + Offsets[7]);\r\n        }\r\n    }\r\n\r\n    draw(canvasContext) {\r\n        let dashLength = 5;\r\n\r\n        switch (this.lineType) {\r\n            case ArrowProps.LineType.SOLID:\r\n                canvasContext.setLineDash([]);\r\n                break;\r\n            case ArrowProps.LineType.DASHED:\r\n                canvasContext.setLineDash([dashLength, dashLength]);\r\n                break;\r\n            default:\r\n                console.log(\"Arrow had invalid lineType: %s\", this.lineType);\r\n        }\r\n\r\n        // Draw\r\n        canvasContext.strokeStyle = this.lineColour;\r\n\r\n        // Draw Lines\r\n        for (let i = 0; i < this.path.length-1; i++) {\r\n            let from = this.path[i];\r\n            let to = this.path[i+1];\r\n\r\n            canvasContext.beginPath();\r\n            canvasContext.moveTo(from[0], from[1]);\r\n            canvasContext.lineTo(to[0], to[1]);\r\n            canvasContext.stroke();\r\n        }\r\n\r\n        canvasContext.strokeStyle = \"#000\";\r\n        canvasContext.setLineDash([]);\r\n\r\n        this.drawStartHead(canvasContext);\r\n        this.drawEndHead(canvasContext);\r\n        //store which labels were flipped and in which direction (x/y)\r\n        this.drawLabelsAndCardinalities(canvasContext);\r\n\r\n        if (this.selected) {\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                let pos = this.path[i];\r\n                drawMarker(pos[0], pos[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    intersects(cx, cy) {\r\n        for (let i = 0; i < this.path.length-1; i++) {\r\n            let from = this.path[i];\r\n            let to = this.path[i+1];\r\n\r\n            if (this.intersectsSegment(cx, cy, from, to)) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Checks if it intersects with one of the line segments\r\n    intersectsSegment(cx, cy, from, to) {\r\n        let m = getDistance(cx, cy, from[0], from[1]);\r\n        let n = getDistance(cx, cy, to[0], to[1]);\r\n        let l = getDistance(from[0], from[1], to[0], to[1]);\r\n\r\n        let threshold = 1;\r\n\r\n        return (m+n-threshold < l);\r\n    }\r\n\r\n    // Get first x/y\r\n    getSX() {\r\n        return this.path[0][0];\r\n    }\r\n    getSY() {\r\n        return this.path[0][1];\r\n    }\r\n\r\n    // Get second x/y\r\n    getNSX() {\r\n        return this.path[1][0];\r\n    }\r\n    getNSY() {\r\n        return this.path[1][1];\r\n    }\r\n\r\n    // Get second last x/y\r\n    getNEX() {\r\n        let index = this.path.length-2;\r\n        if (index < 0) index = 0;\r\n        return this.path[index][0];\r\n    }\r\n    getNEY() {\r\n        let index = this.path.length-2;\r\n        if (index < 0) index = 0;\r\n        return this.path[index][1];\r\n    }\r\n\r\n    // Get last x/y\r\n    getEX() {\r\n        return this.path[this.path.length-1][0];\r\n    }\r\n    getEY() {\r\n        return this.path[this.path.length-1][1];\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { CollectionsBookmarkOutlined, ContactSupportOutlined } from \"@material-ui/icons\";\r\nimport { currentObjects, getModelName, createVertex } from \"../UIElements/CanvasDraw\";\r\nimport {SemanticIdentity} from \"./SemanticIdentity\";\r\n\r\n\r\n\r\nexport class VertexNode {\r\n    constructor(vertex) {\r\n        this.vertex = vertex;\r\n        this.children = new Set();\r\n        this.typeName = \"VertexNode\";\r\n\r\n        //The path of this particular vertex node for displaying on the tree view element\r\n        this.cleanObjectPath = (getModelName(),\"/\",\"Vertices\")\r\n        this.vertexObjectPath = (getModelName(),\"/\",\"Vertices\")\r\n    }\r\n\r\n    add(node) {\r\n        this.children.add(node);\r\n    }\r\n\r\n    remove(traversedVertices, node) {\r\n        //onsole.log(\"remove is called\")\r\n        let isRemoved = false;\r\n        traversedVertices.add(this);\r\n\r\n        //Remove from the current vertex\r\n        isRemoved = this.children.has(node);\r\n        this.children.delete(node);\r\n\r\n        //Continue to remove from anywhere deeper in the tree\r\n        for (let child of this.children) {\r\n            if (!traversedVertices.has(child)) {\r\n                traversedVertices.add(child);\r\n                isRemoved = child.remove(traversedVertices, node);\r\n            }\r\n        }\r\n\r\n        return isRemoved;\r\n    }\r\n\r\n    getVertexNode(traversedVertices, vertex, recursive = true) {\r\n        for (let child of this.children) {\r\n            if (!traversedVertices.has(child)) {\r\n                traversedVertices.add(child);\r\n\r\n                if (child.vertex.semanticIdentity.UUID === vertex.semanticIdentity.UUID) {\r\n                    return child;\r\n                } else if (recursive) {\r\n                    let node = child.getVertexNode(traversedVertices, vertex);\r\n                    if (node !== null) {\r\n                        return node;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    //Remove from just the children of this object, without removing from deeper in the tree\r\n    removeFromChildren(node) {\r\n        if (this.children.has(node)) {\r\n            this.children.delete(node);\r\n            return true;\r\n\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    flatten(traversedVertices) {\r\n        var flattenedArray = [];\r\n\r\n        for (let childNode of this.children) {\r\n            if (!traversedVertices.has(childNode)) {\r\n                traversedVertices.add(childNode);\r\n                flattenedArray.push(childNode.vertex);\r\n\r\n                if (childNode !== null) {\r\n                    flattenedArray.push(...childNode.flatten(traversedVertices));\r\n                }\r\n            }\r\n        }\r\n\r\n        return flattenedArray;\r\n    }\r\n\r\n    flattenVertexNodes(traversedVertices) {\r\n        var flattenedArray = [];\r\n\r\n        for (let childNode of this.children) {\r\n            if (!traversedVertices.has(childNode)) {\r\n                traversedVertices.add(childNode);\r\n                flattenedArray.push(childNode);\r\n\r\n                if (childNode !== null) {\r\n                    flattenedArray.push(...childNode.flattenVertexNodes(traversedVertices));\r\n                }\r\n            }\r\n        }\r\n\r\n        return flattenedArray;\r\n    }\r\n\r\n    has(traversedVertices, node) {\r\n        //Search for object in children\r\n        if (this.children.has(node)) {\r\n            return true;\r\n\r\n        } else {\r\n\r\n            //Search for object in children of children\r\n            for (let child of this.children) {\r\n                if (!traversedVertices.has(child)) {\r\n                    traversedVertices.add(child);\r\n                    if (child.has(traversedVertices, node)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    toTreeViewElement(returnOption, parsedRenderKey) { //added the model key parameter to we can specifiy what models vertexes belong to\r\n        //console.log(\"toTreeViewElement called successfully\")\r\n        //Pretty much everything that's currently on the canvas is searched and then converted into the tree appropriate struct in the below if else statements.\r\n        //Then, the vertices and arrows folder nodes can display their appropriate children.\r\n        let ArrowChildren = [];\r\n        let VertexChildren = [];\r\n    \r\n\r\n        //These are no longer needed due to rework of assigning model children - Lachlan\r\n        /*\r\n        let verticies = []; // need to store the 'verticies folder' in an array for it to be iterable in a for loop - cooper\r\n        let arrows = []; // same issue as vertices not being iterable - Lachlan\r\n        */\r\n        \r\n\r\n\r\n        //Check which folder we're sticking these things into\r\n        if (returnOption === \"Vertex Folder\"){                  // they had a different spelling for vertex folder :DDDDD - cooper\r\n            //All objects currently on the canvas (excluding things like folders which only exist as tree view elements)\r\n            for(let i = 0; i < currentObjects.flatten().length; i++){\r\n                \r\n\r\n                //We onlt want the vertices in this folder\r\n                if (currentObjects.flatten()[i].typeName === \"Vertex\" && currentObjects.flatten()[i].getRenderKey() === parsedRenderKey){\r\n                    //Set the append the name of the path to include the vertex name\r\n                    if(currentObjects.flatten()[i].title === \"\"){\r\n                        this.setVertexTreePath(\"Unnamed Vertex\");\r\n                    }\r\n\r\n                    else{\r\n                        this.setVertexTreePath(currentObjects.flatten()[i].title);\r\n                    }\r\n                \r\n                \r\n\r\n\r\n                    //Create the appropriate struct for a tree view element from the vertex data\r\n                    let tempTreeObj = {\r\n                        text: currentObjects.flatten()[i].title,\r\n                        children: [],\r\n                        data: currentObjects.flatten()[i],\r\n                        renderkey: currentObjects.flatten()[i].getRenderKey(),\r\n                        modelkey: currentObjects.flatten()[i].getModelKey(),\r\n                        state: {opened: false}\r\n                    };\r\n\r\n                    //So you don't have vertices that are completely blank in the tree, looks kinda weird\r\n                    if (tempTreeObj.text === \"\"){\r\n                        tempTreeObj.text = \"Unnamed Vertex\";\r\n                    }\r\n                    \r\n                    //Finally, push to children. Makes it look like the following:\r\n                    //\r\n                    //  Vertex --+\r\n                    //           |\r\n                    //           +-- Unnamed Vertex   \r\n                    \r\n                    VertexChildren.push(tempTreeObj);\r\n\r\n                \r\n            }\r\n        }\r\n\r\n            return{\r\n                text: \"Vertices &#128193\",\r\n                children: VertexChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Vertex Folder\"\r\n            }\r\n        }\r\n\r\n        //No longer necessary due to the rework of assigning model children - Lachlan\r\n            /*\r\n            let verticiesObject = { // push the vertex folder into an array of vertex folders - cooper\r\n                text: \"Vertices\",\r\n                children: VertexChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Vertex Folder\"\r\n            }\r\n            verticies.push(verticiesObject)\r\n            //vertices folder\r\n            return verticies\r\n                \r\n            \r\n        }\r\n        */\r\n\r\n        //same typo as above if statement but for arrows\r\n        else if (returnOption === \"Arrow Folder\"){ //same thing but arrows folder - Lachlan\r\n            for(let i = 0; i < currentObjects.flatten().length; i++){\r\n\r\n                if (currentObjects.flatten()[i].typeName !== \"Vertex\" && currentObjects.flatten()[i].getRenderKey() === parsedRenderKey){\r\n                    //console.log(\"arrow key\")\r\n                    //console.log(currentObjects.flatten()[i].getModelKey())\r\n\r\n                        // Find the source and destination vertex as Keith defined in spec\r\n                        let ourSourceEnd = currentObjects.flatten()[i].pathData[1][1]\r\n                        let ourDestEnd = currentObjects.flatten()[i].pathData[0][1]\r\n\r\n                        let textSource = \"N/A\"\r\n                        let textDest = \"N/A\"\r\n                        let finalString = \"N/A\"\r\n\r\n                        // Looking through all of the current objects and matching the uuids\r\n                        for (let j = 0; j <currentObjects.flatten().length; j++){\r\n                        \r\n                            let someObject = currentObjects.flatten()[j]\r\n                            \r\n                            if (someObject.typeName === \"Vertex\"){\r\n                            \r\n                                if (ourSourceEnd === someObject.semanticIdentity.UUID){\r\n                                    \r\n                                    textDest = someObject.title\r\n                                }\r\n\r\n                                else if (ourDestEnd === someObject.semanticIdentity.UUID){\r\n                                    \r\n                                    textSource = someObject.title\r\n                                }\r\n                            }\r\n                            \r\n                        }\r\n\r\n                        //this array stores whether source/destination is Navigable/Aggregation so we can display the required icons in the tree\r\n                        //array is ordered source nav, dest nav, source agg, dest agg \r\n                        //if adding more properties, such ass a dotted arrow, just increase array size and adjust the if statements for constructing icon\r\n                        let treeAppearanceSwitches = [false,false,false,false]\r\n                        treeAppearanceSwitches[0] = currentObjects.flatten()[i].getNavigable(0)\r\n                        treeAppearanceSwitches[1] = currentObjects.flatten()[i].getNavigable(1)\r\n                        treeAppearanceSwitches[2] = currentObjects.flatten()[i].getAggregation(0)\r\n                        treeAppearanceSwitches[3] = currentObjects.flatten()[i].getAggregation(1)\r\n                        \r\n                        //unicode icon of the arrow properties/relations we want to display\r\n                        let arrowIcon = \"\";\r\n\r\n                        if(treeAppearanceSwitches[2] === true){\r\n                            arrowIcon = \"&#9670\"\r\n                            }\r\n                        else if(treeAppearanceSwitches[0] === true){\r\n                            arrowIcon = \"&#10229\"\r\n                        }\r\n\r\n                        arrowIcon += \"&#8213\"\r\n\r\n                        if(treeAppearanceSwitches[3] === true){\r\n                            arrowIcon += \"&#9670\"\r\n                            }\r\n                        else if(treeAppearanceSwitches[1] === true){\r\n                            arrowIcon += \"&#10230\"\r\n                        }\r\n\r\n                        finalString = textSource + \" \" + arrowIcon + \" \" + textDest\r\n\r\n                        let tempTreeObj = {\r\n                            text: currentObjects.flatten()[i].typeName + \" - \" + finalString,\r\n                            children: [],\r\n                            data: currentObjects.flatten()[i],\r\n                            renderkey: currentObjects.flatten()[i].getRenderKey(),\r\n                            modelkey: currentObjects.flatten()[i].getModelKey(),\r\n                            state: {opened: false}\r\n                        };\r\n\r\n                        ArrowChildren.push(tempTreeObj);\r\n                    \r\n                    \r\n                }\r\n\r\n            }\r\n\r\n            //console.log(ArrowChildren.length)\r\n\r\n            if(ArrowChildren.length === 0){\r\n                return;\r\n            }\r\n            else{\r\n            return {\r\n                text: \"Relations ⭲\",\r\n                children: ArrowChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Arrow Folder\"\r\n            }\r\n        }\r\n            \r\n        }\r\n    \r\n\r\n        //No longer necessary due to the rework of assigning model children - Lachlan\r\n            /*\r\n            let arrowsObject = { //create the arrows folder as an object to push to the arrows array - Lachlan\r\n                text: \"Arrows\",\r\n                children: ArrowChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Arrow Folder\"\r\n            }\r\n\r\n            arrows.push(arrowsObject)\r\n            //vertices folder\r\n            return arrows\r\n        }\r\n            */\r\n            \r\n        \r\n        //This down here is for vertex heirarchy stuff, not really needed anymore.\r\n        /*\r\n        if (!traversed) {\r\n            traversedVertices.add(this);\r\n            \r\n            for (let child of this.children) {\r\n                //children.push(child.toTreeViewElement(traversedVertices));\r\n            }\r\n            \r\n        }\r\n\r\n        let text = this.vertex.title;\r\n\r\n        if (text === null || text === \"\") {\r\n            text = \"Unnamed Vertex\";\r\n        }\r\n\r\n        return {\r\n            text: text,\r\n            children: children,\r\n            data: this.vertex,\r\n            state: { opened: true }\r\n        };\r\n        */\r\n    }\r\n    \r\n    setTreeViewElement(folderTitle){ //For when you want to make a folder type of element\r\n        let fakeChildren = [];\r\n        return{\r\n            text: folderTitle,\r\n            children: fakeChildren,\r\n            state: {opened: true}\r\n        };\r\n    }\r\n\r\n    //this function sets the path of a particular vertex node so that you can \r\n    //1. Display that item's path in the actual vertex (if you want)\r\n    //2. Show a tree view that only contains the path to a desired vertex \r\n    setVertexTreePath(treePath){\r\n        this.vertexObjectPath = this.cleanObjectPath + \"/\" + treePath;\r\n    }\r\n\r\n    //Return the vertice's object path\r\n    returnVertexTreePath(){\r\n        return this.vertexObjectPath;\r\n    }\r\n\r\n}\r\n\r\nclass ArrowEdge {\r\n    constructor(flattenedVertexNodes, arrow) {\r\n        this.arrow = arrow;\r\n        this.updateVertices(flattenedVertexNodes);\r\n    }\r\n\r\n    updateVertices(flattenedVertexNodes) {\r\n        this.sourceVertexNodeObject = null;\r\n        this.destVertexNodeObject = null;\r\n\r\n        if (this.arrow !== null) {\r\n            let isSourceFound = this.arrow.sourceVertexUUID === null;\r\n            let isDestFound = this.arrow.destVertexUUID === null;\r\n\r\n            for (let vertexNode of flattenedVertexNodes) {\r\n                if (isSourceFound && isDestFound) {\r\n                    break;\r\n                }\r\n\r\n                if (vertexNode !== null) {\r\n                    if (vertexNode.vertex.semanticIdentity.UUID === this.arrow.sourceVertexUUID) {\r\n                        this.sourceVertexNodeObject = vertexNode;\r\n                        isSourceFound = true;\r\n\r\n                    } else if (vertexNode.vertex.semanticIdentity.UUID === this.arrow.destVertexUUID) {\r\n                        this.destVertexNodeObject = vertexNode;\r\n                        isDestFound = true;\r\n                    }\r\n                }\r\n            }\r\n        \r\n        }\r\n    }\r\n\r\n    set sourceVertexNode(vertexNode) {\r\n        this.sourceVertexNodeObject = vertexNode;\r\n\r\n        if (vertexNode !== null) {\r\n            this.arrow.sourceVertexUUID = vertexNode.vertex.semanticIdentity.UUID;\r\n        } else {\r\n            this.arrow.sourceVertexUUID = null;\r\n        }\r\n    }\r\n\r\n    get sourceVertexNode() {\r\n        return this.sourceVertexNodeObject;\r\n    }\r\n\r\n    get sourceVertex() {\r\n        if (this.sourceVertexNodeObject !== null) {\r\n            return this.sourceVertexNodeObject.vertex;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    set destVertexNode(vertexNode) {\r\n        this.destVertexNodeObject = vertexNode;\r\n\r\n        if (vertexNode !== null) {\r\n            this.arrow.destVertexUUID = vertexNode.vertex.semanticIdentity.UUID;\r\n        } else {\r\n            this.arrow.destVertexUUID = null;\r\n        }\r\n    }\r\n\r\n    get destVertexNode() {\r\n        return this.destVertexNodeObject;\r\n    }\r\n\r\n    get destVertex() {\r\n        if (this.destVertexNodeObject !== null) {\r\n            return this.destVertexNodeObject.vertex;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n//Supply with an array/set of Vertex objects or Arrow objects (NOT ArrowEdge objects)\r\nexport class Graph {\r\n    constructor(vertexArrayFlattened, arrowArrayFlattened) {\r\n        this.rootVertices = new Set();\r\n        if (vertexArrayFlattened !== undefined) {\r\n            this.add(vertexArrayFlattened);\r\n        }\r\n\r\n        this.arrows = new Set();\r\n        if (arrowArrayFlattened !== undefined) {\r\n            this.add(arrowArrayFlattened);\r\n        }\r\n    }\r\n\r\n    add(objects) {\r\n        if (!Array.isArray(objects)) {\r\n            objects = [objects];\r\n        }\r\n\r\n        for (let object of objects) {\r\n            switch (object.typeName) {\r\n                case \"Vertex\":\r\n                    //console.log(\"add vert trigs\")\r\n                    this.addVertex(object);               \r\n                    break;\r\n                case \"Arrow\":\r\n                    this.addArrow(object);\r\n                    break;\r\n                case \"VertexNode\":\r\n                    this.rootVertices.add(object);\r\n                    break;\r\n                case \"ArrowEdge\":\r\n                    this.arrows.add(object);\r\n                    break;\r\n                default:\r\n                    //console.error(\"Attempted to add object to unknown type %s to Graph\", object.typeName)\r\n                    //console.log(object)\r\n                    //console.log(object.constructor)\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addVertex(vertex) {\r\n        if (this.getVertexNode(vertex) === null) { // if its the original vertex\r\n            vertex.originalUUID = vertex.semanticIdentity.UUID; \r\n            vertex = new VertexNode(vertex);\r\n            this.rootVertices.add(vertex);\r\n        } else { // else its a copy of the original\r\n            //console.log(\"a copy vertex was attempted\")\r\n            \r\n            let newTitle = \":: \" + vertex.title\r\n            vertex.title = newTitle\r\n            vertex.originalVertex = false;\r\n            /* For now im going to give the copies their own unique semantic UUID, as a lot of stuff in the program hinges off of vertex items\r\n            having their own unique sID. as a work around i've created a value in the vertex object to store the sID of the original vertex so that\r\n            any functions that require the original UUID of the original vertex can still be used. - cooper*/\r\n            vertex.originalUUID = vertex.semanticIdentity.UUID; \r\n            let sID = new SemanticIdentity(vertex.title,\"\",\"\",\"\", undefined ,[]) \r\n            vertex.semanticIdentity = sID;\r\n            vertex = new VertexNode(vertex);\r\n\r\n           \r\n            this.rootVertices.add(vertex);\r\n            console.log(vertex)\r\n        }\r\n    }\r\n\r\n    //NOTE: Graph direction is inverted, flowing from the dest to source of arrows\r\n    //This is intentional behaviour of the modelling spec\r\n    addArrow(arrow) {\r\n        if (this.getArrowEdge(arrow) === null) {\r\n            arrow = new ArrowEdge(this.flattenVertexNodes(), arrow);\r\n            this.arrows.add(arrow);\r\n\r\n            if (arrow.destVertexNode !== null && arrow.sourceVertexNode !== null) {\r\n                arrow.destVertexNode.add(arrow.sourceVertexNode);\r\n\r\n                //If the destination of the arrow is currently a root vertex,\r\n                //search for if the destination has any other possible roots,\r\n                //and remove from the root ONLY IF another root is found\r\n                //This retains an entry point for the graph even if there is a cycle back to root\r\n                if (this.rootVertices.has(arrow.sourceVertexNode)) {\r\n                    let isAnotherRoot = false;\r\n\r\n                    for (let vertexNode of this.rootVertices) {\r\n                        if (vertexNode.vertex.semanticIdentity.UUID === arrow.sourceVertex.semanticIdentity.UUID) {\r\n                            continue;\r\n                        }\r\n\r\n                        if (vertexNode.has(new Set(), arrow.sourceVertexNode)) {\r\n                            isAnotherRoot = true;\r\n                        }\r\n                    }\r\n\r\n                    if (isAnotherRoot) {\r\n                        this.rootVertices.delete(arrow.sourceVertexNode);\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n            console.error(\"Attempted to add duplicate arrow\");\r\n        }\r\n    }\r\n\r\n    //A way of returning the arrow UUID's associated with the deleted vertex. For some reason the source and ending\r\n    //UUID data isn't being saved properly upstream, so this is a way around that.\r\n    ArrowUUIDSource(object){\r\n        object = this.getVertexNode(object);\r\n        //first index is source, second is destination\r\n        let returnArray = [];\r\n\r\n        //Match an arrow\r\n        let i = 0;\r\n        for (let arrow of this.arrows) {\r\n            if (arrow.sourceVertexNode !== null && arrow.sourceVertex.semanticIdentity.UUID === object.vertex.semanticIdentity.UUID) {\r\n                returnArray[i] = arrow;\r\n                i += 1;\r\n            }\r\n        }\r\n\r\n        return returnArray;\r\n    }\r\n\r\n    ArrowUUIDDest(object){\r\n        object = this.getVertexNode(object);\r\n        //first index is source, second is destination\r\n        let returnArray = [];\r\n\r\n        //Match an arrow\r\n        let i = 0;\r\n        for (let arrow of this.arrows) {\r\n            if (arrow.destVertexNode !== null && arrow.destVertex.semanticIdentity.UUID === object.vertex.semanticIdentity.UUID) {\r\n                returnArray[i] = arrow;\r\n                i += 1;\r\n            }\r\n        }\r\n\r\n        return returnArray;\r\n    }\r\n\r\n    //Removes and object while shifting it's children's position in the tree\r\n    remove(object) {\r\n        console.log(\"remove 2 is called\")\r\n        //By this point rootVertices doesnt actually contain the vertex we want to delete which makes the isRemoved Logic hard to follow as has returns true when the item is present- Lachlan\r\n        console.log(this.rootVertices)\r\n        if (object.typeName === \"Vertex\") {\r\n            let newobject = this.getVertexNode(object);\r\n            let isRemoved = this.rootVertices.has(newobject);\r\n            console.log(isRemoved)\r\n\r\n\r\n            //Remove from the root\r\n            this.rootVertices.delete(newobject);\r\n            for (let child of newobject.children) {\r\n                this.rootVertices.add(child);\r\n            }\r\n            //console.log(\"It removes from the root fine\")\r\n\r\n            \r\n            //Remove from anywhere deeper in the tree\r\n            let traversedVertices = new Set();\r\n            for (let vertexNode of this.rootVertices) {\r\n                if (!traversedVertices.has(vertexNode)) {\r\n                    traversedVertices.add(vertexNode);\r\n                    vertexNode.remove(traversedVertices, newobject);\r\n                    console.log(isRemoved)\r\n                }\r\n            }\r\n            \r\n            if (isRemoved) {\r\n                //Remove the vertex from being the source or dest of any arrow\r\n                for (let arrow of this.arrows) {\r\n                    if (arrow.sourceVertexNode !== null && arrow.sourceVertex.semanticIdentity.UUID === newobject.vertex.semanticIdentity.UUID) {\r\n                        arrow.sourceVertexNode = null;\r\n                    }\r\n                    \r\n                    if (arrow.destVertexNode !== null && arrow.destVertex.semanticIdentity.UUID === newobject.vertex.semanticIdentity.UUID) {\r\n                        arrow.destVertexNode = null;\r\n                    }\r\n                }\r\n            }\r\n            \r\n\r\n            return isRemoved;\r\n\r\n        } else if (object.typeName === \"Arrow\") {\r\n            let newobject = this.getArrowEdge(object);\r\n\r\n            if (newobject !== null) {\r\n                this.arrows.delete(newobject);\r\n                //IF arrow has a sourceVertex AND destVertex\r\n                if (newobject.sourceVertexNode !== null && newobject.destVertexNode !== null) {\r\n                    //IF there is no other arrow from sourceVertex to destVertex, remove the sourceVertex from the children of destVertex\r\n                    //AND move the sourceVertex to root, if there is no other arrow with the same sourceVertex\r\n                    let isEquivalentArrow = false;\r\n                    let isArrowWithSameSource = false;\r\n                    \r\n                    for (let arrow of this.arrows) {\r\n                        let isEquivalentSource = arrow.sourceVertexNode !== null && arrow.sourceVertex.semanticIdentity.UUID === newobject.sourceVertex.semanticIdentity.UUID;\r\n                        let isEquivalentDest = arrow.destVertexNode !== null && arrow.destVertex.semanticIdentity.UUID === newobject.destVertex.semanticIdentity.UUID;\r\n                        \r\n                        if (isEquivalentSource && isEquivalentDest) {\r\n                            isEquivalentArrow = true;\r\n                        }\r\n                        if (isEquivalentSource && arrow.destVertexNode !== null) {\r\n                            isArrowWithSameSource = true;\r\n                        }\r\n                    }\r\n                    \r\n                    if (!isEquivalentArrow) {\r\n                        newobject.destVertexNode.removeFromChildren(newobject.sourceVertexNode);\r\n                    }\r\n                    if (!isArrowWithSameSource) {\r\n                        this.add(newobject.sourceVertexNode);\r\n                    }\r\n\r\n                    //Remove vertex from the root if removing this arrow has resolved a cycle\r\n                    if (newobject.sourceVertexNode.has(new Set(), newobject.destVertexNode)) {\r\n                        this.rootVertices.delete(newobject.destVertexNode);\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n        } else {\r\n            if (object !== null) {\r\n                console.error(\"Attempted to remove object of invalid type %s to Graph\", object.typeName);\r\n            } else {\r\n                console.error(\"Attempted to remove null from Graph\");\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    has(object) {\r\n        //Search for object in root vertices\r\n        if (this.rootVertices.has(object)) {\r\n            return true;\r\n\r\n        } else {\r\n            let traversedVertices = new Set();\r\n\r\n            //Search for object in children of root vertices\r\n            for (let vertex of this.rootVertices) {\r\n                if (!traversedVertices.has(vertex)) {\r\n                    traversedVertices.add(vertex);\r\n                    if (vertex.has(traversedVertices, object)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getVertexNode(vertex) {\r\n        let traversedVertices = new Set();\r\n\r\n        for (let rootNode of this.rootVertices) {\r\n            if (!traversedVertices.has(rootNode)) {\r\n                traversedVertices.add(rootNode);\r\n                if (rootNode.vertex.semanticIdentity.UUID === vertex.semanticIdentity.UUID) {\r\n                    return rootNode;\r\n                } else {\r\n                    let node = rootNode.getVertexNode(traversedVertices, vertex);\r\n                    if (node !== null) {\r\n                        return node;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getArrowEdge(arrow) {\r\n        for (let arrowEdge of this.arrows) {\r\n            if (arrowEdge.arrow.semanticIdentity.UUID === arrow.semanticIdentity.UUID) {\r\n                return arrowEdge;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    flatten(doFlattenVertices = true, doFlattenArrows = true) {\r\n        let verticesSet = new Set();\r\n        let arrowsSet = new Set();\r\n\r\n        let traversedVertices = new Set();\r\n\r\n        if (doFlattenVertices) {\r\n            for (let vertexNode of this.rootVertices) {\r\n                if (!traversedVertices.has(vertexNode)) {\r\n                    traversedVertices.add(vertexNode);\r\n                    verticesSet.add(vertexNode.vertex);\r\n    \r\n                    if (vertexNode !== null) {\r\n                        for (let child of vertexNode.flatten(traversedVertices)) {\r\n                            verticesSet.add(child);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (doFlattenArrows) {\r\n            for (let arrowEdge of this.arrows) {\r\n                arrowsSet.add(arrowEdge.arrow);\r\n            }\r\n        }\r\n\r\n        let flattenedArray = Array.from(verticesSet);\r\n        return flattenedArray.concat(Array.from(arrowsSet));\r\n    }\r\n\r\n    flattenVertexNodes() {\r\n        var verticesSet = new Set();\r\n        let traversedVertices = new Set();\r\n\r\n        for (let vertexNode of this.rootVertices) {\r\n            if (!traversedVertices.has(vertexNode)) {\r\n                traversedVertices.add(vertexNode);\r\n                verticesSet.add(vertexNode);\r\n\r\n                if (vertexNode !== null) {\r\n                    for (let child of vertexNode.flattenVertexNodes(traversedVertices)) {\r\n                        verticesSet.add(child);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return Array.from(verticesSet);\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\n// React imports\r\nimport React, { useRef, useCallback, useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GridMUI from '@material-ui/core/Grid';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { EditingState } from '@devexpress/dx-react-grid';\r\n\r\nimport saveAs from 'file-saver';\r\n\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { GridExporter } from '@devexpress/dx-react-grid-export';\r\n\r\nimport {\r\n    Grid,\r\n    Table,\r\n    TableHeaderRow,\r\n    TableInlineCellEditing,\r\n    Toolbar,\r\n    ExportPanel,\r\n} from '@devexpress/dx-react-grid-material-ui';\r\n\r\nimport {\r\n    Plugin,\r\n    Template,\r\n    TemplatePlaceholder,\r\n} from '@devexpress/dx-react-core';\r\n\r\n// In program imports\r\nimport {currentObjects} from \"./CanvasDraw\";\r\nimport {vertexData} from \"./ContainmentTree\"\r\n\r\n// Globals\r\nlet rows;\r\nlet setRows = null;\r\nlet setColumns = null;\r\nlet textInput = React.createRef();\r\nexport var translationColumns = [];\r\n\r\nconst onSave = (workbook) => {\r\n    workbook.xlsx.writeBuffer().then((buffer) => {\r\n        saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n    });\r\n};\r\n\r\nconst getRowId = row => row.id;\r\n\r\nconst styles = () => ({\r\n    input: {\r\n        fontSize: '14px',\r\n        width: '90px',\r\n    },\r\n    label: {\r\n        fontSize: '14px',\r\n    },\r\n    container: {\r\n        maxWidth: '18em',\r\n    },\r\n    selector: {\r\n        height: '32px',\r\n    },\r\n});\r\n\r\n// #FOLD_BLOCK\r\nconst StartEditActionSelectorBase = (props) => {\r\n    const { defaultAction, changeAction, classes } = props;\r\n    return (\r\n        <GridMUI\r\n            container\r\n            alignItems=\"center\"\r\n            className={classes.container}\r\n        >\r\n            <Typography\r\n                className={classes.label}\r\n            >\r\n                Start Edit Action:\r\n                &nbsp;\r\n            </Typography>\r\n            <Select\r\n                onChange={e => changeAction(e.target.value)}\r\n                value={defaultAction}\r\n                className={classes.selector}\r\n                input={(\r\n                    <OutlinedInput\r\n                        classes={{ input: classes.input }}\r\n                        labelWidth={0}\r\n                        margin=\"dense\"\r\n                    />\r\n                )}\r\n            >\r\n                <MenuItem value=\"click\">Click</MenuItem>\r\n                <MenuItem value=\"doubleClick\">Double Click</MenuItem>\r\n            </Select>\r\n        </GridMUI>\r\n    );\r\n};\r\nconst StartEditActionSelector = withStyles(styles, { name: 'StartEditActionSelector' })(StartEditActionSelectorBase);\r\n\r\n// #FOLD_BLOCK\r\nconst SelectTextCheckerBase = (props) => {\r\n    const { isSelectText, changeSelectText, classes } = props;\r\n    return (\r\n        <FormControlLabel\r\n            control={(\r\n                <Checkbox\r\n                    checked={isSelectText}\r\n                    onChange={e => changeSelectText(e.target.checked)}\r\n                    color=\"primary\"\r\n                />\r\n            )}\r\n            classes={{ label: classes.label }}\r\n            label=\"Select Text On Focus\"\r\n        />\r\n    );\r\n};\r\nconst SelectTextChecker = withStyles(styles, { name: 'SelectTextChecker' })(SelectTextCheckerBase);\r\n\r\nconst EditPropsPanel = props => (\r\n    <Plugin name=\"EditPropsPanel\">\r\n        <Template name=\"toolbarContent\">\r\n            <SelectTextChecker {...props} />\r\n            <TemplatePlaceholder />\r\n            <StartEditActionSelector {...props} />\r\n        </Template>\r\n    </Plugin>\r\n);\r\n\r\nconst FocusableCell = ({ onClick, ...restProps }) => (\r\n    <Table.Cell {...restProps} tabIndex={0} onFocus={onClick} />\r\n);\r\n\r\nexport default () => {\r\n    // Create columns\r\n    let [columns, setColumnsRet] = useState(createColumns());\r\n    setColumns = setColumnsRet;\r\n\r\n    // Disable editing state\r\n    const [editingStateColumnExtensions] = useState([\r\n        { columnName: 'UUID', editingEnabled: false },\r\n        { columnName: 'type', editingEnabled: false },\r\n    ]);\r\n\r\n    // Rows\r\n    const [generatedRows, setRowsRet] = useState([]);\r\n    rows = generatedRows;\r\n    setRows = setRowsRet;\r\n\r\n    // Enable/Disable word Wrap\r\n    const [tableColumnExtensions] = useState([\r\n        { columnName: 'UUID', wordWrapEnabled: true },\r\n        { columnName: 'type', wordWrapEnabled: true },\r\n        { columnName: 'name', wordWrapEnabled: true },\r\n        { columnName: 'description', wordWrapEnabled: true },\r\n        { columnName: 'abbreviation', wordWrapEnabled: true },\r\n        { columnName: 'shortAbbreviation', wordWrapEnabled: true },\r\n    ]);\r\n\r\n    // Editable\r\n    const [startEditAction, setStartEditAction] = useState('click');\r\n    const [selectTextOnEditStart, setSelectTextOnEditStart] = useState(true);\r\n\r\n    const commitChanges = ({ added, changed, deleted}) => {\r\n        let changedRows;\r\n        if (added) {\r\n            const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n            changedRows = [\r\n                ...rows,\r\n                ...added.map((row, index) => ({\r\n                    id: startingAddedId + index,\r\n                    ...row,\r\n                })),\r\n            ];\r\n        }\r\n        if (changed) {\r\n            changedRows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));\r\n            updateChangedObjects(changedRows);\r\n        }\r\n        if (deleted) {\r\n            const deletedSet = new Set(deleted);\r\n            changedRows = rows.filter(row => !deletedSet.has(row.id));\r\n        }\r\n\r\n        setRows(changedRows);\r\n    };\r\n\r\n    // Export functionality\r\n    const exporterRef = useRef(null);\r\n\r\n    const startExport = useCallback(() => {\r\n        exporterRef.current.exportGrid();\r\n    }, [exporterRef]);\r\n\r\n    // Return\r\n    return (\r\n        <Paper>\r\n            <InputGroup>\r\n                <FormControl\r\n                    ref={textInput}\r\n                    placeholder=\"Column name\"\r\n                    aria-label=\"Column name\"\r\n                    aria-describedby=\"basic-addon2\"\r\n                />\r\n                <InputGroup.Append>\r\n                    <Button variant=\"outline-secondary\" onClick={() => addColumn()}>Add</Button>\r\n                    <Button variant=\"outline-secondary\" onClick={() => removeColumn()}>Remove</Button>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n            <Grid\r\n                rows={rows}\r\n                columns={columns}\r\n                getRowId={getRowId}\r\n            >\r\n                <EditingState\r\n                    onCommitChanges={commitChanges}\r\n                    columnExtensions={editingStateColumnExtensions}\r\n                />\r\n                <Table cellComponent={FocusableCell} columnExtensions={tableColumnExtensions} />\r\n                <TableHeaderRow />\r\n                <Toolbar />\r\n                <EditPropsPanel\r\n                    defaultAction={startEditAction}\r\n                    changeAction={setStartEditAction}\r\n                    isSelectText={selectTextOnEditStart}\r\n                    changeSelectText={setSelectTextOnEditStart}\r\n                />\r\n                <ExportPanel startExport={startExport} />\r\n                <TableInlineCellEditing\r\n                    startEditAction={startEditAction}\r\n                    selectTextOnEditStart={selectTextOnEditStart}\r\n                />\r\n            </Grid>\r\n            <GridExporter\r\n                ref={exporterRef}\r\n                rows={rows}\r\n                columns={columns}\r\n                onSave={onSave}\r\n            />\r\n        </Paper>\r\n    );\r\n};\r\n\r\nfunction addColumn() {\r\n    // Get\r\n    const value = textInput.current.value\r\n\r\n    // Clear column name\r\n    textInput.current.value = \"\";\r\n\r\n    // Check if value is empty\r\n    if (value === \"\" || value === null || value === undefined) {\r\n        return;\r\n    }\r\n\r\n    // Add column\r\n    translationColumns.push(value);\r\n    updateColumns();\r\n}\r\n\r\nfunction removeColumn() {\r\n    // Get\r\n    const value = textInput.current.value\r\n\r\n    // Clear column name\r\n    textInput.current.value = \"\";\r\n\r\n    // Delete from currentObjects\r\n    for (let object of currentObjects.flatten()) {\r\n        object.semanticIdentity.translations.delete(value);\r\n    }\r\n\r\n    // Delete column\r\n    translationColumns.splice(translationColumns.indexOf(value), 1);\r\n    updateColumns();\r\n}\r\n\r\nfunction updateColumns() {\r\n    setColumns(createColumns());\r\n}\r\n\r\nfunction getRowForObject(object) {\r\n    const row = {};\r\n\r\n    // Constants\r\n    row['id'] = object.semanticIdentity.UUID; // Just going to be based on UUID since it's easy and unique\r\n    row['UUID'] = object.semanticIdentity.UUID;\r\n    row['type'] = object.typeName;\r\n    row['name'] = object.semanticIdentity.name;\r\n    row['description'] = object.semanticIdentity.description;\r\n    row['abbreviation'] = object.semanticIdentity.abbreviation;\r\n    row['shortAbbreviation'] = object.semanticIdentity.shortAbbreviation;\r\n\r\n    // Translations\r\n    for (let o = 0; o < object.semanticIdentity.translations.length; o++) {\r\n        let translation = object.semanticIdentity.translations[o];\r\n\r\n        row[translation[0]] = translation[1];\r\n    }\r\n\r\n    return row;\r\n}\r\n\r\nexport function resetRows() {\r\n    let newRows = [];\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    for (let i = 0; i < vertexData.length; i++) {\r\n        newRows.push(getRowForObject(vertexData[i]));\r\n    }\r\n    for(let i = 0; i < currentObjectsFlattened.length; i++){\r\n        // Add Arrow Ends\r\n        if (currentObjectsFlattened[i].typeName === \"Arrow\") {\r\n            newRows.push(getRowForObject(currentObjectsFlattened[i].sourceEdgeEnd));\r\n            newRows.push(getRowForObject(currentObjectsFlattened[i].destEdgeEnd));\r\n        }\r\n    }\r\n\r\n    if (setRows === null) {\r\n        console.error(\"Cannot set rows\");\r\n        return;\r\n    }\r\n\r\n    setRows(newRows);\r\n}\r\n\r\nfunction createColumns() {\r\n    // Create default columns\r\n    let columnNames = [\r\n        {name: 'UUID', title: 'UUID'},\r\n        {name: 'type', title: 'Type'},\r\n        {name: 'name', title: 'Name'},\r\n        {name: 'description', title: 'Description'},\r\n        {name: 'abbreviation', title: 'Abbreviation'},\r\n        {name: 'shortAbbreviation', title: 'Short Abbreviation'},\r\n    ];\r\n\r\n    // Add translation columns\r\n    for (let translation of translationColumns) {\r\n        columnNames.push({name: translation, title: translation});\r\n    }\r\n\r\n    return columnNames;\r\n}\r\n\r\nfunction updateChangedObject(object, row) {\r\n    // If should update\r\n    if (object.semanticIdentity.UUID === row['UUID']) {\r\n        // Constants\r\n        object.semanticIdentity.abbreviation = row['abbreviation'];\r\n        object.semanticIdentity.shortAbbreviation = row['shortAbbreviation'];\r\n        object.semanticIdentity.name = row['name'];\r\n        object.semanticIdentity.description = row['description'];\r\n\r\n        // Translations\r\n        for (let translation of translationColumns) {\r\n            // Find translation in list\r\n            let set = false;\r\n            for (let i = 0; i < object.semanticIdentity.translations.length; i++) {\r\n                if (object.semanticIdentity.translations[i][0] === translation) {\r\n                    object.semanticIdentity.translations[i][1] = row[translation];\r\n                    set = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!set) {\r\n                object.semanticIdentity.translations.push([translation, row[translation]]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return row;\r\n}\r\n\r\nfunction updateChangedObjects(rows) {\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    // Iterate through all rows\r\n    for (let i = 0; i < rows.length; i++) {\r\n        // Iterate through all objects\r\n        for (let o = 0; o < currentObjectsFlattened.length; o++) {\r\n            // Update main objects\r\n            rows[i] = updateChangedObject(currentObjectsFlattened[o], rows[i]);\r\n\r\n            // Update edge ends\r\n            if (currentObjectsFlattened[o].typeName === \"Arrow\") {\r\n                rows[i] = updateChangedObject(currentObjectsFlattened[o].sourceEdgeEnd, rows[i]);\r\n                rows[i] = updateChangedObject(currentObjectsFlattened[o].destEdgeEnd, rows[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function setTranslationColumns(newColumns) {\r\n    translationColumns = newColumns;\r\n    updateColumns();\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport {currentObjects, setCurrentObjects, updateArrows} from \"../UIElements/CanvasDraw\"\r\nimport {version} from \"../UIElements/MainView\"\r\nimport {setTranslationColumns, translationColumns} from \"../UIElements/SemanticDomainEditor\"\r\nimport {getModelName} from \"../UIElements/CanvasDraw\";\r\n\r\nimport {Vertex} from \"../DataStructures/Vertex\";\r\nimport {Arrow} from \"../DataStructures/Arrow\";\r\nimport {Cardinality} from \"../DataStructures/Cardinality\";\r\nimport {EdgeEnd} from \"../DataStructures/EdgeEnd\";\r\nimport {Graph} from \"../DataStructures/Graph\";\r\nimport { SemanticIdentity } from \"../DataStructures/SemanticIdentity\";\r\n\r\nexport function getSaveData() {\r\n    let vertexObjects = currentObjects.flatten(true, false);\r\n    let arrowObjects = currentObjects.flatten(false, true);\r\n\r\n    // Combine into save data\r\n    let saveData = {\r\n        // The version is being saved in the savefile\r\n        // this is so in future versions, if the serialisation changes\r\n        // They can upgrade the the file to one compatibile with the newer version\r\n        version: version,\r\n\r\n        // Translations for semantic domain editor\r\n        translationColumns: translationColumns,\r\n\r\n        // The data here should all have uuids and should be convertible back into their objects.\r\n        vertices: vertexObjects,\r\n        arrows: arrowObjects,\r\n\r\n        \"modelName\":getModelName()\r\n    };\r\n\r\n\r\n    return saveData;\r\n}\r\n\r\nexport function save() {\r\n    let JSONdata = getSaveData();\r\n    let dataStr = JSON.stringify(JSONdata);\r\n\r\n    let DLelement = document.createElement(\"a\");\r\n    let dataFile = new Blob([dataStr], {type: 'text/json'});\r\n\r\n    DLelement.href = URL.createObjectURL(dataFile);\r\n    let title = getModelName();\r\n    if (title === \"\") {\r\n        title = \"untitled\";\r\n    }\r\n    DLelement.download = title + \".json\";\r\n    document.body.appendChild(DLelement);\r\n    DLelement.click();\r\n}\r\n\r\n// This is done since serialised objects lose their methods\r\n// verticesArray parameter is only used when rebuilding an Arrow type\r\nexport function rebuildObject(item, verticesArray) {\r\n    switch (item.typeName) {\r\n        case \"Vertex\":\r\n            var vertex = new Vertex(item.title, item.content, item.x, item.y, item.width, item.height, item.semanticIdentity);\r\n            return vertex;\r\n\r\n        case \"Arrow\":\r\n        case \"Edge\":\r\n        case \"Specialisation\":\r\n        case \"Visibility\":\r\n            var arrow = new Arrow(verticesArray, item.pathData, item.edgeType, rebuildObject(item.semanticIdentity));\r\n            arrow.sourceEdgeEnd = rebuildObject(item.sourceEdgeEnd);\r\n            arrow.destEdgeEnd = rebuildObject(item.destEdgeEnd);\r\n            return arrow;\r\n\r\n        case \"Cardinality\":\r\n            return new Cardinality(item.numLowerBound, item.numUpperBound, item.attachedToUUID, item.isVisible, rebuildObject(item.semanticIdentity));\r\n\r\n        case \"EdgeEnd\":\r\n            return new EdgeEnd(item.attachedToUUID, item.headType, rebuildObject(item.cardinality), item.label, rebuildObject(item.semanticIdentity));\r\n\r\n        case \"SemanticIdentity\":\r\n            return new SemanticIdentity(item.name, item.description, item.abbreviation, item.shortAbbreviation, item.UUID, item.translations);\r\n        default:\r\n            console.error(\"Unknown object to deserialise \", item);\r\n            break;\r\n    }\r\n}\r\n\r\nexport function open(jsonString) {\r\n    if (jsonString == null) return;\r\n    try {\r\n        var loadedJSON = JSON.parse(jsonString);\r\n\r\n        // Loaded objects ONLY with variables\r\n        setTranslationColumns(loadedJSON.translationColumns);\r\n\r\n        // Update current objects\r\n        var newVertices = [];\r\n        var newArrows = [];\r\n        for (let serialisedVertex of loadedJSON.vertices) {\r\n            if (serialisedVertex !== null) {\r\n                newVertices.push(rebuildObject(serialisedVertex));\r\n            }\r\n        }\r\n\r\n        for (let serialisedArrow of loadedJSON.arrows) {\r\n            if (serialisedArrow !== null) {\r\n                newArrows.push(rebuildObject(serialisedArrow, newVertices));\r\n            }\r\n        }\r\n\r\n        setCurrentObjects(new Graph(newVertices, newArrows));\r\n\r\n        //Rebuild arrow paths\r\n        updateArrows();\r\n\r\n    } catch (e) {\r\n        alert(e);\r\n    }\r\n\r\n}","import React from 'react';\r\nimport * as canvasDraw from \"./CanvasDraw\";\r\nimport { getFolderNameFromKey, getVertexData } from './ContainmentTree';\r\nimport { Tool } from './LeftMenu';\r\n\r\nlet movingAllowed = false;\r\nlet selectMultiple = false;\r\nlet selectDown = false;\r\nlet savedObjects = [];\r\n\r\nexport class Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n\r\n        this.state = {}\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextContext) {\r\n        this.zoom = nextProps.mainState.zoomLevel;\r\n        this.tool = nextProps.mainState.drawMode;\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.zoom = this.props.mainState.zoomLevel;\r\n        this.tool = this.props.mainState.drawMode;\r\n\r\n        document.getElementById(\"Canvas\").addEventListener('dragenter', this.dragEnter);\r\n        document.getElementById(\"Canvas\").addEventListener('dragover', this.dragOver);\r\n        document.getElementById(\"Canvas\").addEventListener('dragleave', this.dragLeave);\r\n        document.getElementById(\"Canvas\").addEventListener('drop', this.drop);\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.getElementById(\"Canvas\").removeEventListener('dragenter', this.dragEnter);\r\n        document.getElementById(\"Canvas\").removeEventListener('dragover', this.dragOver);\r\n        document.getElementById(\"Canvas\").removeEventListener('dragleave', this.dragLeave);\r\n        document.getElementById(\"Canvas\").removeEventListener('drop', this.drop);\r\n    }\r\n\r\n    dragEnter(e) {\r\n        e.preventDefault();\r\n    }\r\n    \r\n    dragOver(e) {\r\n        e.preventDefault();\r\n    }\r\n    \r\n    dragLeave(e) {\r\n        return 0\r\n    }\r\n    \r\n    drop(e) {\r\n        console.log('dropped')\r\n        //Find the vertex object that was dragged\r\n        let droppedSemanticID = e.dataTransfer.getData('text/plain');\r\n        let droppedVertex = 0;\r\n        for(let vert of getVertexData()){\r\n            if (vert.semanticIdentity.UUID === droppedSemanticID)\r\n            droppedVertex = vert;\r\n        }\r\n        //console.log(droppedVertex)\r\n        //get canvas relative coordinates for where the object was dropped\r\n        let mouseCoords = canvasDraw.getGraphXYFromMouseEvent(e)\r\n\r\n        let newName = droppedVertex.text.replace(\" 🟧\",\"\");\r\n        newName = newName.replace(\" 📂\",\"\")\r\n        let newColour;\r\n        let visibilityCheck = false;\r\n\r\n        //check if selected model is located in the same package or not\r\n        if(droppedVertex.parentRenderKey !== canvasDraw.getCurrentRenderKey()){\r\n            newColour = \"#FFFFFF\";\r\n            visibilityCheck = true; //used to determine if the vertex has an origin package added\r\n        }\r\n        else{\r\n            \r\n            newColour = droppedVertex.colour;\r\n        }\r\n\r\n\r\n        //create the vertex object(size 30x15) and place it\r\n        let canvasVert = canvasDraw.createVertex(mouseCoords[0],mouseCoords[1],droppedVertex.width,droppedVertex.height,newName,\r\n            droppedVertex.content,newColour,droppedVertex.icons,droppedVertex.imageElements,droppedVertex.fontSize,droppedVertex.semanticIdentity)\r\n        if(visibilityCheck === true){\r\n            //add origin package\r\n            let originText = getFolderNameFromKey(droppedVertex.parentRenderKey)\r\n            originText = originText.replace(\" 🟧\",\"\")\r\n            originText = originText.replace(\" 📁\",\"\")\r\n            canvasVert.setOrigin(originText + \" :: \")\r\n        }\r\n        canvasDraw.addObject(canvasVert)\r\n        canvasDraw.drawAll()\r\n\r\n\r\n\r\n        //canvas\r\n        //mouseStartX\r\n        //mouseStartY\r\n        //x mose+10\r\n        //x mouse +10\r\n\r\n    }\r\n\r\n\r\n\r\n    // prevent context (right-click) menu from appearing\r\n    ocm = (e) => {\r\n        e.preventDefault();\r\n    };\r\n    // What happens if u click anywhere on the canvas\r\n    mouseDown = (e, canvas) => {\r\n        let position = canvasDraw.getGraphXYFromMouseEvent(e);\r\n        let x = position[0]; let y = position[1];\r\n        this.setState({\r\n            startX: x,\r\n            startY: y\r\n        });\r\n\r\n        //toggle shift key to move all connected\r\n        if (e.shiftKey && !selectDown) {\r\n            selectDown = true;\r\n        }\r\n        // If it was a left click\r\n        if (e.button === 0 && !selectMultiple) {\r\n            let intersection = canvasDraw.findIntersected(x, y);\r\n            // check if there's an object\r\n            if (intersection !== null) {\r\n                //if object is a box, move the object\r\n                if (canvas.tool === Tool.Select && intersection.typeName === \"Vertex\") {\r\n                    e.preventDefault();\r\n                    // brings up the menu\r\n                    this.props.setLeftMenu(canvasDraw.findIntersected(x, y));\r\n                    canvasDraw.onMiddleClick(canvas, x, y,null,selectDown);\r\n                    //console.log(selectDown);\r\n\r\n                } else {\r\n                    this.props.setLeftMenu(canvasDraw.findIntersected(x, y));\r\n                    canvasDraw.saveBlockStates(canvas, x, y, 1);\r\n                    canvasDraw.onLeftMousePress(canvas, x, y);\r\n                }\r\n\r\n              } else { //clicked nothing\r\n            this.props.setLeftMenu(canvasDraw.findIntersected(x, y));\r\n            canvasDraw.saveBlockStates(canvas, x, y, 1);\r\n            canvasDraw.onLeftMousePress(canvas, x, y);\r\n            }\r\n        }\r\n        \r\n        //toggles ctrl key to be active for selecting multiple.\r\n        //detoggles in mouseup\r\n        if (e.ctrlKey && !selectMultiple) {\r\n            selectMultiple = true;\r\n        }\r\n\r\n        //mouse down\r\n        if (e.button === 0 && selectMultiple) {\r\n            \r\n            let intersection = canvasDraw.findIntersected(x, y);\r\n            // check if there's an object\r\n            if (intersection === null) {\r\n                this.props.setLeftMenu(intersection, false, savedObjects);\r\n                savedObjects = [];\r\n                selectMultiple = false;\r\n\r\n            }\r\n            if (intersection !== null) {\r\n                //console.log(selectMultiple);\r\n                // Remove dupes\r\n                let foundEnd = 0;\r\n                //start at 0\r\n                while (foundEnd < savedObjects.length-1){\r\n                    //stop @ second last one\r\n                    //check RHS for duplicates\r\n                    //found+1 because wanna look at box after the one we looking at\r\n                    for (let ob = foundEnd+1; ob < savedObjects.length; ob++){\r\n                        if(savedObjects[foundEnd].x === savedObjects[ob].x && savedObjects[foundEnd].y === savedObjects[ob].y ){\r\n                            savedObjects.splice(ob); // if it's the same, delete it and slide array back one\r\n                        }\r\n                    }\r\n                    foundEnd++;\r\n                }\r\n                //ideally want to push in the first object that has already been selected\r\n                console.log(savedObjects);\r\n                savedObjects.push(canvasDraw.findIntersected(x, y));\r\n                canvasDraw.onMiddleClick(canvas, x, y, savedObjects)\r\n                \r\n                for(let i = 0; i <savedObjects.length; i++) {\r\n                    this.props.setLeftMenu(savedObjects[i], selectMultiple);\r\n                }\r\n                \r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        // If it was a middle click\r\n        if (e.button === 1) {\r\n            e.preventDefault();\r\n            canvasDraw.onMiddleClick(canvas, x, y)\r\n        }\r\n\r\n\r\n    };\r\n\r\n    mouseUp = (e, canvas) =>{\r\n\r\n        canvasDraw.solidifyObject();\r\n\r\n        let position = canvasDraw.getGraphXYFromMouseEvent(e);\r\n        let x = position[0]; let y = position[1];\r\n\r\n        // If it was a left click\r\n        if (e.button === 0) {\r\n            if (canvas.tool === Tool.Select) {\r\n                canvasDraw.drawAll()\r\n            }\r\n\t\t\telse {\r\n                canvasDraw.onLeftMouseRelease(canvas, x, y);\r\n            }\r\n\r\n        }\r\n\r\n        // if it was a right click\r\n        if (e.button === 2) {\r\n\r\n           // deleted the old rightclick functionality and will leave this if statement here for when we implement right click menu - cooper\r\n           \r\n\t\t\t\r\n        }\r\n\t\tif (e.shiftKey && selectDown) {\r\n            selectDown = false;\r\n        }\r\n\r\n        if (e.button === 1) {\r\n            window.setTimeout(() => {canvasDraw.solidifyObject()},200)\r\n\r\n        }\r\n\t\tif (canvasDraw.blockBeenSelected === true){\r\n\t\t\tcanvasDraw.checkCollision(canvas, x, y);\r\n\t\t}\r\n\t\t\r\n    };\r\n\r\n    mouseLeave() {\r\n        canvasDraw.onMouseLeave()\r\n    }\r\n\r\n    render() {\r\n        return <canvas ref={this.canvasRef} id=\"drawCanvas\" onContextMenu={(e) => this.ocm(e)} onMouseDown={(e) => this.mouseDown(e, this)} onMouseUp={(e) => this.mouseUp(e, this)} onMouseLeave={(e) => this.mouseLeave(e,this)}>\r\n                <p> HTML5 Canvas elements are not supported by your browser</p>\r\n            </canvas>\r\n    }\r\n\r\n}\r\n\r\nwindow.addEventListener(\"resize\",canvasDraw.resetMouseOrigin);\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\n\r\nimport React from 'react';\r\nimport TreeView from 'react-simple-jstree';\r\n\r\n\r\n\r\n\r\nimport { currentObjects, getModelName, getCurrentRenderKey, setNewRenderKey, \r\n    getTotalRenderKeys, incrementTotalRenderKeys, \r\n    getCurrentModel, setNewModel, getTotalModels, incrementTotalModels, decreaseTotalModels, decreaseTotalRenderKeys, deleteElement} from \"./CanvasDraw\";\r\n\r\nimport { drawAll } from \"./CanvasDraw\";\r\nimport {VertexNode} from \"../DataStructures/Graph.js\"\r\nimport { ContactsOutlined } from '@material-ui/icons';\r\nimport { LeftMenu, LeftMenuType } from './LeftMenu';\r\nimport { MainProgramClass } from './MainView';\r\nimport { SemanticIdentity } from \"../DataStructures/SemanticIdentity.js\";\r\n//import { remove,toTreeViewElement } from \"../DataStructures/Graph\";\r\n//import { ContactsOutlined, Remove } from '@material-ui/icons';\r\n\r\n\r\n//import {currentRenderKey} from './CanvasDraw';\r\n\r\n// I need to export this so I can access it in the left menu and then set it to the correct vertex;\r\nexport var someVertexPath = \"\";\r\n\r\nlet focussed = false; //leftover from a depricated feature, should always be false until removed fully- Lachlan\r\nlet currentlySelectedObject = null; //The currently selected object\r\n//let lastSelectedObject = null; // The last selected object\r\n\r\nlet showingVertPath = false;\r\n\r\n// You could probably get away with not including this here, but it just makes it easier to access the tree\r\n// data from any function you like. It still needs to be emptied in the constructor though\r\nlet treeData = [];\r\n\r\n// I need this to store the folders. Initially, it has one folder simply titled 'Unnamed Folder'.\r\nexport let folderData = [];\r\n\r\n// used to store Vertex objects in tree data (Used to create the vertex objects in CanvasDraw/currentObjects)\r\nexport let vertexData = [];\r\nlet decoyVertexData = [] //here because of how old team did folder indexing\r\n\r\n//used as a container to seperate \"root\" folders and subfolders so that only the root folders are pushed to root.children in the constructor - Lachlan\r\nlet folderDataRoot = [];\r\n\r\n//This variable will be used to store the \"selected folder\" for creating new folders or models\r\n// As renderKey is tied too many methods related to syncing data between canvas and tree/ creating data in tree control of the current renderkey \r\n//has been taken away from the user and will always be set to the parent folder of the selected model (this happens in elementSelect on a model click) - Lachlan\r\nlet selectedFolderKey = 0;\r\n\r\n// This is to do with getting the data indexing to be\r\nlet decoyFolderData = [];\r\n\r\n// An array for holding model names\r\nexport let modelObjects = [];\r\n\r\nlet decoyModelObjects = []; // doing the same data referencing as folder data because currently the data being referenced in the models is the model beforehand which\r\n                            // i dont tink is intended. - cooper\r\n\r\nlet folderAltered = false;\r\nlet modelAltered = false;\r\nlet vertexAltered = false //not sure if I need this? but leaving here for now incase I do need it referenced somewhere since folder andm odels have it -Lachlan\r\n\r\n// created a boolean which whill tell the leftmenu that the containment tree needs to update\r\nexport var treeNeedsUpdate = 0;\r\n\r\n\r\n\r\nexport function setSelectedFolderKey(newKey){\r\n    selectedFolderKey = newKey;\r\n}\r\n\r\nexport function getSelectedFolderKey(){\r\n    return selectedFolderKey;\r\n}\r\n\r\n\r\nexport function getFolderData(){\r\n    return folderData;\r\n}\r\n\r\nexport function getVertexData(){\r\n    return vertexData;\r\n}\r\n\r\n//returns a concated array of the folders and vertex(containers)\r\nexport function getContainerData(){\r\n    return folderData.concat(vertexData);\r\n}\r\n\r\nexport function setFolderData(newFolderData){\r\n    folderData = newFolderData;\r\n}\r\n\r\nexport function getModelData(){\r\n    return modelObjects;\r\n}\r\n\r\n//This function is used to load the first available model and canvas from the modelObjects array\r\n//Used to fix thye tree/canvas desync bug when deleting - Lachlan\r\nfunction loadFirstModel(){\r\n    //set selected model/render key to the 1st available as so a canvas isnt loaded for a nonexistant model\r\n    setNewRenderKey(modelObjects[0].data.renderKey)\r\n    setNewModel(modelObjects[0].data.modelKey)\r\n    setSelectedFolderKey(modelObjects[0].data.renderKey)\r\n\r\n    //taken from handleElementSelect for loading the new models canvas\r\n    for (let item of currentObjects.flatten()){\r\n        if (item.typeName === \"Vertex\" && item.getModelKey() === getCurrentModel()){\r\n            item.setPresent();\r\n        }\r\n        else if (item.getModelKey() !== getCurrentModel() && item.typeName === \"Vertex\"){\r\n            item.setAway();\r\n        }\r\n    }\r\n    drawAll()\r\n    document.getElementById(\"SelectedFolder\").value = getContainerData().find(folder => { return folder.renderKey === getSelectedFolderKey()}).text\r\n    document.getElementById(\"SelectedContainer\").value = getContainerData().find(folder => { return folder.renderKey === getCurrentRenderKey()}).text\r\n    document.getElementById(\"SelectedModel\").value = modelObjects.find(model => { return model.modelKey === getCurrentModel()}).text\r\n}\r\n\r\n\r\n//parent key is for dictating subfolders where 0 is root, else pKey is a folder renderKey - Lachlan\r\nexport function handleAddFolder(folderName, parentKey = 0){\r\n    //Create a new folder using the known node type\r\n\r\n    incrementTotalRenderKeys();\r\n\r\n    let tempFolderThing = {\r\n        text: folderName + \" 📁\", //If icon is changed, youll have to change the folder icon in context menu too\r\n        children: treeData[getTotalRenderKeys()],\r\n        data: NaN,\r\n        state: {opened: true},\r\n        type: \"Folder\",\r\n        renderKey: getTotalRenderKeys(),\r\n        parentRenderKey: parentKey\r\n    }\r\n\r\n    decoyFolderData.push(tempFolderThing)\r\n\r\n    let folderThing2 = {\r\n        text: folderName + \" 📁\", //If icon is changed, youll have to change the folder icon in context menu too\r\n        children: treeData[getTotalRenderKeys()],\r\n        data: decoyFolderData[folderData.length],\r\n        state: {opened: true},\r\n        type: \"Folder\",\r\n        renderKey: getTotalRenderKeys(),\r\n        parentRenderKey: parentKey\r\n    }\r\n    \r\n    //console.log(\"theActualData: \" + folderData.length)\r\n    folderData.push(folderThing2);\r\n    //console.log(\"Folder data apparent: \" + folderData[folderData.length-1].data)\r\n    //console.log(folderData)\r\n    //console.log(folderThing2.renderKey)\r\n\r\n    folderAltered = true;\r\n    \r\n}\r\n\r\n// Function to remove a folder in the tree\r\nexport function handleDeleteFolder(selectedRenderKey){ // changing the deleting functions to delete based on renderkey & modelkeys - cooper\r\n    console.log(\"below is the selected render key\")\r\n    console.log(selectedRenderKey)\r\n    if(folderData.length > 1){ //cannot delete folder if it is the only one excluding root - Lachlan\r\n        for (let i = 0; i < folderData.length; i++){\r\n            if (folderData[i].renderKey === selectedRenderKey){\r\n                console.log(\"below is folderdata\")\r\n                console.log(folderData)\r\n                deleteFolderChildren(folderData[i]);\r\n                decoyFolderData.splice(i,1); // have to delete from this array as well because this is where folders obtain the data of themselves \r\n                folderData.splice(i,1); \r\n            }\r\n        }\r\n    \r\n    folderAltered = true;\r\n    }\r\n    else{console.log(\"Cannot delete only folder\")}\r\n    \r\n    loadFirstModel()\r\n}\r\n\r\nfunction deleteFolderChildren(selectedFolder){ // function for deleting all the children of a folder.\r\n    let folderChildren = selectedFolder.children;\r\n    for (let i = 0; i < folderChildren.length; i++){\r\n        if (folderChildren.type === \"Folder\"){\r\n            let selectedRenderKey = folderChildren[i].renderKey;\r\n            handleDeleteFolder(selectedRenderKey);\r\n\r\n        }\r\n        else if (folderChildren.type === \"Model\"){\r\n            let selectedModelKey = folderChildren[i].modelKey;\r\n            handleDeleteModel(selectedModelKey);\r\n        }\r\n    }\r\n}\r\n\r\nfunction deleteModelChildren(selectedModel){ // function for deleting all the children of the model.\r\n    if(selectedModel.children.length > 0){\r\n        let verticesFolder = selectedModel.children;\r\n        for (let i = 0; i < verticesFolder.length; i++){ // had to make a nested for loop due to the encompassing 'vertices' folder\r\n            let vertices = verticesFolder[i].children;\r\n            for (let v = 0; v < vertices.length; v++){\r\n                if (vertices[v].modelkey === selectedModel.modelKey){\r\n                    let chosenObject = vertices[v].data\r\n                    deleteElement(chosenObject);\r\n                }\r\n            }    \r\n        }\r\n    }   \r\n}\r\n\r\n\r\nexport function handleRenameFolder(newName,rKey){\r\n    if(newName !== \"\"){\r\n        for (let i = 0; i < folderData.length; i++){\r\n            if (folderData[i].renderKey === rKey){\r\n                folderData[i].text = newName + \" 📁\";\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        console.log(\"Cannot have empty name\")\r\n    }\r\n}\r\n\r\nexport function handleAddVertex(vertexName, parentKey = 0){\r\n    //Create a new folder using the known node type\r\n\r\n    incrementTotalRenderKeys();\r\n    let sID = new SemanticIdentity(vertexName,\"\",\"\",\"\", undefined ,[])\r\n\r\n    let tempVertexThing = {\r\n        text: vertexName + \" 🟧\", //If icon is changed, youll have to change the folder icon in context menu too\r\n        children: treeData[getTotalRenderKeys()],\r\n        data: NaN,\r\n        state: {opened: true},\r\n        type: \"treeVertex\",\r\n        typeName: \"VertexNode\",\r\n        originalVertex: true,\r\n        renderKey: getTotalRenderKeys(),\r\n        parentRenderKey: parentKey,\r\n        content: \"\",\r\n        colour: \"#FFD5A9\",\r\n        height: 50,\r\n        width: 70,\r\n        icons: [[],[],[]],\r\n        imageElements: {},\r\n        fontSize: 12,\r\n        semanticIdentity: sID\r\n    }\r\n\r\n    decoyVertexData.push(tempVertexThing)\r\n\r\n    let vertexThing2 = {\r\n        text: vertexName + \" 🟧\", //If icon is changed, youll have to change the folder icon in context menu too\r\n        children: treeData[getTotalRenderKeys()],\r\n        data: decoyVertexData[vertexData.length],\r\n        state: {opened: true},\r\n        type: \"treeVertex\",\r\n        typeName: \"VertexNode\",\r\n        originalVertex: true,\r\n        renderKey: getTotalRenderKeys(),\r\n        parentRenderKey: parentKey,\r\n        content: \"\",\r\n        colour: \"#FFD5A9\",\r\n        height: 50,\r\n        width: 70,\r\n        icons: [[],[],[]],\r\n        imageElements: {},\r\n        fontSize: 12,\r\n        semanticIdentity: sID\r\n    }\r\n    \r\n\r\n    vertexData.push(vertexThing2);\r\n    console.log(vertexData)\r\n\r\n    vertexAltered = true;\r\n    \r\n}\r\n\r\n\r\n\r\n// Added optional parameter render key, atm used to handle create a model with no folder selected - Lachlan\r\n//initial \"children\" are to prevent erros caused by children initialy not being iterable - Lachlan\r\nexport function handleAddModel(modelName, rKey=getSelectedFolderKey(), semanticID=undefined){\r\n    incrementTotalModels();\r\n    let sID = undefined;\r\n    let icon = \" 📈\"; //If icon is changed, youll have to change toe folder icon in context menu too\r\n    \r\n    if (semanticID !== undefined){\r\n        sID = semanticID;\r\n        icon = \" ⛶\"; //If icon is changed, youll have to change toe folder icon in context menu too\r\n    } else {\r\n        sID = new SemanticIdentity(modelName,\"\",\"\",\"\", undefined ,[]);\r\n    }\r\n    \r\n    let decoyModelThing = {\r\n        text: modelName + icon,\r\n        children: [],\r\n        data: NaN,\r\n        state: {opened: true},\r\n        type: \"Model\",\r\n        renderKey: rKey,\r\n        modelKey: getTotalModels(),\r\n        semanticIdentity: sID\r\n    }\r\n    decoyModelObjects.push(decoyModelThing);\r\n\r\n\r\n    let tempModelThing = {\r\n        text: modelName + icon,\r\n        children: [],\r\n        data: decoyModelObjects[modelObjects.length],\r\n        state: {opened: true},\r\n        type: \"Model\",\r\n        renderKey: rKey,\r\n        modelKey: getTotalModels(),\r\n        semanticIdentity: sID\r\n    };\r\n \r\n    modelObjects.push(tempModelThing);\r\n    console.log(modelObjects)\r\n\r\n    modelAltered = true;\r\n\r\n\r\n}\r\n\r\nexport function handleDeleteVertex(selectedUUID){\r\n    for(let vertex of currentObjects.flatten()){\r\n        if(vertex.originalUUID === selectedUUID){\r\n            currentObjects.remove(vertex)\r\n        }\r\n    }\r\n    for(let i = 0; i < vertexData.length; i++){\r\n        if(vertexData[i].semanticIdentity.UUID === selectedUUID){\r\n            vertexData.splice(i, 1)\r\n            decoyVertexData.splice(i, 1)\r\n        }\r\n    }\r\n    drawAll();\r\n}\r\n\r\nexport function handleDeleteModel(selectedModelKey){\r\n\r\n\r\n    for (let i = 0; i < modelObjects.length; i++){\r\n        if (modelObjects[i].modelKey === selectedModelKey){\r\n            console.log(\"model deleted below\")\r\n            console.log(modelObjects[i])\r\n            deleteModelChildren(modelObjects[i]);\r\n            modelObjects.splice(i, 1);\r\n            decoyModelObjects.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    loadFirstModel()\r\n}\r\n\r\nexport function handleRenameModel(newName,mKey){\r\n    for (let i = 0; i < modelObjects.length; i++){\r\n        if (modelObjects[i].modelKey === mKey){\r\n            modelObjects[i].text = newName + \" 📈\";\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getModelRenderKey(selectedModelKey){ // this function is to fetch the renderkey of the selected model to ensure verticies get created with the correct renderkey -- cooper\r\n    for(let i = 0; i < modelObjects.length; i++){\r\n        if (modelObjects[i].modelKey === selectedModelKey){\r\n            return modelObjects[i].renderKey\r\n        }\r\n    }\r\n}\r\n\r\n//Function for changing the parent folder of a model - Lachlan\r\nexport function handleModelRebase(mKey,newRkey){\r\n    console.log(\"Rebase test\")\r\n    console.log(modelObjects)\r\n    for(let model of modelObjects){\r\n        if(model.modelKey === mKey){\r\n           for(let objectFolders of model.children){  \r\n                let objects = objectFolders.children\r\n                for(let object of objects){\r\n                    object.renderkey = newRkey;\r\n                    if(object.data.typeName === \"Vertex\"){\r\n                    object.data.vertexRenderKey = newRkey;\r\n                    }\r\n                    else{\r\n                    object.data.arrowRenderKey = newRkey;\r\n                    }\r\n                }\r\n            } \r\n            console.log(model)\r\n            model.renderKey = newRkey;\r\n            console.log(model)\r\n        }\r\n    }\r\n    console.log(modelObjects)\r\n    treeNeedsUpdate = 1;\r\n}\r\n\r\n\r\n\r\n// This is a function to display the path of a given vertex\r\n// It's called in the left menu of a vertex\r\nexport function showVertexPath(theObject){\r\n\r\n    if (currentObjects.flatten().length > 0){\r\n        currentlySelectedObject = theObject;\r\n        if (showingVertPath === false){\r\n            showingVertPath = true;\r\n\r\n        }\r\n    \r\n        else if (showingVertPath === true){\r\n            showingVertPath = false;\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// This function is used to determine which object should be owned by which folder object.\r\n// Works by taking a look at the children of the treeData array and seeing if their render \r\n// key matches the one parsed to the function\r\nfunction determineOwnership(parsedRenderKey){\r\n    let returnArray = []\r\n    let i = 0\r\n    for (let vertexOrArrow of treeData){\r\n        if(vertexOrArrow !== undefined){\r\n            //console.log(\"treeData object name: \" + vertexOrArrow.text)\r\n\r\n            if (vertexOrArrow.type === \"Model\"){\r\n                if (vertexOrArrow.renderKey === parsedRenderKey){\r\n                    returnArray.push(treeData[i])\r\n                }\r\n                \r\n            }\r\n/*\r\n            for (let child of vertexOrArrow.children){\r\n                // Check if the render key of the child matches \r\n                if (child.renderKey === parsedRenderKey){\r\n                    //console.log(\"Matched tree data: \" + treeData[i])\r\n                    returnArray.push(treeData[i])\r\n                    break\r\n                }\r\n            }\r\n            */\r\n        }\r\n        i += 1\r\n    }\r\n\r\n    return returnArray\r\n}\r\n\r\n//function used for determineing which folders are owned by a higher folder - Lachlan\r\nfunction determineSubFolders(parsedRenderKey){\r\n    let returnArray = []\r\n    for (let folder of getContainerData()){\r\n        if(folder.parentRenderKey === parsedRenderKey)\r\n        returnArray.push(folder)\r\n    }\r\n    //console.log(\"subfolder return\")\r\n    //console.log(returnArray)\r\n    return returnArray\r\n}\r\n\r\nexport function getModelNameFromKey(key){\r\n    let model = modelObjects.find(model => model.modelKey === key)\r\n    return model.text\r\n}\r\n\r\nexport function getFolderNameFromKey(key){\r\n    let folder = getContainerData().find(folder => folder.renderKey === key)\r\n    return folder.text\r\n}\r\n\r\n\r\n\r\nlet initialFolderAdded = false;\r\nexport class ContainmentTree extends React.Component {\r\n\r\n    componentDidMount() {\r\n        document.getElementById(\"LowerPanel\").addEventListener('dragstart', this.dragStart);\r\n    }\r\n    componentDidUpdate(){\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        document.getElementById(\"LowerPanel\").removeEventListener('dragstart', this.dragStart);\r\n    }\r\n\r\n    dragStart(e) {\r\n        //console.log(e)\r\n        //When we have a better method of getting data without the click, Use the new method to assign the data value - Lachlan\r\n        e.target.click();\r\n        let vertData = 0;\r\n        for(let folder of getContainerData()){\r\n            if(getSelectedFolderKey() === folder.renderKey)\r\n            vertData = folder;\r\n        }\r\n\r\n        let data = vertData;\r\n        console.log('drag starts...');\r\n        //Prevents errors when a folder or model is dragged etc. \r\n        if(vertData.type === \"treeVertex\"){\r\n        e.dataTransfer.setData('text/plain',data.semanticIdentity.UUID)\r\n        //console.log(data.semanticIdentity.UUID)\r\n        }\r\n        else{\r\n            console.log(\"This object has no drag/drop feature\")\r\n        }\r\n     }\r\n    \r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        treeData = []; \r\n        //let i = 0;\r\n        //console.log(\"props\")\r\n        //console.log(props)\r\n        \r\n\r\n        \r\n        if (initialFolderAdded === false){\r\n            setNewRenderKey(1);\r\n            setNewModel(1);\r\n            setSelectedFolderKey(1);\r\n            handleAddFolder(\"Folder\");\r\n            //The initial folder has render key 1, the initial model needs this to be specified as nothing is selected\r\n            handleAddModel(\"Model\",1) \r\n            initialFolderAdded = true;\r\n            handleAddFolder(\"Subfolder\",getCurrentRenderKey())\r\n            handleAddVertex(\"new Vertex\",getCurrentRenderKey())\r\n        }\r\n        \r\n\r\n            // Push the model objects in. --- I moved the position of these for loops outside of the vertex for loop as it was creating a few problems - cooper\r\n        for (let model of modelObjects){\r\n            treeData.push(model);           \r\n            \r\n        }\r\n        for (let folder of getContainerData()){ // this for loop is to define the ownership of the models - cooper\r\n                //folder.children = determineOwnership(folder.renderKey)  \r\n                //folder.children = determineSubFolders(folder.renderKey)\r\n                let canvasItems = determineOwnership(folder.renderKey) \r\n                let subFolderItems = determineSubFolders(folder.renderKey)\r\n                let combinedItems = canvasItems.concat(subFolderItems)\r\n                //console.log(\"test\")\r\n                //console.log(\"treedata\");\r\n                //console.log(treeData);\r\n                //console.log(combinedItems)\r\n                folder.children = combinedItems;\r\n                \r\n\r\n            }\r\n            //console.log(getContainerData())\r\n               // treeData.push(vertex.toTreeViewElement(new Set())); --- not too sure what the point of this .push was - cooper   \r\n            \r\n        for (let folder of getContainerData()){ // this for loop is to define the ownership of the vertices & arrows - cooper\r\n            let vertex = new VertexNode() \r\n            \r\n            //Disableing canvas vertex's appearing in treeview - Lachlan\r\n            /*\r\n            if (vertex.toTreeViewElement(\"Vertex Folder\", folder.renderKey) !== undefined){ // modelkey is redundant now for storing things in treeview \r\n                //console.log(\"a vertexorarrow: \",vertex)                                                                           // as things need to be stored under the folder - cooper\r\n                folder.children.push(vertex.toTreeViewElement(\"Vertex Folder\", folder.renderKey))\r\n            }\r\n            */\r\n\r\n            if (vertex.toTreeViewElement(\"Arrow Folder\", folder.renderKey) !== undefined){\r\n                 //console.log(\"a vertexorarrow: \",vertex)\r\n                folder.children.push(vertex.toTreeViewElement(\"Arrow Folder\", folder.renderKey))\r\n            }  \r\n            \r\n        }\r\n\r\n        for(let vert of getVertexData()){\r\n            console.log(vert.children)\r\n            if(vert.children.length === 0){\r\n                vert.text = vert.text.replace(\" 🟧\",\"\");\r\n                vert.text = vert.text.replace(\" 📂\",\"\");\r\n                vert.text = vert.text + \" 🟧\"\r\n            }\r\n            else{\r\n                vert.text = vert.text.replace(\" 🟧\",\"\");\r\n                vert.text = vert.text.replace(\" 📂\",\"\");\r\n                vert.text = vert.text + \" 📂\"\r\n            }\r\n        }\r\n\r\n        folderDataRoot = [];\r\n        for (let folder of getContainerData()){\r\n            if(folder.parentRenderKey ===0){\r\n                folderDataRoot.push(folder)\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n            \r\n            \r\n            //console.log(currentObjects);\r\n            //console.log(treeData);\r\n            //console.log(currentObjects.flatten())\r\n        \r\n\r\n        \r\n        \r\n        this.state = {\r\n            data: {\r\n                core: {\r\n                    data: [\r\n                        { text: getModelName(), \r\n                        children: folderDataRoot, state: { opened: true }, \r\n                        root: true},\r\n                    ]\r\n                }\r\n            },\r\n            selectedVertex: null\r\n        }\r\n\r\n\r\n\r\n        if(showingVertPath === true){\r\n            /*\r\n            let highestLevel = getModelName();\r\n            let nextLevel = \"\";\r\n            let vertexOrEdge = \"\";\r\n            let actualObject = \"\";\r\n        \r\n            let b = 0;\r\n            //First, we need to actually determine where the vertex is\r\n            //Take a look at our container\r\n            for (let cont of folderData){\r\n                //Take a look at the children of the containers (arrows and such)\r\n                for (let treeDat of cont.children){\r\n                    //Why is the vertex folder coming up as undefined?????\r\n                    if(b === 0){\r\n                        //console.log(\"SECOND LAYER: \" + treeDat.children);\r\n                        for (let treeElement of treeDat.children){\r\n                            if ((treeElement.text === currentlySelectedObject.title || currentlySelectedObject.title === \"Unnamed Vertex\")){\r\n        \r\n                                nextLevel = cont.text;\r\n        \r\n                                vertexOrEdge = \"Vertices\";\r\n        \r\n                                actualObject = currentlySelectedObject.title;\r\n                            }\r\n                        }\r\n                        b = 1;\r\n                    }\r\n                    \r\n                }\r\n                someVertexPath = highestLevel +\"::\"+ nextLevel +\"::\"+ vertexOrEdge +\"::\"+ actualObject;\r\n            }\r\n            */\r\n\r\n            let highestLevel = getModelName();\r\n            let nextLevel = \"\";\r\n            let vertexOrEdge = \"\";\r\n            let actualObject = \"\";\r\n\r\n            let b = 0;\r\n            //First, we need to actually determine where the vertex is\r\n            //Take a look at our container\r\n            for (let cont of getContainerData()){\r\n                //console.log(\"below is folderData\")\r\n                //console.log(getContainerData())\r\n                //console.log(\"This is active test \". cont)\r\n                //console.log(\"folder text: \" + cont.text)\r\n                //Take a look at the children of the containers (arrows and such)\r\n                for (let treeDat of cont.children){\r\n                    //console.log(\"below is treeDat\")\r\n                    //console.log(treeDat)\r\n                    //console.log(\"treeDat text: \" + treeDat.text) \r\n                    //console.log(\"num of rkeys is:\", getTotalRenderKeys())\r\n                    //console.log(folderData)\r\n                    //Why is the vertex folder coming up as undefined?????\r\n                    //console.log(cont.children)\r\n                    if(b === 0){\r\n                        //console.log(\"SECOND LAYER: \" + treeDat.children);\r\n                        for (let treeElement of treeDat.children){\r\n                            //console.log(\"Vertices text: \" + treeElement)\r\n                                if ((treeElement.text === currentlySelectedObject.title)){\r\n                                    \r\n                                    nextLevel = cont.text;\r\n                                    \r\n                                    vertexOrEdge = \"Vertices\"\r\n                                    \r\n                                    actualObject = currentlySelectedObject.title\r\n\r\n                                    someVertexPath = highestLevel +\"::\"+ nextLevel +\"::\"+ vertexOrEdge +\"::\"+ actualObject;\r\n                                    b = 1;\r\n\r\n                                \r\n                                }\r\n\r\n                        }\r\n                        \r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        if (folderAltered === true){\r\n\r\n           // this.forceUpdate()\r\n\r\n            folderAltered = false\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //Function called when an object in treeview is clicked\r\n    handleElementSelect(e, data) {\r\n\r\n\r\n\r\n        //console.log(\"Selected Length: \" + data.selected.length)\r\n\r\n        // Try catch used to catch error whe selecting a treeview item with no data type eg. root\r\n        \r\n        try{\r\n            //console.log(\"Selected Data 1: \" + data.node.data)\r\n            //console.log(\"Selected type 1: \" + data.node.original.type)\r\n            //console.log(\"Selected text 1: \" + data.node.text)\r\n            //console.log(data.node)\r\n            //console.log(\"Selected Type 2: \" + data.node.data.type)\r\n            //console.log(\"Selected Name 2: \" + data.node.data.text)\r\n            //console.log(folderData);\r\n            //console.log(data.node.data)\r\n\r\n            \r\n\r\n            if(data.node.type === \"Vertex Folder\"){\r\n                //console.log(\"You clicked a vertex folder\")\r\n            }\r\n\r\n            else if(data.node.data.type === \"Folder\" || data.node.data.type === \"treeVertex\" ){\r\n                //console.log(\"Clicked Folder: \" + data.node.data.text)\r\n                //setNewRenderKey(data.node.data.renderKey)\r\n                setSelectedFolderKey(data.node.data.renderKey)\r\n                \r\n\r\n                //console.log(\"The render key is now \" + data.node.data.renderKey);\r\n\r\n\r\n            }\r\n\r\n            else if (data.node.data.type === \"Model\"){\r\n                //console.log(\"The selected model is: \" + data.node.data.text)\r\n                //console.log(\"The current folder is: \" + data.node.data.renderKey)\r\n                setNewModel(data.node.data.modelKey);\r\n                //console.log(\"The model key is now \" + getCurrentModel()); // there were issues here with camelCasing causing no modelKey to be selected- cooper\r\n                //setNewRenderKey(data.node.data.renderKey)\r\n                setNewRenderKey(data.node.data.renderKey); // automatically sets the renderkey to be the same as the models as this was causing issues - cooper\r\n                setSelectedFolderKey(data.node.data.renderKey)\r\n                //console.log(\"The render key is now \" + data.node.data.renderKey);\r\n                // Move everything away\r\n                for (let item of currentObjects.flatten()){\r\n                    if (item.typeName === \"Vertex\" && item.getModelKey() === getCurrentModel()){\r\n                        //console.log(\"Item is set as present\")\r\n                        item.setPresent();\r\n                    }\r\n\r\n                    else if (item.getModelKey() !== getCurrentModel() && item.typeName === \"Vertex\"){\r\n                        //console.log(\"Item is sent away\")\r\n                        item.setAway();\r\n                        //console.log(\"The item to not be rendered is\" + item.typeName);\r\n                    }\r\n                }\r\n            }\r\n            \r\n        //console.log(\"The data is: \" + data.node.data);\r\n\r\n            else if (data.selected.length === 1 && data.node.data !== null && data.node.data.type === undefined) {\r\n                let UUID = data.node.data.semanticIdentity.UUID;\r\n                //console.log(\"UUID: \" + UUID)\r\n                for (let vertex of currentObjects.flatten()) {\r\n                    if (vertex.semanticIdentity.UUID === UUID) {\r\n                        //setNewRenderKey(vertex.getRenderKey())\r\n                        //setNewModel(vertex.getModelKey())\r\n                        this.setState({\r\n                            \r\n                            selectedVertex: vertex\r\n                        });\r\n\r\n                        //The following is required to change canvas to the selected vertex's model preventing desync issues of tree and canvas - Lachlan\r\n                    \r\n                        setNewRenderKey(vertex.vertexRenderKey);\r\n                        setNewModel(vertex.vertexModelKey); \r\n                        setSelectedFolderKey(vertex.vertexRenderKey)\r\n                        \r\n                        for (let item of currentObjects.flatten()){\r\n                            if (item.typeName === \"Vertex\" && item.getModelKey() === getCurrentModel()){\r\n                                item.setPresent();\r\n                            }\r\n                            else if (item.getModelKey() !== getCurrentModel() && item.typeName === \"Vertex\"){\r\n                                item.setAway();\r\n                            }\r\n                        }\r\n                    \r\n\r\n                        this.props.setLeftMenu(this.state.selectedVertex);\r\n\r\n                        // Set the current render key to whatever object the person has clicked from\r\n                        // the tree view\r\n                        \r\n                        //console.log(\"The old render key is: \" + currentRenderKey);\r\n                        //this.currentRenderKey = this.state.selectedVertex.getRenderKey();\r\n                        //console.log(\"The new render key is: \" + currentRenderKey);\r\n                        \r\n\r\n                        //currentRenderKey = 1; \r\n                        //console.log(\"Render old key is \" + getCurrentRenderKey());\r\n                        //setNewRenderKey(this.state.selectedVertex.getRenderKey());\r\n                        //console.log(\"The new render key is : \" + getCurrentRenderKey());\r\n                        //currentRenderKey = 1;\r\n                        \r\n                        //console.log(\"The selected object is: \" + this.state.selectedVertex.getRenderKey())\r\n                    }\r\n                }\r\n                \r\n\r\n            } else {\r\n                this.setState({\r\n                    selectedVertex: null\r\n                });\r\n            }\r\n            \r\n\r\n            drawAll();\r\n        }\r\n        catch(e){\r\n            //console.log(e instanceof TypeError)\r\n            //console.log(\"If True,a null type error has been caught, If the selected object should be selectable, this is an issue\")\r\n        }\r\n\r\n        //If the user clicks the root folder       -Lachlan\r\n        try{\r\n            if(data.node.original.root === true){\r\n                //console.log(\"This is root\")\r\n                setSelectedFolderKey(0) //renderkey 0 will be used for root\r\n            }\r\n        }\r\n        catch(e){\r\n            //console.log(\"This is not root\")\r\n        }\r\n\r\n        //used to update the currently selected model/folders fields - Lachlan\r\n        if(getSelectedFolderKey() === 0){\r\n            document.getElementById(\"SelectedFolder\").value = \"Root\"\r\n        }\r\n        else{\r\n            \r\n        document.getElementById(\"SelectedFolder\").value = getContainerData().find(folder => { return folder.renderKey === getSelectedFolderKey()}).text\r\n        }\r\n        try{\r\n        document.getElementById(\"SelectedContainer\").value = getContainerData().find(folder => { return folder.renderKey === getCurrentRenderKey()}).text\r\n        document.getElementById(\"SelectedModel\").value = modelObjects.find(model => { return model.modelKey === getCurrentModel()}).text\r\n        //console.log(modelObjects)\r\n        }\r\n        catch(e){\r\n            console.log(e)\r\n        }\r\n    \r\n\r\n    }\r\n\r\n    handleContextMenu(){\r\n        console.log(\"CM triggered for tree\")\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const data = this.state.data;\r\n        //console.log(treeData)\r\n        //console.log(data)\r\n        /*\r\n        if (this.state.selectedObject !== null){\r\n            console.log(\"The old render key is: \" + currentRenderKey);\r\n            currentRenderKey = this.state.selectedObject.getRenderKey();\r\n            console.log(\"The new render key is: \" + currentRenderKey);\r\n        }\r\n        */\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <TreeView treeData={data} onChange={(e, data) => this.handleElementSelect(e, data)} className=\"treeview\" id=\"treeview\" draggable=\"true\" />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\nimport '../App.css';\r\nimport * as canvasDraw from \"./CanvasDraw\";\r\nimport * as fileManager from '../Serialisation/FileManager';\r\nimport {DropdownButton,Dropdown} from \"react-bootstrap\";\r\n\r\nimport {Canvas} from './Canvas';\r\nimport {LeftMenu, LeftMenuType, StringToLeftMenuType, Tool} from './LeftMenu';\r\n\r\n// Semantic domain editor\r\nimport SemanticDomainEditor from \"./SemanticDomainEditor\";\r\nimport {resetRows} from \"./SemanticDomainEditor\";\r\n\r\n//Adding folders to the tree view\r\nimport {handleAddFolder, handleDeleteModel, handleAddModel,handleRenameFolder, getSelectedFolderKey, handleRenameModel, handleAddVertex} from './ContainmentTree';\r\nimport { handleDeleteFolder } from './ContainmentTree';\r\n\r\nimport { showVertexPath } from './ContainmentTree';\r\nimport { someVertexPath } from './ContainmentTree';\r\nimport { ContextMenu } from './ContextMenu'\r\n\r\nimport iconNewFolder from \"../Resources/create_folder.svg\"\r\nimport iconDeleteFolder from \"../Resources/delete_folder.svg\"\r\nimport iconEditFolder from  \"../Resources/changeFolderName.svg\"\r\nimport iconNewModel from \"../Resources/NewModel.svg\"\r\nimport iconDeleteModel from \"../Resources/DeleteModel.svg\"\r\nimport iconEditModel from \"../Resources/editModel.svg\"\r\nimport iconaddVertex from \"../Resources/createVertex.svg\"\r\n\r\n\r\nexport const version = 1;\r\n\r\nlet folderName = \"Unnamed Folder\";\r\n\r\nexport class MainProgramClass extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            zoomLevel: 200,\r\n            drawMode: Tool.Vertex,\r\n            menu: LeftMenuType.TreeView,\r\n            selectedObject: null,\r\n        };\r\n\r\n        this.setMode = this.setMode.bind(this);\r\n        this.setLeftMenu = this.setLeftMenu.bind(this);\r\n        this.setLeftMenuToTree = this.setLeftMenuToTree.bind(this);\r\n        this.semanticTableEnabled = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setMode(Tool.Select);\r\n        console.log(\"Mounted\");\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let div = document.getElementById(prevState.SelectedTool);\r\n\r\n        if (div !== null) {\r\n            div.style.backgroundColor = \"#FFFFFF\";\r\n        }\r\n\r\n        div = document.getElementById(this.state.SelectedTool);\r\n\r\n        div.style.backgroundColor = \"#CFFFFF\";\r\n\r\n        //console.log(\"Mode set to: \" + this.state.SelectedTool);\r\n\r\n        // This bit of code here updates the path for whatever vertex is being updated\r\n        if (this.state.selectedObject !== null){\r\n            if (this.state.selectedObject.typeName === \"Vertex\"){\r\n                showVertexPath(this.state.selectedObject)\r\n                this.state.selectedObject.setPath(someVertexPath)\r\n            }\r\n        }\r\n\r\n        \r\n        \r\n    }\r\n\r\n\r\n\r\n    updateFolderName = () => {\r\n        folderName = document.getElementById(\"FolderName\").value\r\n    }\r\n\r\n    //The following add/delete functions Now reload the treeview on add/deleteing folders and models - Lachlan\r\n    //The async function is due to javascript executing SetLeftMenuToTree without waiting for handleadd/delete to manipulate data for the new tree - LAchlan\r\n    addFolder = () => {\r\n        //handleAddFolder({modelName:document.getElementById(\"FolderName\").value});\r\n        //ContainmentTree.state = ContainmentTree.state;\r\n        //LeftMenu.state = LeftMenu.state;\r\n        (async() => {\r\n        await handleAddFolder(folderName,getSelectedFolderKey());\r\n        this.setLeftMenuToTree();\r\n        })();\r\n        \r\n    }\r\n\r\n    deleteFolder = () => {\r\n        (async() => {\r\n            await handleDeleteFolder(getSelectedFolderKey());\r\n            this.setLeftMenuToTree();\r\n            })();\r\n    }\r\n\r\n    editFolderName = () => {\r\n        (async() => {\r\n            await handleRenameFolder(folderName,getSelectedFolderKey());\r\n            this.setLeftMenuToTree();\r\n        })();\r\n    }\r\n\r\n    addVertex = () =>{\r\n        (async() => {\r\n            await handleAddVertex(folderName,getSelectedFolderKey());\r\n            this.setLeftMenuToTree();\r\n        })();\r\n    }\r\n\r\n    addModel = () => {\r\n        (async() => {\r\n            await handleAddModel(folderName);\r\n            this.setLeftMenuToTree();\r\n            })();\r\n    }\r\n\r\n    deleteModel = () => {\r\n        \r\n        (async() => {\r\n            await handleDeleteModel(canvasDraw.getCurrentModel());\r\n            this.setLeftMenuToTree();\r\n            })();\r\n    }\r\n\r\n    editModelName = () => {\r\n        (async() => {\r\n            await handleRenameModel(folderName,canvasDraw.getCurrentModel());\r\n            this.setLeftMenuToTree();\r\n        })();\r\n    }\r\n\r\n    zoom = (type) => {\r\n        let cZoom = this.state.zoomLevel;\r\n        if (type === \"+\") {\r\n            if (this.state.zoomLevel < 500) {\r\n                this.setState({zoomLevel:cZoom += 25});\r\n                canvasDraw.setZoom(cZoom);\r\n            }\r\n        } else if (type === \"-\") {\r\n            if (this.state.zoomLevel > 100) {\r\n                this.setState({zoomLevel:cZoom -= 25});\r\n                canvasDraw.setZoom(cZoom);\r\n            }\r\n\r\n        } else {\r\n            console.log(\"Invalid Zoom Type\")\r\n        }\r\n    };\r\n\r\n    setMode(mode) {\r\n\r\n        if(mode === Tool.Visibility || mode === Tool.Edge || mode === Tool.Specialisation){\r\n            this.setState({drawMode: \"Arrow\"})\r\n        }else if (mode === Tool.Vertex){\r\n            this.setState({drawMode: \"Vertex\"})\r\n        }else if (mode === Tool.Select){\r\n            this.setState({drawMode: \"Select\"})\r\n        } else if (mode === Tool.Artifact) {\r\n            this.setState({ drawMode: \"Artifact\" })\r\n        } else if (mode === Tool.Container) {\r\n            this.setState({ drawMode: \"Container\" })\r\n        }\r\n\r\n        //console.log(Tool[mode]);\r\n\r\n        this.setState({SelectedTool: Tool[mode]});\r\n\r\n        canvasDraw.setArrowType(mode)\r\n\r\n    };\r\n\r\n    // chooses which left hand menu to display, based on the selected item\r\n    setLeftMenu(nearestObject, ctrl = false, OP = []) {\r\n        \r\n        if (OP !== null){\r\n            for(let i = 0;i<OP.length;i++){\r\n                OP[i].setSelected(false); //visually deselects elements\r\n            }\r\n        }\r\n        // checks if that specific object was clicked\r\n        // if it wasn't then deselect it\r\n        // i.e. determines if objects are selected or not\r\n        if (this.state.selectedObject !== null && ctrl === false) {\r\n            this.state.selectedObject.setSelected(false);\r\n            \r\n        }\r\n\r\n        // check if the nearest object was too far away or didnt exist\r\n        if (nearestObject === null) {\r\n            this.setState({\r\n                menu: LeftMenuType.TreeView,\r\n                selectedObject: null,\r\n            });\r\n\r\n        }\r\n\r\n        // if the selected object has a left menu,\r\n        else if (StringToLeftMenuType[nearestObject.typeName] !== null) {\r\n            this.setState({\r\n                menu: nearestObject.typeName,\r\n                selectedObject: nearestObject\r\n            });\r\n            //console.log(\"below should be selectedObject\");\r\n            //console.log(this.state.selectedObject)\r\n            nearestObject.setSelected(true);\r\n        } else {\r\n            if (this.state.selectedObject !== null) {\r\n                canvasDraw.drawAll();\r\n            }\r\n\r\n            this.setState({\r\n                menu: LeftMenuType.TreeView,\r\n                selectedObject: null\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    //Function for setting left menu to tree\r\n    //This function serves as a direct way to \"statechange\" the treeview menu - Lachlan\r\n    setLeftMenuToTree(){\r\n        \r\n        if (this.state.selectedObject !== null) {\r\n            \r\n            canvasDraw.drawAll();\r\n        }\r\n        this.setState({\r\n            \r\n            menu: LeftMenuType.None,\r\n        });\r\n        this.setState({\r\n            menu: LeftMenuType.TreeView,\r\n            selectedObject: null\r\n            \r\n        });\r\n        console.log(\"set left menu To Tree enacted\")\r\n        \r\n    }\r\n\r\n    setModelName = () => {\r\n        this.setState({modelName:document.getElementById(\"ModelName\").value})\r\n    };\r\n\r\n    // Code for file uploading\r\n    // If you know how to move it elsewhere to clean up this file\r\n    // Please move it to src/DataStructures/FileManager.js or similar\r\n    showFile = () => {\r\n        if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n            try {\r\n                let file = document.querySelector('input[type=file]').files[0];\r\n\r\n                let reader = new FileReader();\r\n                reader.readAsText(file);\r\n                reader.onload = function () {\r\n                    fileManager.open(reader.result)\r\n                }\r\n            }catch(e){\r\n                alert(e.text()+\" did you select a file?\")\r\n            }\r\n        } else {\r\n            alert(\"Your browser is too old to support HTML5 File API\");\r\n        }\r\n    };\r\n\r\n    // Used to enable/disable the semantic domain editor\r\n    toggleSemanticDomainState = () => {\r\n        if (this.semanticTableEnabled) {\r\n            this.semanticTableEnabled = false;\r\n            canvasDraw.drawAll();\r\n            this.setState(this.state);\r\n            console.log(\"Semantic Domain disabled\");\r\n        } else {\r\n            this.semanticTableEnabled = true;\r\n            resetRows();\r\n            this.setState(this.state);\r\n            console.log(\"Semantic Domain enabled\");\r\n        }\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        let GUI =\r\n        <><ContextMenu setLeftMenuToTree={this.setLeftMenuToTree} /><div className=\"Program\">\r\n                <div className={this.semanticTableEnabled ? \"SemanticDomain\" : \"hidden\"}>\r\n                    <SemanticDomainEditor />\r\n                </div>\r\n\r\n                <div className=\"TopMenus\">\r\n\r\n                    <DropdownButton variant=\"Primary\" id=\"File-Menu\" title=\"File\" size=\"lg\">\r\n\r\n                        <Dropdown.Item>\r\n                            <div className=\"TopBar\">\r\n                                <button id=\"file\" onClick={() => canvasDraw.newFile()}>New File</button>\r\n                            </div>\r\n                        </Dropdown.Item>\r\n\r\n                        <Dropdown.Item>\r\n                            <div className=\"TopBar\">\r\n                                <button id=\"downloader\" onClick={() => canvasDraw.getDownload()} download=\"image.png\">Export as .png</button>\r\n                            </div>\r\n                        </Dropdown.Item>\r\n\r\n\r\n                        <div className=\"TopBar\">\r\n                            <label>Load</label>\r\n                            <input type=\"file\" id=\"File-Select\" onChange={this.showFile} />\r\n                        </div>\r\n\r\n\r\n                        <Dropdown.Item>\r\n                            <div className=\"TopBar\">\r\n                                <button id=\"json-downloader\" onClick={() => fileManager.save()}>Save (as Json)</button>\r\n                            </div>\r\n                        </Dropdown.Item>\r\n\r\n                    </DropdownButton>\r\n\r\n                    <div className=\"TopBar\" onClick={() => this.toggleSemanticDomainState()}>\r\n                        Semantic Editor\r\n                    </div>\r\n\r\n                    <input className=\"TopBarSearch\" id=\"ModelName\" type=\"text\" name=\"modelName\" placeholder=\"Graph Name\" onChange={(e) => this.setModelName(e)} />\r\n                    <input className=\"TopBarSearch\" id=\"FolderName\" type=\"text\" name=\"folderName\" placeholder=\"New Container/Model\" onChange={(e) => this.updateFolderName(e)} />\r\n                    {/*<div className=\"TopBarIcon\">&nbsp;</div>*/}\r\n                    {/*The + and - are backwards on purpose here*/}\r\n                    <div className=\"TopBarIcon\" onClick={() => this.zoom('-')}> - </div>\r\n\r\n                    {/*<div className=\"TopBarLabel\"> {this.state.zoomLevel}% </div>*/}\r\n\r\n                    <div className=\"TopBarIcon\" onClick={() => this.zoom('+')}> + </div>\r\n\r\n\r\n                    {/*<div className=\"TopBarIdentifier\">Rows:&nbsp;</div>*/}\r\n                    {/*<input className=\"TopBarSelector\" style={{\"border-left\": \"0px\"}} type=\"number\" id = \"canvasRows\" defaultValue=\"70\" min=\"0\" max=\"105\" onChange={() => canvasDraw.updateRows()}/>*/}\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.addFolder()}><img src={iconNewFolder} alt=\"Add Container\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.deleteFolder()}><img src={iconDeleteFolder} alt=\"Delete Container\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.editFolderName()}><img src={iconEditFolder} alt=\"Edit Container\" /></div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.addVertex()}><img src={iconaddVertex} alt=\"Add Vertex\" /></div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.addModel()}><img src={iconNewModel} alt=\"Add Model\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.deleteModel()}><img src={iconDeleteModel} alt=\"Delete Model\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.editModelName()}><img src={iconEditModel} alt=\"Edit Model\" /></div>\r\n\r\n\r\n\r\n                </div>\r\n\r\n                <div className=\"LowerPanel\" id= \"LowerPanel\">\r\n                    <LeftMenu setMode={this.setMode} setLeftMenu={this.setLeftMenu} mainState={this.state} className=\"LeftMenus\" />\r\n                    {/*following 3 classes are temporary for displaying currently selected model and container(renderKey) and folder(selectedFolderKey) */}\r\n                    <input className=\"SelectedFolder\" id=\"SelectedFolder\" type=\"text\" name=\"selectedFolder\" readonly='readonly' />\r\n                    <input className=\"SelectedContainer\" id=\"SelectedContainer\" type=\"text\" name=\"selectedContainer\" readonly='readonly' />\r\n                    <input className=\"SelectedModel\" id=\"SelectedModel\" type=\"text\" name=\"selectedModel\" readonly='readonly' />\r\n\r\n                    <div className=\"Canvas\" id = \"Canvas\">\r\n                        <Canvas setLeftMenu={this.setLeftMenu} setMode={this.setMode} mainState={this.state} />\r\n                    </div>\r\n                </div>\r\n            </div></>;\r\n        return GUI\r\n    }\r\n}","import { ClickAwayListener } from '@material-ui/core';\r\nimport React from 'react';\r\nimport {getFolderData,setFolderData,getModelData,getSelectedFolderKey,setSelectedFolderKey,handleModelRebase,handleRenameFolder, handleAddModel, getModelNameFromKey, folderData, modelObjects} from \"./ContainmentTree\"\r\nimport {getCurrentRenderKey, setNewRenderKey, getCurrentModel, setNewModel, findIntersected, getGraphXYFromMouseEvent, getObjectFromUUID, getCurrentObjects,setCurrentObjects,\r\n    linkContainer,updateLinkedContainers, currentObjects, drawAll} from \"./CanvasDraw\";\r\nimport {setLeftMenuToTree} from \"./LeftMenu\"\r\nimport { ContactsOutlined, LocalConvenienceStoreOutlined } from '@material-ui/icons';\r\nimport {getSemanticIdentity} from \"../DataStructures/Vertex\"\r\nimport {handleAddVertex, handleDeleteVertex, getVertexData} from \"./ContainmentTree\";\r\nlet rightClickedItem = \"Default\"; //Name of the right clicked item where \"Default\" is a non-object such as empty canvas space\r\nlet rightClickedItemType = \"None\"\r\nlet rightClickedItemKey = 0; // Identifying key of selected item needed to use relating methods eg. selectedFolderKey, ModelKey,VertexKey.\r\nlet menuType = \"Default\"; //Which menu type to return based on the selected item and what operations are available to it\r\nlet rightClickedObject; // the canvas object which was right clicked\r\n\r\n\r\n\r\n//Right click menu component used to access certain function of program\r\nexport class ContextMenu extends React.Component {\r\n    constructor(props){ // added the constructer to drag props in from MainView class (setLeftMenuToTree function)\r\n        super(props);\r\n        \r\n    }\r\n    \r\n    \r\n    state = {\r\n        xPos: \"0px\",\r\n        yPos: \"0px\",\r\n        showMenu: false\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"click\", this.handleClick);\r\n        document.addEventListener(\"contextmenu\", this.handleContextMenu);\r\n        document.addEventListener(\"keypress\", this.handleKey);\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"click\", this.handleClick);\r\n        document.removeEventListener(\"contextmenu\", this.handleContextMenu);\r\n        document.removeEventListener(\"keypress\", this.handleKey);\r\n    }\r\n\r\n    //The handle click method will check which option has been clicked and call the relevant method\r\n    handleClick = (e) => {\r\n        //ignore clicks if context menu closed\r\n        if (this.state.showMenu) {\r\n            //console.log(e.target.id)\r\n            \r\n            //If Move model was selected, create a new context menu with available folders\r\n            if(e.target.id === \"MoveModel\"){\r\n                menuType = \"MoveModel\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(menuType === 'MoveModel' && e.target.id.includes(\"Folder\")){\r\n                let newFolderKey = e.target.id.replace(\"Folder\",'')\r\n                //console.log(newFolderKey) \r\n                handleModelRebase(rightClickedItemKey,parseInt(newFolderKey));\r\n                console.log(\"model \", rightClickedItemKey, \" moved to folder id \",newFolderKey)\r\n                this.setState({showMenu: false})\r\n                this.props.setLeftMenuToTree();\r\n            }\r\n            else if(e.target.id === \"Rename\"){\r\n                menuType = \"Rename\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"AddVertex\"){\r\n                menuType = \"AddVertex\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"DeleteVertex\"){\r\n                for(let vertex of getVertexData()){\r\n                    if(vertex.renderKey === rightClickedItemKey){\r\n                        handleDeleteVertex(vertex.semanticIdentity.UUID)\r\n                    }\r\n                }\r\n                this.setState({showMenu: false})\r\n                this.props.setLeftMenuToTree();\r\n            }\r\n            else if(e.target.id === \"RenameBox\" || e.target.id === \"CMSelected\"){ //This prevents the context menu closing when certain targets are clicked\r\n            }\r\n            else if(e.target.id === \"VertexNameBox\" || e.target.id === \"CMSelected\"){ //This prevents the context menu closing when certain targets are clicked\r\n            }\r\n            else if(e.target.id === \"Create-Graph\"){\r\n                menuType = \"AddContainerModel\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(menuType === 'AddContainerModel' && e.target.id.includes(\"Folder\")){\r\n                console.log(rightClickedObject)  \r\n                let newFolderKey = e.target.id.replace(\"Folder\",'')\r\n                handleAddModel(rightClickedObject.title,parseInt(newFolderKey),rightClickedObject.semanticIdentity)\r\n                this.props.setLeftMenuToTree();\r\n                this.setState({showMenu: false})\r\n            }\r\n            else if(e.target.id === \"LinkContainer\"){\r\n                menuType = \"LinkContainer\";\r\n                this.setState({showMenu: true})\r\n                console.log(getCurrentObjects().rootVertices)\r\n            }\r\n            else if(menuType === 'LinkContainer' && e.target.id.includes(\"Vertex\")){\r\n                console.log(\"linking semantic\")  \r\n                let baseUUID = e.target.id.replace(\"Vertex\",'');\r\n                let mirrorUUID = rightClickedObject.semanticIdentity.UUID;\r\n                linkContainer(baseUUID,mirrorUUID)\r\n                this.props.setLeftMenuToTree();\r\n\r\n                this.setState({showMenu: false})\r\n            }\r\n            else if(e.target.id === \"Bi-Nav\"){\r\n                menuType = \"Bi-Nav\";\r\n                this.setState({showMenu: true})\r\n\r\n            }\r\n            else if(menuType === 'Bi-Nav' && e.target.id.includes(\"Nav\")){\r\n                console.log(\"navigating\")  \r\n                let keys = e.target.id.replace(\"Nav\",'');\r\n                console.log(keys)\r\n\r\n\r\n                setNewModel(parseInt(keys[0]));\r\n                setNewRenderKey(keys[1]); // automatically sets the renderkey to be the same as the models as this was causing issues - cooper\r\n                setSelectedFolderKey(keys[1]);\r\n                for (let item of currentObjects.flatten()){\r\n                    if (item.typeName === \"Vertex\" && item.getModelKey() === getCurrentModel()){\r\n                        item.setPresent();\r\n                    }\r\n                    else if (item.getModelKey() !== getCurrentModel() && item.typeName === \"Vertex\"){\r\n                        item.setAway();\r\n                    }\r\n                }\r\n                drawAll();\r\n                console.log(getCurrentModel(),getCurrentRenderKey())\r\n                this.props.setLeftMenuToTree();\r\n\r\n\r\n                this.setState({showMenu: false})\r\n            }\r\n\r\n            \r\n            else{this.setState({ showMenu: false });}\r\n            \r\n        }\r\n    }\r\n\r\n    handleKey = (e) => {\r\n        if(e.key === 'Enter'){\r\n            if(menuType === \"Rename\"){\r\n                let newName = document.getElementById(\"RenameBox\").value\r\n                handleRenameFolder(newName,rightClickedItemKey)\r\n                console.log(\"menu change\")\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){ //Not sure why theres an error here as it performs the method, then says the method doesnt exists, doesnt trigger on other uses of method either.-Lachlan\r\n                    console.log(e)\r\n                }\r\n                console.log(\"menu change fin\")\r\n                this.setState({ showMenu: false })\r\n            }\r\n            else if(menuType === \"AddVertex\"){\r\n                \r\n                let vertexName = document.getElementById(\"VertexNameBox\").value;\r\n                handleAddVertex(vertexName, getSelectedFolderKey());\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){\r\n                    console.log(e);\r\n                }\r\n                this.setState({showMenu: false});\r\n            }\r\n        }\r\n        /*if(e.key === 'Enter'){\r\n            console.log(\"enter pressed\")\r\n        }\r\n        */\r\n    }\r\n\r\n    \r\n    handleContextMenu = (e) => {\r\n        e.preventDefault();//prevent default stops the regular contextmenu from appearing\r\n\r\n        /*as alot of the \"data\" is in the back end and not in the html element displayed,\r\n         we need to simulate a left click to actually select what were right clicking on in the background \r\n         */\r\n        e.target.click();\r\n\r\n        menuType = \"Default\"; //reset the menu type\r\n        rightClickedItem = \"Default\" //reset the selected item\r\n        rightClickedItemKey = 0 //reset the index\r\n        rightClickedObject = null; // reset the object\r\n        \r\n\r\n        //console.log(e.target.className)\r\n\r\n        //If target is tree node\r\n        if(e.target.className === \"jstree-anchor jstree-hovered jstree-clicked\"){\r\n            //console.log(\"clicked a tree object\")\r\n            //if target is existing folder, load the folder menu\r\n            if(e.target.text.includes(\"📁\")){\r\n                for(let folder of getFolderData()){\r\n                    if(e.target.text === folder.text){\r\n                        //console.log(\"matching folder found\")\r\n                        menuType = \"Folder\"\r\n                        rightClickedItem = e.target.text;\r\n                        rightClickedItemKey = getSelectedFolderKey();\r\n                    }\r\n                }\r\n            }\r\n\r\n            //if target is existing model, load model menu\r\n            if(e.target.text.includes(\"📈\")){\r\n                for(let model of getModelData()){\r\n                    if(e.target.text === model.text){\r\n                        //console.log(\"matching model found\")\r\n                        menuType = \"Model\"\r\n                        rightClickedItem = e.target.text;\r\n                        rightClickedItemKey = getCurrentModel();\r\n                    }\r\n                }\r\n            }\r\n            //if target is existing vertex load vertex menu\r\n            if(e.target.text.includes(\"🟧\" || \"📂\")){\r\n                for(let vertex of getVertexData()){\r\n                    if(e.target.text === vertex.text){\r\n                        menuType = \"Vertex\"\r\n                        rightClickedObject = vertex;\r\n                        rightClickedItem = e.target.text;\r\n                        rightClickedItemKey = getSelectedFolderKey();\r\n\r\n                    }\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        \r\n        // if target exists within the canvas\r\n        if(e.target.id ===\"drawCanvas\"){\r\n            let position = getGraphXYFromMouseEvent(e);\r\n            let x = position[0]; let y = position[1];\r\n            rightClickedObject = findIntersected(x, y);\r\n            if(rightClickedObject !== null){\r\n                if(rightClickedObject.typeName === \"Vertex\"){\r\n                    rightClickedItem = rightClickedObject.title\r\n                    if(rightClickedObject.isContainer === true){\r\n                        menuType = \"Container\"\r\n                    }\r\n                    else{\r\n                        menuType = \"CanvasVertex\"\r\n                    }\r\n                    \r\n                }\r\n                else if(rightClickedObject.typeName === \"Arrow\"){\r\n                    let source = getObjectFromUUID(rightClickedObject.sourceVertexUUID);\r\n                    let dest = getObjectFromUUID(rightClickedObject.destVertexUUID);\r\n                    let sourceName = source.title;\r\n                    let destName = dest.title;\r\n                    rightClickedItem = \"Arrow from \" + sourceName + \" to \" + destName\r\n                    menuType = \"Arrow\"\r\n                }\r\n            }\r\n            \r\n        }\r\n        this.setState({\r\n            xPos: `${e.pageX}px`,\r\n            yPos: `${e.pageY}px`,\r\n            showMenu: true,\r\n          });\r\n        \r\n    };\r\n    \r\n\r\n    render() {\r\n        const { showMenu, yPos, xPos } = this.state;\r\n        if (showMenu){\r\n            if(menuType === \"Default\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\">Default</div>   \r\n\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Folder\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"><b>{rightClickedItem}</b></div>   \r\n                    <div className=\"CMitem\" id=\"Rename\"> Rename</div>\r\n                    <div className=\"CMitem\" id=\"AddVertex\"> Add Vertex</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Model\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <div className=\"CMitem\" id=\"Navigate\"> Navigate (not implemented) </div>\r\n                    <div className=\"CMitem\" id=\"MoveModel\"> Move To </div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"MoveModel\"){\r\n\r\n                let renderedOutput = getFolderData().map(item => <div className=\"CMitem\" id={'Folder'+ item.renderKey} key={item.text}> {item.text} </div>);\r\n\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> Move \"<b>{rightClickedItem}</b>\" To:</div>   \r\n                    <div>{renderedOutput}</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Rename\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"RenameBox\" type=\"text\" name=\"renameItem\" placeholder='New Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"AddVertex\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"VertexNameBox\" type=\"text\" name=\"nameVertex\" placeholder='Vertex Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Vertex\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>\r\n                    <div className=\"CMitem\" id=\"Bi-Nav\"> Naviagte </div>   \r\n                    <div className=\"CMitem\" id=\"DeleteVertex\"> Delete Vertex </div>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            else if(menuType === \"Arrow\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <div className=\"CMitem\" id=\"Auto-Layout\"> Auto-Layout option (not implemented) </div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"CanvasVertex\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <div className=\"CMitem\" id=\"Auto-Layout\"> Auto-Layout option (not implemented) </div>\r\n                    <div className=\"CMitem\" id=\"Bi-Nav\"> Naviagte </div>\r\n                    </div>\r\n                )\r\n            }\r\n           \r\n            else if(menuType === \"Container\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>\r\n                    <div className=\"CMitem\" id=\"Create-Graph\"> Create Graph </div>   \r\n                    <div className=\"CMitem\" id=\"LinkContainer\"> Link Container From </div> \r\n                    <div className=\"CMitem\" id=\"Bi-Nav\"> Goto other occurences </div> \r\n                    <div className=\"CMitem\" id=\"Auto-Layout\"> Auto-Layout option (not implemented) </div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"LinkContainer\"){\r\n                console.log(getCurrentObjects().rootVertices)\r\n                let vertices = Array.from(getCurrentObjects().rootVertices)\r\n                console.log(vertices)\r\n                for(let i in vertices){\r\n                    if (vertices[i].vertex.isContainer === false){\r\n                        vertices.splice(i,1)\r\n                    }\r\n                }\r\n                console.log(vertices)\r\n                \r\n                let renderedOutput = vertices.map(item => <div className=\"CMitem\" id={'Vertex'+ item.vertex.semanticIdentity.UUID} key={'Vertex'+ item.vertex.semanticIdentity.UUID + \" \" + item.vertex.awayx}> {getModelNameFromKey(item.vertex.vertexModelKey)} / {item.vertex.title} </div>);\r\n                \r\n                console.log(renderedOutput)\r\n\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> Link <b>{rightClickedItem}</b> from: </div>\r\n                    <div>{renderedOutput}</div>\r\n                    </div>\r\n                    \r\n                )\r\n            }\r\n            else if(menuType === \"AddContainerModel\"){\r\n                \r\n                let renderedOutput = getFolderData().map(item => <div className=\"CMitem\" id={'Folder'+ item.renderKey} key={item.text}> {item.text} </div>);\r\n\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> Create Model of <b>{rightClickedItem}</b> in:</div>   \r\n                    <div>{renderedOutput}</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Bi-Nav\"){\r\n\r\n                console.log(getCurrentObjects().rootVertices);\r\n                let matchingContainers = [];\r\n                let matchingModels = [];\r\n                let matchingUUID = 0;\r\n\r\n                matchingUUID = rightClickedObject.originalUUID;\r\n                //If undefined, then a treeview vertex is selected\r\n                if(matchingUUID === undefined){\r\n                    matchingUUID = rightClickedObject.semanticIdentity.UUID\r\n                }\r\n                console.log(\"UUID stuff\")\r\n                console.log(matchingUUID)\r\n                console.log(rightClickedObject.semanticIdentity.UUID)\r\n\r\n\r\n                for(let vert of getCurrentObjects().rootVertices){\r\n                    if(vert.vertex.originalUUID === matchingUUID){\r\n                        matchingContainers.push(vert)\r\n                    }\r\n                }\r\n                for(let model of getModelData()){\r\n                    if(model.semanticIdentity.UUID === matchingUUID){\r\n                        matchingModels.push(model)\r\n                    }\r\n                }\r\n\r\n                console.log(matchingContainers)\r\n                let renderedContainers = matchingContainers.map(item => <div className=\"CMitem\" id={'Nav'+ item.vertex.vertexModelKey + \" \" + item.vertex.vertexRenderKey} key={'Nav'+ item.vertex.semanticIdentity.UUID + \" \" + item.vertex.awayx}> {getModelNameFromKey(item.vertex.vertexModelKey)} / {item.vertex.title} </div>)\r\n                let renderedModels = matchingModels.map(item => <div className=\"CMitem\" id={'Nav'+ item.modelKey + \" \" + item.renderKey} key={'Nav'+ item.semanticIdentity.UUID}> {item.text}</div>)\r\n                \r\n\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> also appears at:</div>   \r\n                    <div>{renderedContainers}</div>\r\n                    <div>{renderedModels}</div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    else return null;\r\n  }\r\n}\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\n\r\nimport './App.css';\r\nimport  {ContextMenu} from \"./UIElements/ContextMenu\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n \r\n        <div className=\"App\">\r\n            <div id='program'>\r\n            </div>\r\n        </div>\r\n\r\n  );\r\n\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// Resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as ServiceWorker from './ServiceWorker';\r\nimport {MainProgramClass} from './UIElements/MainView';\r\nimport {assignElement} from \"./UIElements/CanvasDraw\";\r\nimport {getSaveData} from \"./Serialisation/FileManager\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nReactDOM.render(<MainProgramClass />,document.getElementById(\"program\"));\r\nassignElement(\"drawCanvas\");\r\n\r\n// save to server every interval\r\n\r\n\r\n//setInterval(() => {\r\n//    let data = JSON.stringify(getSaveData());\r\n//\r\n//    fetch('http://localhost:8080/serialisation/save',{\r\n//        method:'POST',\r\n//        headers: {\r\n//            'Accept': '*/*',\r\n//            'Content-Type': 'application/json',\r\n//            'Content-Length':data.length\r\n//        },\r\n//        body: data\r\n//    });\r\n//},60000);\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nServiceWorker.unregister();\r\n\r\n"],"sourceRoot":""}