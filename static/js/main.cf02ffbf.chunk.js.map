{"version":3,"sources":["Resources/vertex.svg","Resources/edge.svg","Resources/select.svg","Resources/specialisation.svg","Resources/visibility.svg","Resources/redo.svg","Resources/undo.svg","Resources/help.svg","App.js","ServiceWorker.js","DataStructures/SemanticIdentity.js","DataStructures/Graph.js","Config.js","UIElements/SemanticDomainEditor.js","DataStructures/ArrowProperties.js","DataStructures/Cardinality.js","DataStructures/EdgeEnd.js","UIElements/LeftMenu.js","DataStructures/Arrow.js","Serialisation/NewFileManager.js","UIElements/ContainmentTree.js","DataStructures/Vertex.js","UIElements/Canvas.js","UIElements/CanvasDraw.js","UIElements/ContextMenu.js","UIElements/MainView.js","index.js"],"names":["module","exports","App","className","id","Boolean","window","location","hostname","match","SemanticIdentity","name","description","abbreviation","shortAbbreviation","UUID","translations","this","typeName","undefined","replace","c","crypto","getRandomValues","Uint8Array","toString","VertexNode","vertex","children","Set","cleanObjectPath","vertexObjectPath","node","add","traversedVertices","isRemoved","has","delete","child","remove","recursive","semanticIdentity","getVertexNode","flattenedArray","childNode","push","flatten","flattenVertexNodes","returnOption","parsedContainerKey","ArrowChildren","VertexChildren","i","currentObjects","length","getContainerKey","title","setVertexTreePath","tempTreeObj","text","data","containerKey","graphKey","getGraphKey","state","opened","type","ourSourceEnd","pathData","ourDestEnd","textSource","textDest","j","someObject","treeAppearanceSwitches","getNavigable","getAggregation","arrowIcon","packageTitle","treePath","ArrowEdge","flattenedVertexNodes","arrow","updateVertices","sourceVertexNodeObject","destVertexNodeObject","isSourceFound","sourceVertexUUID","isDestFound","destVertexUUID","vertexNode","Graph","vertexArrayFlattened","arrowArrayFlattened","rootVertices","arrows","objects","Array","isArray","object","addVertex","addArrow","originalUUID","newTitle","originalVertex","sID","getArrowEdge","destVertexNode","sourceVertexNode","isAnotherRoot","sourceVertex","console","error","returnArray","destVertex","newobject","isEquivalentArrow","isArrowWithSameSource","isEquivalentSource","isEquivalentDest","removeFromChildren","rootNode","arrowEdge","doFlattenVertices","doFlattenArrows","verticesSet","arrowsSet","from","concat","rows","setRows","setColumns","textInput","React","createRef","translationColumns","onSave","workbook","xlsx","writeBuffer","then","buffer","saveAs","Blob","getRowId","row","styles","input","fontSize","width","label","container","maxWidth","selector","height","StartEditActionSelector","withStyles","props","defaultAction","changeAction","classes","Grid","alignItems","Typography","Select","onChange","e","target","value","OutlinedInput","labelWidth","margin","MenuItem","SelectTextChecker","isSelectText","changeSelectText","FormControlLabel","control","Checkbox","checked","color","EditPropsPanel","FocusableCell","onClick","restProps","Cell","tabIndex","onFocus","useState","createColumns","columns","setColumnsRet","columnName","editingEnabled","editingStateColumnExtensions","generatedRows","setRowsRet","wordWrapEnabled","tableColumnExtensions","startEditAction","setStartEditAction","selectTextOnEditStart","setSelectTextOnEditStart","exporterRef","useRef","startExport","useCallback","current","exportGrid","Paper","InputGroup","FormControl","ref","placeholder","aria-label","aria-describedby","Append","Button","variant","updateColumns","addColumn","splice","indexOf","removeColumn","onCommitChanges","changedRows","added","changed","deleted","startingAddedId","map","index","currentObjectsFlattened","treeVert","getVertexData","updateChangedObject","o","sourceEdgeEnd","destEdgeEnd","updateChangedObjects","deletedSet","filter","columnExtensions","cellComponent","getRowForObject","translation","columnNames","set","setTranslationColumns","newColumns","EdgeEnd","EdgeEndToString","StringToEdgeEnd","LineColour","LineColourToStringName","StringNameToLineColour","LineType","LineTypeToString","StringToLineType","Cardinality","lowerBound","upperBound","attachedToUUID","isVisible","numLowerBound","numUpperBound","getDescription","lower","upper","headType","ArrowProps","cardinality","edgeEndContainerKey","getCurrentContainerKey","edgeEndGraphKey","getCurrentGraph","key","visibility","canvasContext","points","strokeColour","fillColour","strokeStyle","fillStyle","beginPath","moveTo","X","Y","lineTo","closePath","fill","stroke","x","y","angle","lineColour","angleFromLine","Math","PI","angleInverted","arrowPoints","cos","sin","drawLines","sideLength","deg30","trianglePoints","deg20","diamondPoints","drawArrowEnd","drawTriangleEnd","drawDiamondEnd","log","newType","LeftMenuType","TreeView","Vertex","Arrow","Artifact","Container","LeftMenuTypeToString","StringToLeftMenuType","Tool","Visibility","Edge","Specialisation","LeftMenu","getVertexColour","selectedObject","getColour","setVertexColour","colour","setColour","hex","canvasDraw","deleteTitle","setState","getMenu","leftMenuContents","toolbar","setMode","src","iconSelect","alt","onKeyDown","onKeyPressed","iconVertex","iconEdge","iconSpecialisation","iconVisibility","menu","setLeftMenu","onInput","handleChange","getContentAsString","getS23MIconsSelector","getColourPicker","defaultChecked","getAbstract","toggleAbstract","deselectElement","vertexDeleteElement","defaultValue","onKeyUp","setTitle","setContent","deleteElement","edgeType","setNavigable","setAggregation","getSourceCardinalityVisibility","toggleSourceCardinalityVisibility","getSourceCardinalityLowerBound","min","max","updateCardinality","getSourceCardinalityUpperBound","getDestCardinalityVisibility","toggleDestCardinalityVisibility","getDestCardinalityLowerBound","getDestCardinalityUpperBound","setStartLabel","setEndLabel","setFormRef","fileNames","content","bind","formRef","element","setIcons","event","mainState","selectedItem","drawMode","document","addEventListener","keyCode","prevProps","prevState","snapshot","leftMenu","getElementById","preventDefault","fetch","serverURL","method","headers","res","json","icons","forEach","icon","newContent","split","newLineType","setLineType","newColour","setLineColour","newLabel","sourceLowerBound","sourceUpperBound","currentSourceVisibility","destLowerBound","destUpperBound","currentDestVisibility","updateSourceCardinality","updateDestCardinality","dropdownOptions","fileName","slice","disabled","shouldIconBeSelected","setIcon","shouldTextBeSelected","setText","DropdownButton","onChangeComplete","presetColors","isTextSet","isIconSet","side","toggleNavigable","toggleAggregation","SourceAggregation","DestAggregation","trimPath","Component","objectsList","updateAttachedVertices","rebuildPath","lineType","selected","sourceIsNavigable","destIsNavigable","sourceIsAggregation","destIsAggregation","arrowGraphKey","arrowContainerKey","getGraphContainerKey","path","connectedObjectUUIDs","getObjectUUIDList","pathItem","getZerothCasePathItem","realHeight","output","item","pathStart","pathEnd","toggleVisibility","val","nodeIndex","d","topLeft","top","topRight","right","bottomRight","bottom","bottomLeft","left","vertexNodes","lineAngle","atan2","getSY","getNSY","getSX","getNSX","draw","getEY","getNEY","getEX","getNEX","startIndex","endIndex","indexSx","indexEx","indexSy","indexEy","abs","sourceText","destText","sourceCtext","destCtext","sxOffset","syOffset","exOffset","eyOffset","sxOffsetc","syOffsetc","exOffsetc","eyOffsetc","sourceTextWidth","measureText","destTextWidth","sourceCtextWidth","destCtextWidth","charWidth","sxFlip","syFlip","exFlip","eyFlip","E1index","E2index","startLRArrow","isPathSegmentLR","endLRArrow","SSX","SSY","SEX","SEY","ESX","ESY","EEX","EEY","sourceCardText","destCardText","Offsets","getTextOffsets","fillText","setLineDash","to","drawStartHead","drawEndHead","drawLabelsAndCardinalities","pos","drawMarker","cx","cy","intersectsSegment","getDistance","getSaveData","vertexObjects","arrowObjects","treeData","JSON","parse","stringify","packageData","getPackageData","decoyPackageData","getDecoyPackageData","vertexData","decoyVertexData","getDecoyVertexData","graphObjects","getGraphData","decoyGraphObjects","getDecoyGraphData","totalContainerKeys","getTotalPackageKeys","totalGraphs","getTotalGraphs","currentGraph","currentKey","currentPackage","getSelectedPackageKey","vertices","tree","packages","dPackages","treeVertex","dTreeVertex","graph","dGraph","containerKeys","graphKeys","currentGra","currentPack","load","jsonString","saveData","vert","newVertices","newArrows","setSelectedPackageKey","vertexContainerKey","setNewContainerKey","setNewGraph","vertexGraphKey","newConstructor","loadedVertex","remakeArrow","setPackageData","setDecoyPackageData","setVertexData","setDecoyVertexData","setGraphData","setDecoyGraphData","dGrraph","setTreeData","setTotalContainerKey","setTotalGraphKeys","setCurrentObjects","updateArrows","drawAll","remakeSemantic","semantic","remakeEdge","edge","newArrow","importLoad","packageKeyMap","graphKeyMap","arrowUpdated","originalKey","originalParentKey","parentContainerKey","newKey","newParentKey","originalGraphKey","newGraphKey","packagesCompare","graphs","includes","addObject","setContainerKey","setGraphKey","loadDirect","currentCon","saveStates","currentState","createSaveState","newData","Object","assign","shift","unshift","pop","packageDataRoot","selectedContainerKey","newTreeData","newPackageData","getContainerData","loadFirstGraph","setNewPackageKey","setNewGraphKey","setPresent","setAway","handleAddPackage","packageName","parentKey","incrementTotalContainerKeys","tempPackageThing","getTotalContainerKeys","NaN","packageThing2","handleAddVertex","vertexName","tempVertexThing","imageElements","vertexThing2","handleDeletePackage","deletePackageChildren","handleDeleteVertex","selectedUUID","selectedPackage","packageChildren","handleDeleteGraph","handleRenamePackage","newName","rKey","handleAddGraph","graphName","incrementTotalGraph","decoyGraphThing","tempGraphThing","selectedGraphKey","handleRenameGraph","gKey","handleGraphRebase","newkey","containerkey","determineOwnership","vertexOrArrow","determineSubPackages","getGraphNameFromKey","find","initialPackageAdded","ContainmentTree","canvasItems","subPackageItems","combinedItems","toTreeViewElement","core","root","selectedVertex","dragStart","removeEventListener","click","vertData","dataTransfer","setData","original","handleElementSelect","draggable","padding","imageElement","orignalVertex","Origin","isAbstract","vertexPath","renderedx","renderedy","awayx","awayy","status","isContainer","floor","random","newSem","newOrigin","mergedContent","Icons","Text","ex","ey","pad","hasContent","iconAreaHeight","contentHeight","possibleWidth","iconListLen","increaseWidthIfNecessary","is","font","measuredNameText","measuredText","shadowOffsetX","shadowOffsetY","fillRect","strokeRect","yPos","xPos","loadImage","sh","sw","scale","drawImage","iconPadding","iconHeight","Image","crossOrigin","onload","dy","txPos","tyPos","cursorX","cursorY","getNearestSide","sides","xPercentage","yPercentage","goodSide","distanceThreshold","rightDist","topDist","leftDist","closestIndex","closestDistance","distArrays","shortest","selectMultiple","selectDown","savedObjects","selectedCanvasObject","Canvas","ocm","mouseDown","canvas","position","startX","startY","shiftKey","button","intersection","tool","ctrlKey","foundEnd","ob","mouseUp","cancelDraw","resizing","canvasElement","onmousemove","arrowToolSelected","getConnectionDataForArrow","snapped","firstArrowJoint","secondObject","findIntersected","newObject","arrowPath","savedArrows","createObject","mouseStartX","mouseStartY","previousObject","upBoxes","upArrows","downBoxes","downArrows","leftBoxes","leftArrows","rightBoxes","rightArrows","first","second","bigBox","smallBox","collectMehBox","collectsidebox","arrangeboxesandarrows","arrangeboxesandarrowshorizontal","shiftBoxes","coord","lastX","lastY","onMouseMove","x1","y1","orderCoordinates","vy1","findNearestGridY","vy2","createArtifact","newVert","setIsContainer","createContainer","setTimeout","canvasObject","CollideCount","past_location","past_size","blockBeenSelected","canvasRef","zoom","zoomLevel","dragEnter","dragOver","dragLeave","drop","alert","droppedSemanticID","getData","droppedVertex","mouseCoords","visibilityCheck","canvasVert","originText","setOrigin","onContextMenu","onMouseDown","onMouseUp","onMouseLeave","mouseLeave","mouseOriginX","mouseOriginY","canvasWidth","canvasHeight","dragging","yRows","currentContainerKey","newGraph","incrementTotalGraphs","arrowType","resetMouseOrigin","canvasRect","getBoundingClientRect","canvasContainer","getElementsByClassName","styleHeight","getComputedStyle","getPropertyValue","styleWidth","setAttribute","getEffectiveZoom","recalculateScale","clearCanvas","resetTransform","sourceUUIDs","ArrowUUIDSource","destUUIDs","ArrowUUIDDest","slotHeight","checkResizeBounds","bounds","getBounds","x2","y2","inYBounds","inXBounds","nearest","nearestDistance","sideData","getNearestSideFrom","coordinate","lastPathX","lastPathY","relAngle","l","angles","nearestAngle","nearestRad","xv","yv","getSelectedObject","resizeObjectOnMouseMove","resizeVars","coords","getGraphXYFromMouseEvent","expandSide","conData","StickArrowToObject","updateA","newObjects","getObjectFromUUID","foundObject","connectionData","onLeftMousePress","saveBlockStates","cDist","nearestPointIndex","nearestArrow","point","hypot","findNearestArrowPointIndex","func","moveArrowPointOnMouseMove","compareSizesToMoveAll","objectID","box","verticalArray","horizontalArray","boxArray","allArrows","boxes","bigbox","b","globalAlpha","onMiddleClick","shiftDown","friendObject","arrowsVert","arrowsHoriz","ObjectsToCheck","nextObjects","n","newfriendObject","nf","of","p","F","S","saveDisX","saveDisY","moveObject","friends","k","solidifyObject","setZoom","newZoom","xpos","ypos","oldLineWidth","lineWidth","oldStrokeStyle","oldFillStyle","arc","sqrt","pow","intersects","updateVertex","getLinkedVertex","verticies","newPath","clientX","clientY","sx","sy","rightClickedObject","elementID","rightClickedItem","rightClickedItemKey","menuType","ContextMenu","showMenu","handleClick","newPackageKey","parseInt","setLeftMenuToTree","keys","handleKey","handleContextMenu","source","dest","sourceName","destName","pageX","pageY","style","renderedOutput","matchingContainers","matchingGraphs","matchingUUID","renderedContainers","renderedGraphs","MainProgramClass","cZoom","showFile","loadImport","importFile","toggleSemanticDomainState","semanticTableEnabled","newRows","resetRows","div","SelectedTool","backgroundColor","mode","nearestObject","ctrl","OP","setSelected","None","loadOrImport","refreshTree","File","FileReader","FileList","file","files","reader","readAsText","result","maxSavedStates","SemanticDomainEditor","size","Dropdown","Item","confirm","reload","DLelement","createElement","href","toDataURL","download","body","appendChild","JSONdata","dataTransformed","dataFile","prompt","URL","createObjectURL","removeChild","save","readOnly","mainUndo","iconUndo","mainRedo","iconRedo","iconHelp","ReactDOM","render","StrictMode","getContext","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cf02ffbf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vertex.4937cefd.svg\";","module.exports = __webpack_public_path__ + \"static/media/edge.09e9d9dc.svg\";","module.exports = __webpack_public_path__ + \"static/media/select.8b3cad47.svg\";","module.exports = __webpack_public_path__ + \"static/media/specialisation.3320bc80.svg\";","module.exports = __webpack_public_path__ + \"static/media/visibility.5452d398.svg\";","module.exports = __webpack_public_path__ + \"static/media/redo.a80ea341.svg\";","module.exports = __webpack_public_path__ + \"static/media/undo.5858a028.svg\";","module.exports = __webpack_public_path__ + \"static/media/help.80a7660b.svg\";","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\n\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n \r\n        <div className=\"App\">\r\n            <div id='program'>\r\n            </div>\r\n        </div>\r\n\r\n  );\r\n\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// Resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nexport function createUUID() {\r\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\r\n        // eslint-disable-next-line\r\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\r\n    );\r\n}\r\n\r\nexport class SemanticIdentity {\r\n    constructor(name, description, abbreviation, shortAbbreviation, UUID, translations){\r\n        this.typeName = \"SemanticIdentity\";\r\n        \r\n        if (UUID !== undefined){\r\n            this.UUID = UUID;\r\n        } else {\r\n            this.UUID = createUUID();\r\n        }\r\n\r\n        this.name = name;\r\n        this.description = description;\r\n        this.abbreviation = abbreviation;\r\n        this.shortAbbreviation = shortAbbreviation;\r\n\r\n        if (translations !== undefined){\r\n            this.translations = translations;\r\n        } else {\r\n            this.translations = [];\r\n        }\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { currentObjects,} from \"../UIElements/CanvasDraw\";\r\nimport {SemanticIdentity} from \"./SemanticIdentity\";\r\n\r\n\r\n\r\nexport class VertexNode {\r\n    constructor(vertex) {\r\n        this.vertex = vertex;\r\n        this.children = new Set();\r\n        this.typeName = \"VertexNode\";\r\n\r\n        //The path of this particular vertex node for displaying on the tree view element\r\n        this.cleanObjectPath = (\"Root\",\"/\",\"Vertices\")\r\n        this.vertexObjectPath = (\"Root\",\"/\",\"Vertices\")\r\n    }\r\n\r\n    add(node) {\r\n        this.children.add(node);\r\n    }\r\n\r\n    remove(traversedVertices, node) {\r\n        //onsole.log(\"remove is called\")\r\n        let isRemoved = false;\r\n        traversedVertices.add(this);\r\n\r\n        //Remove from the current vertex\r\n        isRemoved = this.children.has(node);\r\n        this.children.delete(node);\r\n\r\n        //Continue to remove from anywhere deeper in the tree\r\n        for (let child of this.children) {\r\n            if (!traversedVertices.has(child)) {\r\n                traversedVertices.add(child);\r\n                isRemoved = child.remove(traversedVertices, node);\r\n            }\r\n        }\r\n\r\n        return isRemoved;\r\n    }\r\n\r\n    getVertexNode(traversedVertices, vertex, recursive = true) {\r\n        for (let child of this.children) {\r\n            if (!traversedVertices.has(child)) {\r\n                traversedVertices.add(child);\r\n\r\n                if (child.vertex.semanticIdentity.UUID === vertex.semanticIdentity.UUID) {\r\n                    return child;\r\n                } else if (recursive) {\r\n                    let node = child.getVertexNode(traversedVertices, vertex);\r\n                    if (node !== null) {\r\n                        return node;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    //Remove from just the children of this object, without removing from deeper in the tree\r\n    removeFromChildren(node) {\r\n        if (this.children.has(node)) {\r\n            this.children.delete(node);\r\n            return true;\r\n\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    flatten(traversedVertices) {\r\n        var flattenedArray = [];\r\n\r\n        for (let childNode of this.children) {\r\n            if (!traversedVertices.has(childNode)) {\r\n                traversedVertices.add(childNode);\r\n                flattenedArray.push(childNode.vertex);\r\n\r\n                if (childNode !== null) {\r\n                    flattenedArray.push(...childNode.flatten(traversedVertices));\r\n                }\r\n            }\r\n        }\r\n\r\n        return flattenedArray;\r\n    }\r\n\r\n    flattenVertexNodes(traversedVertices) {\r\n        var flattenedArray = [];\r\n\r\n        for (let childNode of this.children) {\r\n            if (!traversedVertices.has(childNode)) {\r\n                traversedVertices.add(childNode);\r\n                flattenedArray.push(childNode);\r\n\r\n                if (childNode !== null) {\r\n                    flattenedArray.push(...childNode.flattenVertexNodes(traversedVertices));\r\n                }\r\n            }\r\n        }\r\n\r\n        return flattenedArray;\r\n    }\r\n\r\n    has(traversedVertices, node) {\r\n        //Search for object in children\r\n        if (this.children.has(node)) {\r\n            return true;\r\n\r\n        } else {\r\n\r\n            //Search for object in children of children\r\n            for (let child of this.children) {\r\n                if (!traversedVertices.has(child)) {\r\n                    traversedVertices.add(child);\r\n                    if (child.has(traversedVertices, node)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    toTreeViewElement(returnOption, parsedContainerKey) { //added graph key parameter to we can specifiy what graphs vertexes belong to\r\n\r\n        //Pretty much everything that's currently on the canvas is searched and then converted into the tree appropriate struct in the below if else statements.\r\n        //Then, the vertices and arrows package nodes can display their appropriate children.\r\n        let ArrowChildren = [];\r\n        let VertexChildren = [];\r\n\r\n        \r\n\r\n        //Check which package we're sticking these things into\r\n        if (returnOption === \"Vertex Package\"){                  // they had a different spelling for vertex package :DDDDD - cooper\r\n            //All objects currently on the canvas (excluding things like packages which only exist as tree view elements)\r\n            for(let i = 0; i < currentObjects.flatten().length; i++){\r\n                \r\n\r\n                //We onlt want the vertices in this package\r\n                if (currentObjects.flatten()[i].typeName === \"Vertex\" && currentObjects.flatten()[i].getContainerKey() === parsedContainerKey){\r\n                    //Set the append the name of the path to include the vertex name\r\n                    if(currentObjects.flatten()[i].title === \"\"){\r\n                        this.setVertexTreePath(\"Unnamed Vertex\");\r\n                    }\r\n\r\n                    else{\r\n                        this.setVertexTreePath(currentObjects.flatten()[i].title);\r\n                    }\r\n                \r\n                \r\n\r\n\r\n                    //Create the appropriate struct for a tree view element from the vertex data\r\n                    let tempTreeObj = {\r\n                        text: currentObjects.flatten()[i].title,\r\n                        children: [],\r\n                        data: currentObjects.flatten()[i],\r\n                        containerKey: currentObjects.flatten()[i].getContainerKey(),\r\n                        graphKey: currentObjects.flatten()[i].getGraphKey(),\r\n                        state: {opened: false}\r\n                    };\r\n\r\n                    //So you don't have vertices that are completely blank in the tree, looks kinda weird\r\n                    if (tempTreeObj.text === \"\"){\r\n                        tempTreeObj.text = \"Unnamed Vertex\";\r\n                    }\r\n                    \r\n                    //Finally, push to children. Makes it look like the following:\r\n                    //\r\n                    //  Vertex --+\r\n                    //           |\r\n                    //           +-- Unnamed Vertex   \r\n                    \r\n                    VertexChildren.push(tempTreeObj);\r\n\r\n                \r\n            }\r\n        }\r\n\r\n            return{\r\n                text: \"Vertices &#128193\",\r\n                children: VertexChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Vertex Package\"\r\n            }\r\n        }\r\n\r\n        //same typo as above if statement but for arrows\r\n        else if (returnOption === \"Arrow Package\"){ //same thing but arrows package - Lachlan\r\n            for(let i = 0; i < currentObjects.flatten().length; i++){\r\n\r\n                if (currentObjects.flatten()[i].typeName !== \"Vertex\" && currentObjects.flatten()[i].getContainerKey() === parsedContainerKey){\r\n\r\n                        // Find the source and destination vertex as Keith defined in spec\r\n                        let ourSourceEnd = currentObjects.flatten()[i].pathData[1][1]\r\n                        let ourDestEnd = currentObjects.flatten()[i].pathData[0][1]\r\n\r\n                        let textSource = \"N/A\"\r\n                        let textDest = \"N/A\"\r\n                        let finalString = \"N/A\"\r\n\r\n                        // Looking through all of the current objects and matching the uuids\r\n                        for (let j = 0; j <currentObjects.flatten().length; j++){\r\n                        \r\n                            let someObject = currentObjects.flatten()[j]\r\n                            \r\n                            if (someObject.typeName === \"Vertex\"){\r\n                            \r\n                                if (ourSourceEnd === someObject.semanticIdentity.UUID){\r\n                                    \r\n                                    textDest = someObject.title\r\n                                }\r\n\r\n                                else if (ourDestEnd === someObject.semanticIdentity.UUID){\r\n                                    \r\n                                    textSource = someObject.title\r\n                                }\r\n                            }\r\n                            \r\n                        }\r\n\r\n                        //this array stores whether source/destination is Navigable/Aggregation so we can display the required icons in the tree\r\n                        //array is ordered source nav, dest nav, source agg, dest agg \r\n                        //if adding more properties, such ass a dotted arrow, just increase array size and adjust the if statements for constructing icon\r\n                        let treeAppearanceSwitches = [false,false,false,false]\r\n                        treeAppearanceSwitches[0] = currentObjects.flatten()[i].getNavigable(0)\r\n                        treeAppearanceSwitches[1] = currentObjects.flatten()[i].getNavigable(1)\r\n                        treeAppearanceSwitches[2] = currentObjects.flatten()[i].getAggregation(0)\r\n                        treeAppearanceSwitches[3] = currentObjects.flatten()[i].getAggregation(1)\r\n                        \r\n                        //unicode icon of the arrow properties/relations we want to display\r\n                        let arrowIcon = \"\";\r\n\r\n                        if(treeAppearanceSwitches[2] === true){\r\n                            arrowIcon = \"&#9670\"\r\n                            }\r\n                        else if(treeAppearanceSwitches[0] === true){\r\n                            arrowIcon = \"&#10229\"\r\n                        }\r\n\r\n                        arrowIcon += \"&#8213\"\r\n\r\n                        if(treeAppearanceSwitches[3] === true){\r\n                            arrowIcon += \"&#9670\"\r\n                            }\r\n                        else if(treeAppearanceSwitches[1] === true){\r\n                            arrowIcon += \"&#10230\"\r\n                        }\r\n\r\n                        finalString = textSource + \" \" + arrowIcon + \" \" + textDest\r\n\r\n                        let tempTreeObj = {\r\n                            text: finalString,\r\n                            children: [],\r\n                            data: currentObjects.flatten()[i],\r\n                            containerKey: currentObjects.flatten()[i].getContainerKey(),\r\n                            graphKey: currentObjects.flatten()[i].getGraphKey(),\r\n                            state: {opened: false}\r\n                        };\r\n\r\n                        ArrowChildren.push(tempTreeObj);\r\n                    \r\n                    \r\n                }\r\n\r\n            }\r\n\r\n            //console.log(ArrowChildren.length)\r\n\r\n            if(ArrowChildren.length === 0){\r\n                return;\r\n            }\r\n            else{\r\n            return {\r\n                text: \"Relations ⭲\",\r\n                children: ArrowChildren,\r\n                data: null,\r\n                state: { opened: true },\r\n                type: \"Arrow Package\"\r\n            }\r\n        }\r\n            \r\n        }\r\n\r\n    }\r\n    \r\n    setTreeViewElement(packageTitle){ //For when you want to make a package type of element\r\n        let fakeChildren = [];\r\n        return{\r\n            text: packageTitle,\r\n            children: fakeChildren,\r\n            state: {opened: true}\r\n        };\r\n    }\r\n\r\n    //this function sets the path of a particular vertex node so that you can \r\n    //1. Display that item's path in the actual vertex (if you want)\r\n    //2. Show a tree view that only contains the path to a desired vertex \r\n    setVertexTreePath(treePath){\r\n        this.vertexObjectPath = this.cleanObjectPath + \"/\" + treePath;\r\n    }\r\n\r\n    //Return the vertice's object path\r\n    returnVertexTreePath(){\r\n        return this.vertexObjectPath;\r\n    }\r\n\r\n}\r\n\r\nclass ArrowEdge {\r\n    constructor(flattenedVertexNodes, arrow) {\r\n        this.arrow = arrow;\r\n        this.updateVertices(flattenedVertexNodes);\r\n    }\r\n\r\n    updateVertices(flattenedVertexNodes) {\r\n        this.sourceVertexNodeObject = null;\r\n        this.destVertexNodeObject = null;\r\n\r\n        if (this.arrow !== null) {\r\n            let isSourceFound = this.arrow.sourceVertexUUID === null;\r\n            let isDestFound = this.arrow.destVertexUUID === null;\r\n\r\n            for (let vertexNode of flattenedVertexNodes) {\r\n                if (isSourceFound && isDestFound) {\r\n                    break;\r\n                }\r\n\r\n                if (vertexNode !== null) {\r\n                    if (vertexNode.vertex.semanticIdentity.UUID === this.arrow.sourceVertexUUID) {\r\n                        this.sourceVertexNodeObject = vertexNode;\r\n                        isSourceFound = true;\r\n\r\n                    } else if (vertexNode.vertex.semanticIdentity.UUID === this.arrow.destVertexUUID) {\r\n                        this.destVertexNodeObject = vertexNode;\r\n                        isDestFound = true;\r\n                    }\r\n                }\r\n            }\r\n        \r\n        }\r\n    }\r\n\r\n    set sourceVertexNode(vertexNode) {\r\n        this.sourceVertexNodeObject = vertexNode;\r\n\r\n        if (vertexNode !== null) {\r\n            this.arrow.sourceVertexUUID = vertexNode.vertex.semanticIdentity.UUID;\r\n        } else {\r\n            this.arrow.sourceVertexUUID = null;\r\n        }\r\n    }\r\n\r\n    get sourceVertexNode() {\r\n        return this.sourceVertexNodeObject;\r\n    }\r\n\r\n    get sourceVertex() {\r\n        if (this.sourceVertexNodeObject !== null) {\r\n            return this.sourceVertexNodeObject.vertex;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    set destVertexNode(vertexNode) {\r\n        this.destVertexNodeObject = vertexNode;\r\n\r\n        if (vertexNode !== null) {\r\n            this.arrow.destVertexUUID = vertexNode.vertex.semanticIdentity.UUID;\r\n        } else {\r\n            this.arrow.destVertexUUID = null;\r\n        }\r\n    }\r\n\r\n    get destVertexNode() {\r\n        return this.destVertexNodeObject;\r\n    }\r\n\r\n    get destVertex() {\r\n        if (this.destVertexNodeObject !== null) {\r\n            return this.destVertexNodeObject.vertex;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n//Supply with an array/set of Vertex objects or Arrow objects (NOT ArrowEdge objects)\r\nexport class Graph {\r\n    constructor(vertexArrayFlattened, arrowArrayFlattened) {\r\n        this.rootVertices = new Set();\r\n        if (vertexArrayFlattened !== undefined) {\r\n            this.add(vertexArrayFlattened);\r\n        }\r\n\r\n        this.arrows = new Set();\r\n        if (arrowArrayFlattened !== undefined) {\r\n            this.add(arrowArrayFlattened);\r\n        }\r\n    }\r\n\r\n    add(objects) {\r\n        if (!Array.isArray(objects)) {\r\n            objects = [objects];\r\n        }\r\n\r\n        for (let object of objects) {\r\n            switch (object.typeName) {\r\n                case \"Vertex\":\r\n                    this.addVertex(object);               \r\n                    break;\r\n                case \"Arrow\":\r\n                    this.addArrow(object);\r\n                    break;\r\n                case \"VertexNode\":\r\n                    this.rootVertices.add(object);\r\n                    break;\r\n                case \"ArrowEdge\":\r\n                    this.arrows.add(object);\r\n                    break;\r\n                default:\r\n\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    addVertex(vertex) {\r\n        if (this.getVertexNode(vertex) === null) { // if its the original vertex\r\n            vertex.originalUUID = vertex.semanticIdentity.UUID; \r\n            vertex = new VertexNode(vertex);\r\n            this.rootVertices.add(vertex);\r\n        } else { // else its a copy of the original\r\n\r\n            \r\n            let newTitle = \" :: \" + vertex.title\r\n            vertex.title = newTitle\r\n            vertex.originalVertex = false;\r\n            /* For now im going to give the copies their own unique semantic UUID, as a lot of stuff in the program hinges off of vertex items\r\n            having their own unique sID. as a work around i've created a value in the vertex object to store the sID of the original vertex so that\r\n            any functions that require the original UUID of the original vertex can still be used. - cooper*/\r\n            vertex.originalUUID = vertex.semanticIdentity.UUID; \r\n            let sID = new SemanticIdentity(vertex.title,\"\",\"\",\"\", undefined ,[]) \r\n            vertex.semanticIdentity = sID;\r\n            vertex = new VertexNode(vertex);\r\n           \r\n            this.rootVertices.add(vertex);\r\n        }\r\n    }\r\n\r\n    //NOTE: Graph direction is inverted, flowing from the dest to source of arrows\r\n    //This is intentional behaviour of the modelling spec\r\n    addArrow(arrow) {\r\n        if (this.getArrowEdge(arrow) === null) {\r\n            arrow = new ArrowEdge(this.flattenVertexNodes(), arrow);\r\n            this.arrows.add(arrow);\r\n\r\n            if (arrow.destVertexNode !== null && arrow.sourceVertexNode !== null) {\r\n                arrow.destVertexNode.add(arrow.sourceVertexNode);\r\n\r\n                //If the destination of the arrow is currently a root vertex,\r\n                //search for if the destination has any other possible roots,\r\n                //and remove from the root ONLY IF another root is found\r\n                //This retains an entry point for the graph even if there is a cycle back to root\r\n                if (this.rootVertices.has(arrow.sourceVertexNode)) {\r\n                    let isAnotherRoot = false;\r\n\r\n                    for (let vertexNode of this.rootVertices) {\r\n                        if (vertexNode.vertex.semanticIdentity.UUID === arrow.sourceVertex.semanticIdentity.UUID) {\r\n                            continue;\r\n                        }\r\n\r\n                        if (vertexNode.has(new Set(), arrow.sourceVertexNode)) {\r\n                            isAnotherRoot = true;\r\n                        }\r\n                    }\r\n\r\n                    if (isAnotherRoot) {\r\n                        this.rootVertices.delete(arrow.sourceVertexNode);\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n            console.error(\"Attempted to add duplicate arrow\");\r\n        }\r\n    }\r\n\r\n    //A way of returning the arrow UUID's associated with the deleted vertex. For some reason the source and ending\r\n    //UUID data isn't being saved properly upstream, so this is a way around that.\r\n    ArrowUUIDSource(object){\r\n        object = this.getVertexNode(object);\r\n        //first index is source, second is destination\r\n        let returnArray = [];\r\n\r\n        //Match an arrow\r\n        let i = 0;\r\n        for (let arrow of this.arrows) {\r\n            if (arrow.sourceVertexNode !== null && arrow.sourceVertex.semanticIdentity.UUID === object.vertex.semanticIdentity.UUID) {\r\n                returnArray[i] = arrow;\r\n                i += 1;\r\n            }\r\n        }\r\n\r\n        return returnArray;\r\n    }\r\n\r\n    ArrowUUIDDest(object){\r\n        object = this.getVertexNode(object);\r\n        //first index is source, second is destination\r\n        let returnArray = [];\r\n\r\n        //Match an arrow\r\n        let i = 0;\r\n        for (let arrow of this.arrows) {\r\n            if (arrow.destVertexNode !== null && arrow.destVertex.semanticIdentity.UUID === object.vertex.semanticIdentity.UUID) {\r\n                returnArray[i] = arrow;\r\n                i += 1;\r\n            }\r\n        }\r\n\r\n        return returnArray;\r\n    }\r\n\r\n    //Removes and object while shifting it's children's position in the tree\r\n    remove(object) {\r\n        //By this point rootVertices doesnt actually contain the vertex we want to delete which makes the isRemoved Logic hard to follow as has returns true when the item is present- Lachlan\r\n        if (object.typeName === \"Vertex\") {\r\n            let newobject = this.getVertexNode(object);\r\n            let isRemoved = this.rootVertices.has(newobject);\r\n\r\n\r\n\r\n            //Remove from the root\r\n            this.rootVertices.delete(newobject);\r\n            for (let child of newobject.children) {\r\n                this.rootVertices.add(child);\r\n            }\r\n\r\n\r\n            \r\n            //Remove from anywhere deeper in the tree\r\n            let traversedVertices = new Set();\r\n            for (let vertexNode of this.rootVertices) {\r\n                if (!traversedVertices.has(vertexNode)) {\r\n                    traversedVertices.add(vertexNode);\r\n                    vertexNode.remove(traversedVertices, newobject);\r\n                }\r\n            }\r\n            \r\n            if (isRemoved) {\r\n                //Remove the vertex from being the source or dest of any arrow\r\n                for (let arrow of this.arrows) {\r\n                    if (arrow.sourceVertexNode !== null && arrow.sourceVertex.semanticIdentity.UUID === newobject.vertex.semanticIdentity.UUID) {\r\n                        arrow.sourceVertexNode = null;\r\n                    }\r\n                    \r\n                    if (arrow.destVertexNode !== null && arrow.destVertex.semanticIdentity.UUID === newobject.vertex.semanticIdentity.UUID) {\r\n                        arrow.destVertexNode = null;\r\n                    }\r\n                }\r\n            }\r\n            \r\n\r\n            return isRemoved;\r\n\r\n        } else if (object.typeName === \"Arrow\") {\r\n            let newobject = this.getArrowEdge(object);\r\n\r\n            if (newobject !== null) {\r\n                this.arrows.delete(newobject);\r\n                //IF arrow has a sourceVertex AND destVertex\r\n                if (newobject.sourceVertexNode !== null && newobject.destVertexNode !== null) {\r\n                    //IF there is no other arrow from sourceVertex to destVertex, remove the sourceVertex from the children of destVertex\r\n                    //AND move the sourceVertex to root, if there is no other arrow with the same sourceVertex\r\n                    let isEquivalentArrow = false;\r\n                    let isArrowWithSameSource = false;\r\n                    \r\n                    for (let arrow of this.arrows) {\r\n                        let isEquivalentSource = arrow.sourceVertexNode !== null && arrow.sourceVertex.semanticIdentity.UUID === newobject.sourceVertex.semanticIdentity.UUID;\r\n                        let isEquivalentDest = arrow.destVertexNode !== null && arrow.destVertex.semanticIdentity.UUID === newobject.destVertex.semanticIdentity.UUID;\r\n                        \r\n                        if (isEquivalentSource && isEquivalentDest) {\r\n                            isEquivalentArrow = true;\r\n                        }\r\n                        if (isEquivalentSource && arrow.destVertexNode !== null) {\r\n                            isArrowWithSameSource = true;\r\n                        }\r\n                    }\r\n                    \r\n                    if (!isEquivalentArrow) {\r\n                        newobject.destVertexNode.removeFromChildren(newobject.sourceVertexNode);\r\n                    }\r\n                    if (!isArrowWithSameSource) {\r\n                        this.add(newobject.sourceVertexNode);\r\n                    }\r\n\r\n                    //Remove vertex from the root if removing this arrow has resolved a cycle\r\n                    if (newobject.sourceVertexNode.has(new Set(), newobject.destVertexNode)) {\r\n                        this.rootVertices.delete(newobject.destVertexNode);\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n        } else {\r\n            if (object !== null) {\r\n                console.error(\"Attempted to remove object of invalid type %s to Graph\", object.typeName);\r\n            } else {\r\n                console.error(\"Attempted to remove null from Graph\");\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    has(object) {\r\n        //Search for object in root vertices\r\n        if (this.rootVertices.has(object)) {\r\n            return true;\r\n\r\n        } else {\r\n            let traversedVertices = new Set();\r\n\r\n            //Search for object in children of root vertices\r\n            for (let vertex of this.rootVertices) {\r\n                if (!traversedVertices.has(vertex)) {\r\n                    traversedVertices.add(vertex);\r\n                    if (vertex.has(traversedVertices, object)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getVertexNode(vertex) {\r\n        let traversedVertices = new Set();\r\n\r\n        for (let rootNode of this.rootVertices) {\r\n            if (!traversedVertices.has(rootNode)) {\r\n                traversedVertices.add(rootNode);\r\n                if (rootNode.vertex.semanticIdentity.UUID === vertex.semanticIdentity.UUID) {\r\n                    return rootNode;\r\n                } else {\r\n                    let node = rootNode.getVertexNode(traversedVertices, vertex);\r\n                    if (node !== null) {\r\n                        return node;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getArrowEdge(arrow) {\r\n        for (let arrowEdge of this.arrows) {\r\n            if (arrowEdge.arrow.semanticIdentity.UUID === arrow.semanticIdentity.UUID) {\r\n                return arrowEdge;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    flatten(doFlattenVertices = true, doFlattenArrows = true) {\r\n        let verticesSet = new Set();\r\n        let arrowsSet = new Set();\r\n\r\n        let traversedVertices = new Set();\r\n\r\n        if (doFlattenVertices) {\r\n            for (let vertexNode of this.rootVertices) {\r\n                if (!traversedVertices.has(vertexNode)) {\r\n                    traversedVertices.add(vertexNode);\r\n                    verticesSet.add(vertexNode.vertex);\r\n    \r\n                    if (vertexNode !== null) {\r\n                        for (let child of vertexNode.flatten(traversedVertices)) {\r\n                            verticesSet.add(child);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (doFlattenArrows) {\r\n            for (let arrowEdge of this.arrows) {\r\n                arrowsSet.add(arrowEdge.arrow);\r\n            }\r\n        }\r\n\r\n        let flattenedArray = Array.from(verticesSet);\r\n        return flattenedArray.concat(Array.from(arrowsSet));\r\n    }\r\n\r\n    flattenVertexNodes() {\r\n        var verticesSet = new Set();\r\n        let traversedVertices = new Set();\r\n\r\n        for (let vertexNode of this.rootVertices) {\r\n            if (!traversedVertices.has(vertexNode)) {\r\n                traversedVertices.add(vertexNode);\r\n                verticesSet.add(vertexNode);\r\n\r\n                if (vertexNode !== null) {\r\n                    for (let child of vertexNode.flattenVertexNodes(traversedVertices)) {\r\n                        verticesSet.add(child);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return Array.from(verticesSet);\r\n    }\r\n}","import { handleAddGraph, handleAddPackage, handleAddVertex } from \"./UIElements/ContainmentTree\";\r\n\r\n//Icons used for Treeview objects\r\nlet packageIcon = \"📁\";\r\nlet treeVertexEmptyIcon = \"🟧\";\r\nlet treeVertexFullIcon = \"📂\";\r\nlet graphIcon = '📈';\r\n\r\nexport function getPackageIcon(){\r\n    return packageIcon;\r\n}\r\n\r\nexport function getTreeVertexEmptyIcon(){\r\n    return treeVertexEmptyIcon;\r\n}\r\n\r\nexport function getTreeVertexFullIcon(){\r\n    return treeVertexFullIcon;\r\n}\r\n\r\nexport function getGraphIcon(){\r\n    return graphIcon;\r\n}\r\n\r\n//How many times you can undo/redo from an action\r\n//Save states limited as its all stored in memeory (save states are relativley small though and only scale to be a few kilobytes per object though)\r\nlet maxSaveStates = 10;\r\n\r\nexport function getMaxSaveStates(){\r\n    return maxSaveStates;\r\n}\r\n\r\n//Objects inititally created\r\nexport function initialObjects(){\r\n    handleAddPackage(\"Package\");\r\n    handleAddGraph(\"Graph\",1) \r\n    handleAddPackage(\"SubPackage\",1)\r\n    handleAddVertex(\"Vertex\",1)\r\n    handleAddVertex(\"Vertex 2\",1)\r\n    handleAddPackage(\"Package 2\")\r\n    handleAddGraph(\"Graph 2\",5)\r\n    handleAddVertex(\"Vertex 3\",5)\r\n    \r\n\r\n}\r\n\r\n\r\n            \r\n            \r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\n// React imports\r\nimport React, { useRef, useCallback, useState } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport GridMUI from '@material-ui/core/Grid';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { EditingState } from '@devexpress/dx-react-grid';\r\n\r\nimport saveAs from 'file-saver';\r\n\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport { GridExporter } from '@devexpress/dx-react-grid-export';\r\n\r\nimport {Grid,Table,TableHeaderRow,TableInlineCellEditing,Toolbar,ExportPanel} from '@devexpress/dx-react-grid-material-ui';\r\n\r\nimport {Plugin,Template,TemplatePlaceholder} from '@devexpress/dx-react-core';\r\n\r\nimport {currentObjects} from \"./CanvasDraw\";\r\nimport {getVertexData} from \"./ContainmentTree\"\r\nimport { getTreeVertexEmptyIcon } from '../Config';\r\n\r\n// Globals\r\nlet rows;\r\nlet setRows = null;\r\nlet setColumns = null;\r\nlet textInput = React.createRef();\r\nexport var translationColumns = [];\r\n\r\nconst onSave = (workbook) => {\r\n    workbook.xlsx.writeBuffer().then((buffer) => {\r\n        saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'DataGrid.xlsx');\r\n    });\r\n};\r\n\r\nconst getRowId = row => row.id;\r\n\r\nconst styles = () => ({\r\n    input: {\r\n        fontSize: '14px',\r\n        width: '90px',\r\n    },\r\n    label: {\r\n        fontSize: '14px',\r\n    },\r\n    container: {\r\n        maxWidth: '18em',\r\n    },\r\n    selector: {\r\n        height: '32px',\r\n    },\r\n});\r\n\r\n// #FOLD_BLOCK\r\nconst StartEditActionSelectorBase = (props) => {\r\n    const { defaultAction, changeAction, classes } = props;\r\n    return (\r\n        <GridMUI\r\n            container\r\n            alignItems=\"center\"\r\n            className={classes.container}\r\n        >\r\n            <Typography\r\n                className={classes.label}\r\n            >\r\n                Start Edit Action:\r\n                &nbsp;\r\n            </Typography>\r\n            <Select\r\n                onChange={e => changeAction(e.target.value)}\r\n                value={defaultAction}\r\n                className={classes.selector}\r\n                input={(\r\n                    <OutlinedInput\r\n                        classes={{ input: classes.input }}\r\n                        labelWidth={0}\r\n                        margin=\"dense\"\r\n                    />\r\n                )}\r\n            >\r\n                <MenuItem value=\"click\">Click</MenuItem>\r\n                <MenuItem value=\"doubleClick\">Double Click</MenuItem>\r\n            </Select>\r\n        </GridMUI>\r\n    );\r\n};\r\nconst StartEditActionSelector = withStyles(styles, { name: 'StartEditActionSelector' })(StartEditActionSelectorBase);\r\n\r\n// #FOLD_BLOCK\r\nconst SelectTextCheckerBase = (props) => {\r\n    const { isSelectText, changeSelectText, classes } = props;\r\n    return (\r\n        <FormControlLabel\r\n            control={(\r\n                <Checkbox\r\n                    checked={isSelectText}\r\n                    onChange={e => changeSelectText(e.target.checked)}\r\n                    color=\"primary\"\r\n                />\r\n            )}\r\n            classes={{ label: classes.label }}\r\n            label=\"Select Text On Focus\"\r\n        />\r\n    );\r\n};\r\nconst SelectTextChecker = withStyles(styles, { name: 'SelectTextChecker' })(SelectTextCheckerBase);\r\n\r\nconst EditPropsPanel = props => (\r\n    <Plugin name=\"EditPropsPanel\">\r\n        <Template name=\"toolbarContent\">\r\n            <SelectTextChecker {...props} />\r\n            <TemplatePlaceholder />\r\n            <StartEditActionSelector {...props} />\r\n        </Template>\r\n    </Plugin>\r\n);\r\n\r\nconst FocusableCell = ({ onClick, ...restProps }) => (\r\n    <Table.Cell {...restProps} tabIndex={0} onFocus={onClick} />\r\n);\r\n\r\nexport default () => {\r\n    \r\n    // Create columns\r\n    let [columns, setColumnsRet] = useState(createColumns());\r\n    setColumns = setColumnsRet;\r\n\r\n    // Disable editing state\r\n    const [editingStateColumnExtensions] = useState([\r\n        { columnName: 'UUID', editingEnabled: false },\r\n        { columnName: 'type', editingEnabled: false },\r\n    ]);\r\n\r\n    // Rows\r\n    const [generatedRows, setRowsRet] = useState([]);\r\n    rows = generatedRows;\r\n    setRows = setRowsRet;\r\n\r\n    // Enable/Disable word Wrap\r\n    const [tableColumnExtensions] = useState([\r\n        { columnName: 'UUID', wordWrapEnabled: true },\r\n        { columnName: 'type', wordWrapEnabled: true },\r\n        { columnName: 'name', wordWrapEnabled: true },\r\n        { columnName: 'description', wordWrapEnabled: true },\r\n        { columnName: 'abbreviation', wordWrapEnabled: true },\r\n        { columnName: 'shortAbbreviation', wordWrapEnabled: true },\r\n    ]);\r\n\r\n    // Editable\r\n    const [startEditAction, setStartEditAction] = useState('click');\r\n    const [selectTextOnEditStart, setSelectTextOnEditStart] = useState(true);\r\n\r\n    const commitChanges = ({ added, changed, deleted}) => {\r\n        let changedRows;\r\n        if (added) {\r\n            const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\r\n            changedRows = [\r\n                ...rows,\r\n                ...added.map((row, index) => ({\r\n                    id: startingAddedId + index,\r\n                    ...row,\r\n                })),\r\n            ];\r\n        }\r\n        if (changed) {\r\n            changedRows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));\r\n            updateChangedObjects(changedRows);\r\n        }\r\n        if (deleted) {\r\n            const deletedSet = new Set(deleted);\r\n            changedRows = rows.filter(row => !deletedSet.has(row.id));\r\n        }\r\n\r\n        setRows(changedRows);\r\n    };\r\n\r\n    // Export functionality\r\n    const exporterRef = useRef(null);\r\n\r\n    const startExport = useCallback(() => {\r\n        exporterRef.current.exportGrid();\r\n    }, [exporterRef]);\r\n\r\n    // Return\r\n    return (\r\n        <Paper>\r\n            <InputGroup>\r\n                <FormControl\r\n                    ref={textInput}\r\n                    placeholder=\"Column name\"\r\n                    aria-label=\"Column name\"\r\n                    aria-describedby=\"basic-addon2\"\r\n                />\r\n                <InputGroup.Append>\r\n                    <Button variant=\"outline-secondary\" onClick={() => addColumn()}>Add</Button>\r\n                    <Button variant=\"outline-secondary\" onClick={() => removeColumn()}>Remove</Button>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n            <Grid\r\n                rows={rows}\r\n                columns={columns}\r\n                getRowId={getRowId}\r\n            >\r\n                <EditingState\r\n                    onCommitChanges={commitChanges}\r\n                    columnExtensions={editingStateColumnExtensions}\r\n                />\r\n                <Table cellComponent={FocusableCell} columnExtensions={tableColumnExtensions} />\r\n                <TableHeaderRow />\r\n                <Toolbar />\r\n                <EditPropsPanel\r\n                    defaultAction={startEditAction}\r\n                    changeAction={setStartEditAction}\r\n                    isSelectText={selectTextOnEditStart}\r\n                    changeSelectText={setSelectTextOnEditStart}\r\n                />\r\n                <ExportPanel startExport={startExport} />\r\n                <TableInlineCellEditing\r\n                    startEditAction={startEditAction}\r\n                    selectTextOnEditStart={selectTextOnEditStart}\r\n                />\r\n            </Grid>\r\n            <GridExporter\r\n                ref={exporterRef}\r\n                rows={rows}\r\n                columns={columns}\r\n                onSave={onSave}\r\n            />\r\n        </Paper>\r\n    );\r\n};\r\n\r\nfunction addColumn() {\r\n    // Get\r\n    const value = textInput.current.value\r\n\r\n    // Clear column name\r\n    textInput.current.value = \"\";\r\n\r\n    // Check if value is empty\r\n    if (value === \"\" || value === null || value === undefined) {\r\n        return;\r\n    }\r\n\r\n    // Add column\r\n    translationColumns.push(value);\r\n    updateColumns();\r\n}\r\n\r\nfunction removeColumn() {\r\n    // Get\r\n    const value = textInput.current.value\r\n\r\n    // Clear column name\r\n    textInput.current.value = \"\";\r\n\r\n    // Delete from currentObjects\r\n    for (let object of currentObjects.flatten()) {\r\n        object.semanticIdentity.translations.delete(value);\r\n    }\r\n\r\n    // Delete column\r\n    translationColumns.splice(translationColumns.indexOf(value), 1);\r\n    updateColumns();\r\n}\r\n\r\nfunction updateColumns() {\r\n    setColumns(createColumns());\r\n}\r\n\r\nfunction getRowForObject(object) {\r\n    const row = {};\r\n\r\n    // Constants\r\n    row['id'] = object.semanticIdentity.UUID; // Just going to be based on UUID since it's easy and unique\r\n    row['UUID'] = object.semanticIdentity.UUID;\r\n    row['type'] = object.typeName;\r\n    row['name'] = object.semanticIdentity.name;\r\n    row['description'] = object.semanticIdentity.description;\r\n    row['abbreviation'] = object.semanticIdentity.abbreviation;\r\n    row['shortAbbreviation'] = object.semanticIdentity.shortAbbreviation;\r\n\r\n    // Translations\r\n    for (let o = 0; o < object.semanticIdentity.translations.length; o++) {\r\n        let translation = object.semanticIdentity.translations[o];\r\n\r\n        row[translation[0]] = translation[1];\r\n    }\r\n\r\n    return row;\r\n}\r\n\r\nexport function resetRows() {\r\n    let newRows = [];\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    for (let i = 0; i < getVertexData().length; i++) {\r\n        newRows.push(getRowForObject(getVertexData()[i]));\r\n    }\r\n    for(let i = 0; i < currentObjectsFlattened.length; i++){\r\n        // Add Arrow Ends\r\n        if (currentObjectsFlattened[i].typeName === \"Arrow\") {\r\n            newRows.push(getRowForObject(currentObjectsFlattened[i].sourceEdgeEnd));\r\n            newRows.push(getRowForObject(currentObjectsFlattened[i].destEdgeEnd));\r\n        }\r\n    }\r\n\r\n    if (setRows === null) {\r\n        console.error(\"Cannot set rows\");\r\n        return;\r\n    }\r\n\r\n    setRows(newRows);\r\n}\r\n\r\nfunction createColumns() {\r\n    // Create default columns\r\n    let columnNames = [\r\n        {name: 'UUID', title: 'UUID'},\r\n        {name: 'type', title: 'Type'},\r\n        {name: 'name', title: 'Name'},\r\n        {name: 'description', title: 'Description'},\r\n        {name: 'abbreviation', title: 'Abbreviation'},\r\n        {name: 'shortAbbreviation', title: 'Short Abbreviation'},\r\n    ];\r\n\r\n    // Add translation columns\r\n    for (let translation of translationColumns) {\r\n        columnNames.push({name: translation, title: translation});\r\n    }\r\n\r\n    return columnNames;\r\n}\r\n\r\nfunction updateChangedObject(object, row) {\r\n    // If should update\r\n    if (object.semanticIdentity.UUID === row['UUID']) {\r\n        \r\n        // Constants\r\n        object.semanticIdentity.abbreviation = row['abbreviation'];\r\n        object.semanticIdentity.shortAbbreviation = row['shortAbbreviation'];\r\n        object.semanticIdentity.name = row['name'];\r\n        object.title = row['name']; // update the title of the vertex to be the same as semantic name\r\n        object.semanticIdentity.description = row['description'];\r\n        object.text = row['name'] + \" \" + getTreeVertexEmptyIcon();\r\n        \r\n        // Translations\r\n        for (let translation of translationColumns) {\r\n            // Find translation in list\r\n            let set = false;\r\n            for (let i = 0; i < object.semanticIdentity.translations.length; i++) {\r\n                if (object.semanticIdentity.translations[i][0] === translation) {\r\n                    object.semanticIdentity.translations[i][1] = row[translation];\r\n                    set = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!set) {\r\n                object.semanticIdentity.translations.push([translation, row[translation]]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    return row;\r\n}\r\n\r\nfunction updateChangedObjects(rows) {\r\n    \r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n    let treeVert = getVertexData()\r\n\r\n    // Iterate through all rows\r\n    for (let i = 0; i < rows.length; i++) {\r\n\r\n        //itterate through tree verts\r\n        for (let j = 0; j < treeVert.length; j++) {\r\n            rows[i] = updateChangedObject(treeVert[j],rows[i])\r\n        }\r\n\r\n        // Iterate through all objects\r\n        for (let o = 0; o < currentObjectsFlattened.length; o++) {\r\n            // Update main objects\r\n            rows[i] = updateChangedObject(currentObjectsFlattened[o], rows[i]);\r\n\r\n            // Update edge ends\r\n            if (currentObjectsFlattened[o].typeName === \"Arrow\") {\r\n                rows[i] = updateChangedObject(currentObjectsFlattened[o].sourceEdgeEnd, rows[i]);\r\n                rows[i] = updateChangedObject(currentObjectsFlattened[o].destEdgeEnd, rows[i]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function setTranslationColumns(newColumns) {\r\n    translationColumns = newColumns;\r\n    updateColumns();\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\n //EDGE ENDS\r\nexport const EdgeEnd = {\r\n    NONE: \"None\",\r\n    ARROW: \"Arrow\",\r\n    TRIANGLE: \"Triangle\",\r\n    FILLED_TRIANGLE: \"Filled Triangle\",\r\n    DIAMOND: \"Diamond\",\r\n    FILLED_DIAMOND: \"Filled Diamond\"\r\n};\r\n\r\nexport const EdgeEndToString = {};\r\nEdgeEndToString[EdgeEnd.NONE] = \"None\";\r\nEdgeEndToString[EdgeEnd.ARROW] = \"Arrow\";\r\nEdgeEndToString[EdgeEnd.TRIANGLE] = \"Triangle\";\r\nEdgeEndToString[EdgeEnd.FILLED_TRIANGLE] = \"FilledTriangle\";\r\nEdgeEndToString[EdgeEnd.DIAMOND] = \"Diamond\";\r\nEdgeEndToString[EdgeEnd.FILLED_DIAMOND] = \"FilledDiamond\";\r\n\r\nexport const StringToEdgeEnd = {};\r\nStringToEdgeEnd[\"None\"] = EdgeEnd.NONE;\r\nStringToEdgeEnd[\"Arrow\"] = EdgeEnd.ARROW;\r\nStringToEdgeEnd[\"Triangle\"] = EdgeEnd.TRIANGLE;\r\nStringToEdgeEnd[\"FilledTriangle\"] = EdgeEnd.FILLED_TRIANGLE;\r\nStringToEdgeEnd[\"Diamond\"] = EdgeEnd.DIAMOND;\r\nStringToEdgeEnd[\"FilledDiamond\"] = EdgeEnd.FILLED_DIAMOND;\r\n\r\n//LINE COLOURS\r\nexport const LineColour = {\r\n    BLACK: \"#000000\",\r\n    RED: \"#FF0000\",\r\n    BLUE: \"#0000FF\",\r\n    GREEN: \"#00FF00\"\r\n};\r\n\r\nexport const LineColourToStringName = {};\r\nLineColourToStringName[LineColour.BLACK] = \"Black\";\r\nLineColourToStringName[LineColour.RED] = \"Red\";\r\nLineColourToStringName[LineColour.BLUE] = \"Blue\";\r\nLineColourToStringName[LineColour.GREEN] = \"Green\";\r\n\r\nexport const StringNameToLineColour = {};\r\nStringNameToLineColour[\"Black\"] = LineColour.BLACK;\r\nStringNameToLineColour[\"Red\"] = LineColour.RED;\r\nStringNameToLineColour[\"Blue\"] = LineColour.BLUE;\r\nStringNameToLineColour[\"Green\"] = LineColour.GREEN;\r\n\r\n//LINE TYPES\r\nexport const LineType = {\r\n    SOLID: 1,\r\n    DASHED: 2\r\n};\r\n\r\nexport const LineTypeToString = {};\r\nLineTypeToString[LineType.SOLID] = \"Solid\";\r\nLineTypeToString[LineType.DASHED] = \"Dashed\";\r\n\r\nexport const StringToLineType = {};\r\nStringToLineType[\"Solid\"] = LineType.SOLID;\r\nStringToLineType[\"Dashed\"] = LineType.DASHED;","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { SemanticIdentity } from \"./SemanticIdentity\";\r\n\r\nexport class Cardinality {\r\n    constructor(lowerBound, upperBound, attachedToUUID, isVisible = false, semanticIdentity) {\r\n        this.typeName = \"Cardinality\";\r\n        \r\n        this.numLowerBound = lowerBound;\r\n        this.numUpperBound = upperBound;\r\n        this.attachedToUUID = attachedToUUID;\r\n        this.isVisible = isVisible;\r\n\r\n        if (semanticIdentity !== undefined){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            this.semanticIdentity = new SemanticIdentity(this.toString(), this.getDescription())\r\n        }\r\n    }\r\n\r\n    set lowerBound(value){\r\n        this.numLowerBound = value;\r\n        this.semanticIdentity.name = this.toString();\r\n    }\r\n\r\n    get lowerBound(){\r\n        return this.numLowerBound;\r\n    }\r\n\r\n    set upperBound(value){\r\n        this.numUpperBound = value;\r\n        this.semanticIdentity.name = this.toString();\r\n    }\r\n\r\n    get upperBound(){\r\n        return this.numUpperBound;\r\n    }\r\n\r\n    toggleVisibility() {\r\n        this.isVisible = !this.isVisible;\r\n    }\r\n\r\n    toString() {\r\n        var lower;\r\n        var upper;\r\n\r\n        if (this.lowerBound === '-1') {\r\n            lower = 'n'\r\n        } else {\r\n            lower = this.lowerBound;\r\n        }\r\n\r\n        if (this.upperBound === '-1') {\r\n            upper = 'n'\r\n        } else {\r\n            upper = this.upperBound;\r\n        }\r\n\r\n        if (lower === upper) {\r\n            return lower;\r\n        } else {\r\n            return lower + \" .. \" + upper\r\n        }\r\n    }\r\n\r\n    getDescription(){\r\n        return `Cardinality of Edge End ${this.attachedToUUID}`;\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { SemanticIdentity } from \"./SemanticIdentity\";\r\nimport { Cardinality } from \"./Cardinality\";\r\nimport * as ArrowProps from \"./ArrowProperties\";\r\nimport { getCurrentGraph, getCurrentContainerKey } from \"../UIElements/CanvasDraw\";\r\n\r\n\r\n// Object that contains all the parts of an arrow ending including:\r\n// Head type\r\n// Cardinality\r\n// Label\r\n//\r\n// Used in the Arrow class\r\nexport class EdgeEnd {\r\n    constructor(attachedToUUID, headType = ArrowProps.EdgeEnd.NONE, cardinality, label = \"\", semanticIdentity) {\r\n        this.attachedToUUID = attachedToUUID;\r\n        this.typeName = \"EdgeEnd\";\r\n\r\n        if (semanticIdentity !== undefined){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            this.semanticIdentity = new SemanticIdentity(this.toString(), this.getDescription())\r\n        }\r\n        \r\n        this.headType = headType;\r\n        \r\n        if (cardinality !== undefined){\r\n            this.cardinality = cardinality;\r\n        } else {\r\n            this.cardinality = new Cardinality(1, 1, this.semanticIdentity.UUID);\r\n        }\r\n\r\n        this.label = label;\r\n\r\n        // For deciding where it goes in the graph\r\n        this.edgeEndContainerKey = getCurrentContainerKey();\r\n\r\n        // For rendering the object\r\n        this.edgeEndGraphKey = getCurrentGraph();\r\n    }\r\n\r\n    // Set the graph key\r\n    setGraphKey(key){\r\n        this.edgeEndGraphKey = key;\r\n    }\r\n\r\n    // Return the graph key\r\n    getGraphKey(){\r\n        return this.edgeEndGraphKey;\r\n    }\r\n\r\n    // Set the Container key. Done in ContainmentTree.js\r\n    setContainerKey(key){\r\n        this.edgeEndContainerKey = key;\r\n    }\r\n\r\n    // Return the Container key. Done in CanvasDraw.js\r\n    getContainerKey(key){\r\n        return this.edgeEndContainerKey;\r\n    }\r\n\r\n    set type(newType){\r\n        this.headType = newType;\r\n        this.semanticIdentity.name = this.toString();\r\n    }\r\n\r\n    get type(){\r\n        return this.headType;\r\n    }\r\n\r\n    toString(){\r\n        return `${this.type} type Edge End`;\r\n    }\r\n\r\n    getDescription(){\r\n        return `Edge end of ${this.attachedToUUID}`;\r\n    }\r\n\r\n    updateCardinality(lowerBound, upperBound, visibility){\r\n        this.cardinality.lowerBound = lowerBound;\r\n        this.cardinality.upperBound = upperBound;\r\n        this.cardinality.visibility = visibility;\r\n    }\r\n\r\n    drawLines(canvasContext, points, strokeColour, fillColour) {\r\n        canvasContext.strokeStyle = strokeColour;\r\n        if (fillColour !== undefined) {\r\n            canvasContext.fillStyle = fillColour;\r\n        }\r\n\r\n        canvasContext.beginPath();\r\n        canvasContext.moveTo(points[0].X, points[0].Y);\r\n        for (let i = 1; i < points.length; i++) {\r\n            canvasContext.lineTo(points[i].X, points[i].Y)\r\n        }\r\n        \r\n        if (fillColour !== undefined) {\r\n            canvasContext.closePath();\r\n            canvasContext.fill();\r\n        }\r\n        canvasContext.stroke();\r\n\r\n        canvasContext.fillStyle = \"#000\"\r\n        canvasContext.strokeStyle = \"#000\";\r\n    }\r\n\r\n    drawArrowEnd(canvasContext, x, y, angle, lineColour) {\r\n        //Constants\r\n        const strokeLength = 7;\r\n        const angleFromLine = Math.PI/6;\r\n        const angleInverted = angle + Math.PI;\r\n\r\n        //Generate points for the arrowhead\r\n        var arrowPoints = [];\r\n        arrowPoints.push({\r\n            X: x + strokeLength * Math.cos(angleInverted - angleFromLine),\r\n            Y: y + strokeLength * Math.sin(angleInverted - angleFromLine)\r\n        });\r\n        arrowPoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n        arrowPoints.push({\r\n            X: x + strokeLength * Math.cos(angleInverted + angleFromLine),\r\n            Y: y + strokeLength * Math.sin(angleInverted + angleFromLine)\r\n        });\r\n\r\n        //Arrowhead drawing\r\n        this.drawLines(canvasContext, arrowPoints, lineColour)\r\n    }\r\n\r\n    drawTriangleEnd(canvasContext, x, y, angle, lineColour, fillColour = \"#FFF\") {\r\n        //Constants\r\n        const sideLength = 7;\r\n        const deg30 = Math.PI / 6;\r\n        const angleInverted = angle + Math.PI;\r\n\r\n        //Generate points for the triangle\r\n        var trianglePoints = [];\r\n        trianglePoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n        trianglePoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted - deg30),\r\n            Y: y + sideLength * Math.sin(angleInverted - deg30)\r\n        });\r\n        trianglePoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted + deg30),\r\n            Y: y + sideLength * Math.sin(angleInverted + deg30)\r\n        });\r\n        trianglePoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n\r\n        //Triangle drawing\r\n        this.drawLines(canvasContext, trianglePoints, lineColour, fillColour);\r\n    }\r\n\r\n    drawDiamondEnd(canvasContext, x, y, angle, lineColour, fillColour = \"#FFF\") {\r\n        //Constants\r\n        const sideLength = 7;\r\n        const deg20 = Math.PI / 9;\r\n        const angleInverted = angle + Math.PI;\r\n\r\n        //Generate points for the diamond\r\n        var diamondPoints = [];\r\n        diamondPoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n        diamondPoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted - deg20),\r\n            Y: y + sideLength * Math.sin(angleInverted - deg20)\r\n        });\r\n        diamondPoints.push({\r\n            X: x + sideLength * 2 * Math.cos(angleInverted),\r\n            Y: y + sideLength * 2 * Math.sin(angleInverted)\r\n        });\r\n        diamondPoints.push({\r\n            X: x + sideLength * Math.cos(angleInverted + deg20),\r\n            Y: y + sideLength * Math.sin(angleInverted + deg20)\r\n        });\r\n        diamondPoints.push({\r\n            X: x,\r\n            Y: y\r\n        });\r\n\r\n        //Diamond drawing\r\n        this.drawLines(canvasContext, diamondPoints, lineColour, fillColour);\r\n    }\r\n\r\n    draw(canvasContext, x, y, angle, lineColour){\r\n        switch (this.type) {\r\n            case ArrowProps.EdgeEnd.NONE:\r\n                break;\r\n            case ArrowProps.EdgeEnd.ARROW:\r\n                this.drawArrowEnd(canvasContext, x, y, angle, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.TRIANGLE:\r\n                this.drawTriangleEnd(canvasContext, x, y, angle, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.FILLED_TRIANGLE:\r\n                this.drawTriangleEnd(canvasContext, x, y, angle, lineColour, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.DIAMOND:\r\n                this.drawDiamondEnd(canvasContext, x, y, angle, lineColour);\r\n                break;\r\n            case ArrowProps.EdgeEnd.FILLED_DIAMOND:\r\n                this.drawDiamondEnd(canvasContext, x, y, angle, lineColour, lineColour);\r\n                break;\r\n            default:\r\n                console.log(\"EdgeEnd had unexpected type: %s\", this.type);\r\n        }\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\nimport * as canvasDraw from \"./CanvasDraw\";\r\nimport {LineColourToStringName,} from \"../DataStructures/ArrowProperties\"\r\nimport { ContainmentTree,} from \"./ContainmentTree\";\r\nimport {serverURL} from \".//MainView\"\r\nimport { SketchPicker } from 'react-color';\r\n\r\n// Icons\r\nimport iconVertex from \"../Resources/vertex.svg\";\r\nimport iconEdge from \"../Resources/edge.svg\";\r\nimport iconSelect from \"../Resources/select.svg\"\r\nimport iconSpecialisation from \"../Resources/specialisation.svg\";\r\nimport iconVisibility from \"../Resources/visibility.svg\"\r\n\r\nimport {deleteElement} from \"./CanvasDraw\";\r\nimport { vertexDeleteElement } from './CanvasDraw';\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\n\r\n\r\n//Property Enums\r\nexport const LeftMenuType = {\r\n    TreeView: \"TreeView\",\r\n    Vertex: \"Vertex\",\r\n    Arrow: \"Arrow\",\r\n\r\n    //FTreeView: \"FocussedTreeView\"\r\n\r\n    Artifact: \"Artifact\",\r\n    Container:\"Container\"\r\n\r\n};\r\n\r\nexport const LeftMenuTypeToString = {};\r\nLeftMenuTypeToString[LeftMenuType.TreeView] = \"TreeView\";\r\nLeftMenuTypeToString[LeftMenuType.Vertex] = \"Vertex\";\r\nLeftMenuTypeToString[LeftMenuType.Arrow] = \"Arrow\";\r\nLeftMenuTypeToString[LeftMenuType.Arrow] = \"Artifact\";\r\nLeftMenuTypeToString[LeftMenuType.Arrow] = \"Container\";\r\n\r\nexport const StringToLeftMenuType = {};\r\nLeftMenuTypeToString[\"TreeView\"] = LeftMenuType.TreeView;\r\nLeftMenuTypeToString[\"Vertex\"] = LeftMenuType.Vertex;\r\nLeftMenuTypeToString[\"Arrow\"] = LeftMenuType.Arrow;\r\nLeftMenuTypeToString[\"Artifact\"] = LeftMenuType.Artifact;\r\nLeftMenuTypeToString[\"Container\"] = LeftMenuType.Container;\r\n\r\nexport const Tool = {\r\n    Select: \"Select\",\r\n    Vertex: \"Vertex\",\r\n    Visibility: \"Visibility\",\r\n    Edge: \"Edge\",\r\n    Specialisation: \"Specialisation\",\r\n    Artifact: \"Artifact\",\r\n    Container: \"Container\",\r\n};\r\n\r\n// class to display the left hand menu, where we will be showing\r\n// object editing tools for now\r\nexport class LeftMenu extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            menu: LeftMenuType.TreeView,\r\n            selectedObject: null,\r\n            fileNames: [],\r\n            title: \"\",\r\n            content: [],\r\n\r\n        };\r\n        this.setTitle = this.setTitle.bind(this);\r\n        this.setContent = this.setContent.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        this.formRef = null;\r\n\r\n        this.setFormRef = element =>{\r\n            this.formRef = element;\r\n        };\r\n\r\n        this.setIcons();\r\n\r\n    }\r\n    handleChange(event){\r\n        this.setState({title: event.target.value})\r\n        this.setState({title:\"\"})\r\n        this.setTitle();\r\n        this.setContent();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.menu = this.props.mainState.menu;\r\n        this.selectedItem = this.props.mainState.drawMode;\r\n        this.props.setMode(this.selectedItem)\r\n        document.addEventListener(\"keydown\", this.onKeyPressed.bind(this));  \r\n    }\r\n\r\n\r\n    //For quickKeys\r\n    onKeyPressed(e) {\r\n        if (e.keyCode === 46){\r\n            if(this.state.selectedObject.typeName === \"Vertex\"){\r\n                vertexDeleteElement(this.state.selectedObject);\r\n            }\r\n            else{\r\n                deleteElement(this.state.selectedObject);\r\n            }\r\n            this.setState({menu:\"TreeView\"});\r\n            canvasDraw.drawAll();\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n    static getDerivedStateFromProps(props,state) {\r\n\r\n        return {\r\n            menu: props.mainState.menu,\r\n            selectedObject: props.mainState.selectedObject\r\n\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n\r\n        let leftMenu = document.getElementById(\"VertexMenu\");\r\n        if(leftMenu === null){\r\n            leftMenu = document.getElementById(\"ArrowMenu\");\r\n        }\r\n        if(leftMenu !== null){\r\n            leftMenu.addEventListener(\"keypress\", (e) => {\r\n                if(e.key === \"Enter\") {\r\n                    e.preventDefault();\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    setIcons() {\r\n        fetch(serverURL + '/icons/list',{\r\n            method:'GET',\r\n            headers: {\r\n                'Accept': '*/*',\r\n            },\r\n        })\r\n            .then((res) => {return res.json()})\r\n            .then((data) => {\r\n                let fileNames = [];\r\n                data.icons.forEach((icon) => {\r\n                    fileNames.push(icon)\r\n                });\r\n                this.setState({fileNames:fileNames})\r\n            })\r\n    }\r\n\r\n    //VERTEX SETTERS\r\n    setTitle() {\r\n        let newTitle = document.getElementById(\"LeftTitle\").value;\r\n        this.state.selectedObject.setTitle(newTitle);\r\n        canvasDraw.updateVertex(this.state.selectedObject);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n\r\n    setContent() {\r\n        let newContent = document.getElementById(\"LeftContent\").value;\r\n        newContent = newContent.split(\"\\n\");\r\n        this.state.selectedObject.setContent(newContent);\r\n        canvasDraw.updateVertex(this.state.selectedObject);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    //ARROW SETTERS\r\n    setLineType() {\r\n        let newLineType = document.getElementById(\"LineType\").value;\r\n        this.state.selectedObject.setLineType(newLineType);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    setColour() {\r\n        let newColour = document.getElementById(\"LineColour\").value;\r\n        this.state.selectedObject.setLineColour(newColour);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    setStartLabel() {\r\n        let newLabel = document.getElementById(\"SourceLabel\").value;\r\n        this.state.selectedObject.setStartLabel(newLabel);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    setEndLabel() {\r\n        let newLabel = document.getElementById(\"DestLabel\").value;\r\n        this.state.selectedObject.setEndLabel(newLabel);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    updateCardinality() {\r\n        let sourceLowerBound = document.getElementById(\"sourceFromCardindality\").value;\r\n        let sourceUpperBound = document.getElementById(\"sourceToCardindality\").value;\r\n        let currentSourceVisibility = this.state.selectedObject.getSourceCardinalityVisibility();\r\n        let destLowerBound = document.getElementById(\"destFromCardindality\").value;\r\n        let destUpperBound = document.getElementById(\"destToCardindality\").value;\r\n        let currentDestVisibility = this.state.selectedObject.getDestCardinalityVisibility();\r\n\r\n        this.state.selectedObject.updateSourceCardinality(sourceLowerBound, sourceUpperBound, currentSourceVisibility);\r\n        this.state.selectedObject.updateDestCardinality(destLowerBound, destUpperBound, currentDestVisibility);\r\n\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    toggleSourceCardinalityVisibility() {\r\n        this.state.selectedObject.toggleSourceCardinalityVisibility();\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    toggleDestCardinalityVisibility() {\r\n        this.state.selectedObject.toggleDestCardinalityVisibility();\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    toggleAbstract(){\r\n        this.state.selectedObject.toggleAbstract()\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    getS23MIconsSelector() {\r\n        let dropdownOptions = [<div className=\"DropdownItem\"><div className=\"dropdownLabel\">Name</div><div className=\"checkBoxContainer\">Text</div><div className=\"checkBoxContainer\">Icon</div></div>];\r\n\r\n        let name = \"\";\r\n        this.state.fileNames.forEach(fileName => {\r\n            if (fileName.slice(-6, -4) === \"_n\") {\r\n                name = fileName.slice(0, -6);\r\n                dropdownOptions.push(<div className=\"DropdownItem\" ref={fileName}> <div className=\"dropdownLabel\">{name}</div> <div className=\"checkBoxContainer\"><input type='checkbox' disabled=\"disabled\" /> </div>  <div className=\"checkBoxContainer\"><input type='checkbox' defaultChecked={this.shouldIconBeSelected(fileName)} onClick={() => {this.setIcon(fileName)}}/></div> </div>)\r\n            } else {\r\n                name = fileName.slice(0, -4);\r\n                dropdownOptions.push(<div className=\"DropdownItem\" ref={fileName}> <div className=\"dropdownLabel\">{name}</div> <div className=\"checkBoxContainer\"><input type='checkbox' defaultChecked={this.shouldTextBeSelected(fileName)} onClick={() => {this.setText(fileName)}} /> </div>  <div className=\"checkBoxContainer\"><input type='checkbox' defaultChecked={this.shouldIconBeSelected(fileName)} onClick={() => {this.setIcon(fileName)}}/></div> </div>)\r\n            }\r\n        });\r\n\r\n        return <DropdownButton title=\"Category Selector\" name=\"Icons\" id=\"IconSelector\" className=\"IconSelector\">\r\n            {dropdownOptions}\r\n        </DropdownButton>;\r\n    }\r\n\r\n    getVertexColour = () => {\r\n        return this.state.selectedObject.getColour()\r\n    };\r\n\r\n    setVertexColour = (colour) =>{\r\n        this.state.selectedObject.setColour(colour.hex);\r\n        canvasDraw.updateVertex(this.state.selectedObject);\r\n        canvasDraw.drawAll()\r\n    };\r\n\r\n    getColourPicker() {\r\n        return <DropdownButton title = \"Colour Selector\" id = \"ColourSelector\">\r\n        <SketchPicker\r\n            color={this.getVertexColour}\r\n            onChangeComplete={this.setVertexColour}\r\n            presetColors = {[\"#FFD5A9\",\"#F5B942\",\"#FFFFFF\"]}\r\n        /></DropdownButton>\r\n    }\r\n\r\n    shouldTextBeSelected(fileName) {\r\n        return this.state.selectedObject.isTextSet(fileName)\r\n    }\r\n\r\n    shouldIconBeSelected(fileName) {\r\n        return this.state.selectedObject.isIconSet(fileName)\r\n    }\r\n\r\n    setText(fileName) {\r\n        this.state.selectedObject.setText(fileName);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    setIcon(fileName) {\r\n        this.state.selectedObject.setIcon(fileName);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    setNavigable(side){\r\n\r\n        this.state.selectedObject.toggleNavigable(side);\r\n\r\n        document.getElementById(\"SourceIsNavigable\").checked = this.state.selectedObject.getNavigable(0);\r\n        document.getElementById(\"DestIsNavigable\").checked = this.state.selectedObject.getNavigable(1);\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    setAggregation(side){\r\n        if(!this.state.selectedObject.getNavigable(side)){\r\n            this.state.selectedObject.toggleNavigable(side);\r\n        }\r\n        this.state.selectedObject.toggleAggregation(side);\r\n        let SourceAggregation = this.state.selectedObject.getAggregation(0);\r\n        let DestAggregation = this.state.selectedObject.getAggregation(1);\r\n        if(SourceAggregation) {\r\n            document.getElementById(\"SourceIsNavigable\").checked = true;\r\n        }\r\n        if(DestAggregation){\r\n            document.getElementById(\"DestIsNavigable\").checked = true;\r\n        }\r\n        document.getElementById(\"SourceIsAggregation\").checked = SourceAggregation;\r\n        document.getElementById(\"DestIsAggregation\").checked = DestAggregation;\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n    deselectElement(){\r\n        this.props.setLeftMenu(null);\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    showTreeView(){\r\n        this.state.selectedObject(null)\r\n        canvasDraw.drawAll();\r\n    }\r\n\r\n    stripElement(e){\r\n        e.preventDefault()\r\n        this.state.selectedObject.trimPath();\r\n        canvasDraw.drawAll()\r\n    }\r\n\r\n   \r\n    deleteTitle = () => {\r\n        this.setState({title: \"\"})\r\n    };\r\n\r\n\r\n// return the correct menu based on the selected item\r\n    getMenu = () =>{\r\n\r\n        \r\n\r\n        let leftMenuContents;\r\n\r\n        let toolbar = <div id = \"Toolbar\" className = \"Toolbar\">\r\n            <div id = \"Select\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Select)}><img src={iconSelect} alt =\"Select\"/></div>\r\n\r\n            <div id = \"Vertex\" className=\"ToolbarItem\" onClick={() => {this.props.setMode(Tool.Vertex); }} onKeyDown={() => this.onKeyPressed()}    ><img src={iconVertex} alt =\"Vertex\"/></div>\r\n\r\n            <div id = \"Edge\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Edge)}><img src={iconEdge} alt =\"Edge\"/></div>\r\n\r\n            <div id = \"Specialisation\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Specialisation)}><img src={iconSpecialisation} alt =\"Specialisation\"/></div>\r\n            \r\n            <div id = \"Visibility\" className=\"ToolbarItem\" onClick={() => this.props.setMode(Tool.Visibility)}><img src={iconVisibility} alt =\"Visibility\"/></div>\r\n\r\n        </div>;\r\n\r\n        if (this.state.menu === LeftMenuType.TreeView) {\r\n            leftMenuContents = <ContainmentTree setLeftMenu = {this.props.setLeftMenu} />\r\n\r\n        } else if (this.state.menu === LeftMenuType.Vertex) {\r\n            canvasDraw.drawAll();\r\n            \r\n            leftMenuContents = <div id = \"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" value={this.state.selectedObject.title} onInput={this.handleChange}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Content</label>\r\n                <textarea id=\"LeftContent\" className =\"LeftContent\" value={this.state.selectedObject.getContentAsString()} onInput={this.handleChange}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getS23MIconsSelector()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getColourPicker()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Is Abstract?</label>\r\n                <input type=\"checkbox\" id=\"IsAbstract\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAbstract()} onClick={() => this.toggleAbstract()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => { vertexDeleteElement(this.state.selectedObject); this.deselectElement()}}>Remove</button>\r\n\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                \r\n\r\n            </div>;\r\n            \r\n        } else if (this.state.menu === LeftMenuType.Artifact) {\r\n            canvasDraw.drawAll();\r\n\r\n            leftMenuContents = <form id=\"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.title} onKeyUp={() => this.setTitle()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Content</label>\r\n                <textarea id=\"LeftContent\" className=\"LeftContent\" defaultValue={this.state.selectedObject.getContentAsString()} onKeyUp={() => this.setContent()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getS23MIconsSelector()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getColourPicker()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Is Abstract?</label>\r\n                <input type=\"checkbox\" id=\"IsAbstract\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAbstract()} onClick={() => this.toggleAbstract()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => { deleteElement(this.state.selectedObject); this.setState({ menu: \"TreeView\" }) }} placeholder=\"NoTabIndex\">Remove</button>\r\n            </form>;\r\n\r\n        } else if (this.state.menu === LeftMenuType.Container) {\r\n            canvasDraw.drawAll();\r\n            leftMenuContents = <form id=\"VertexMenu\">\r\n                <div className=\"LeftHeader\">Vertex Properties</div>\r\n                <label className=\"LeftLabel\">Title</label>\r\n                <input id=\"LeftTitle\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.title} onKeyUp={() => this.setTitle()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Content</label>\r\n                <textarea id=\"LeftContent\" className=\"LeftContent\" defaultValue={this.state.selectedObject.getContentAsString()} onKeyUp={() => this.setContent()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {this.getS23MIconsSelector()}\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Is Abstract?</label>\r\n                <input type=\"checkbox\" id=\"IsAbstract\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAbstract()} onClick={() => this.toggleAbstract()} />\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => { deleteElement(this.state.selectedObject); this.setState({ menu: \"TreeView\" }) }} placeholder=\"NoTabIndex\">Remove</button>\r\n            </form>;\r\n\r\n        }else if (this.state.menu === LeftMenuType.Arrow) {\r\n\r\n            if(this.state.selectedObject.edgeType === Tool.Edge){\r\n\r\n            leftMenuContents = <form id = \"ArrowMenu\">\r\n                <div className=\"LeftHeader\">Edge Properties</div>\r\n\r\n                <label className=\"LeftLabel\">Source Is Navigable?</label>\r\n                <input type=\"checkbox\" id=\"SourceIsNavigable\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getNavigable(0)} onClick={() => this.setNavigable(0)}/>\r\n\r\n                <label className=\"LeftLabel\">Destination Is Navigable?</label>\r\n                <input type=\"checkbox\" id=\"DestIsNavigable\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getNavigable(1)} onClick={() => this.setNavigable(1)}/>\r\n\r\n                <label className=\"LeftLabel\">Source Is Aggregation?</label>\r\n                <input type=\"checkbox\" id=\"SourceIsAggregation\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAggregation(0)} onClick={() => this.setAggregation(0)}/>\r\n\r\n                <label className=\"LeftLabel\">Destination Is Aggregation?</label>\r\n                <input type=\"checkbox\" id=\"DestIsAggregation\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getAggregation(1)} onClick={() => this.setAggregation(1)}/>\r\n\r\n                <label className=\"LeftLabel\">Line Colour</label>\r\n                <select name=\"LineColour\" id=\"LineColour\" className=\"LeftSelector\" defaultValue={LineColourToStringName[this.state.selectedObject.lineColour]} onChange={() => this.setColour()}>\r\n                    <option value = \"Black\">Black</option>\r\n                    <option value = \"Red\">Red</option>\r\n                    <option value = \"Blue\">Blue</option>\r\n                    <option value = \"Green\">Green</option>\r\n                </select>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                {/* -1 represents n or *  */}\r\n                <label className=\"LeftLabel\">Source Cardinality</label>\r\n                <div className=\"CardinalityArea\"> <div className=\"LeftCheckboxLabel\"> Visible: </div> <input type=\"checkbox\" id = \"sourceCardinalityShown\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getSourceCardinalityVisibility()} onChange={() => {this.toggleSourceCardinalityVisibility();canvasDraw.drawAll()}}/>\r\n                    <input type=\"number\" id = \"sourceFromCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getSourceCardinalityLowerBound()} min=\"0\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                    <label>..</label>\r\n                    <input type=\"number\" id = \"sourceToCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getSourceCardinalityUpperBound()} min=\"-1\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                </div>\r\n\r\n\r\n                <label className=\"LeftLabel\">Destination Cardinality</label>\r\n                <div className=\"CardinalityArea\"> <div className=\"LeftCheckboxLabel\">Visible:</div> <input type=\"checkbox\" id = \"destCardinalityShown\" className=\"LeftCheckbox\" defaultChecked={this.state.selectedObject.getDestCardinalityVisibility()} onChange={() => {this.toggleDestCardinalityVisibility();canvasDraw.drawAll()}}/>\r\n                    <input type=\"number\" id = \"destFromCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getDestCardinalityLowerBound()} min=\"0\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                    <label>..</label>\r\n                    <input type=\"number\" id = \"destToCardindality\" className=\"CardinalityBox\" defaultValue={this.state.selectedObject.getDestCardinalityUpperBound()} min=\"-1\" max=\"25\" onChange={() => this.updateCardinality()}/>\r\n                </div>\r\n\r\n                <label className=\"LeftLabel\">Source Label</label>\r\n                    <input id=\"SourceLabel\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.sourceEdgeEnd.label} onKeyUp={() => this.setStartLabel()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n                <label className=\"LeftLabel\">Destination Label</label>\r\n                    <input id=\"DestLabel\" className=\"LeftTitle\" defaultValue={this.state.selectedObject.destEdgeEnd.label} onKeyUp={() => this.setEndLabel()}/>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => { deleteElement(this.state.selectedObject); this.deselectElement()}}>Remove</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n                <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                <label className=\"LeftSpacer\">&nbsp;</label>\r\n\r\n            </form>\r\n            }else{\r\n                leftMenuContents = <form id = \"ArrowMenu\">\r\n                    <div className=\"LeftHeader\">Selected Edge</div>\r\n                    <button className=\"LeftMenuButton\" onClick={() => this.deselectElement()}>Deselect</button>\r\n                    <label className=\"LeftSpacer\">&nbsp;</label>\r\n                    <button className=\"LeftMenuButton\" onClick={() => {deleteElement(this.state.selectedObject);this.setState({menu:LeftMenuType.TreeView,selectedObject:null})}}>Remove</button>\r\n                    </form>\r\n            }\r\n        }\r\n\r\n        return <div>{toolbar}<form ref={this.setFormRef} className={this.props.className}>\r\n            {leftMenuContents}\r\n            </form></div>;\r\n        \r\n    };\r\n\r\n    render() {\r\n        let menu = this.getMenu();\r\n        if (this.formRef !== null) {\r\n            this.formRef = null;\r\n        }\r\n        return menu;\r\n    }\r\n\r\n\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { SemanticIdentity } from \"./SemanticIdentity\";\r\nimport {drawMarker, getDistance,} from \"../UIElements/CanvasDraw\";\r\nimport {getGraphContainerKey} from \"../UIElements/ContainmentTree\";\r\nimport * as ArrowProps from \"./ArrowProperties\";\r\nimport { EdgeEnd } from \"./EdgeEnd\";\r\nimport {Tool} from \"../UIElements/LeftMenu\";\r\nimport * as canvasDraw from \"../UIElements/CanvasDraw\"\r\n\r\nexport class Arrow {\r\n    // Connects an arrow fromVertex to toVertex\r\n    // pathData is an array of objects that can either be a:\r\n    //      0) Vertex Data\r\n    //         [0, UUID, xPercentage, yPercentage]\r\n    //         The Percentage data is the relative percentage\r\n    //              e.g. 0,0 represents top left, 1,1 bottom right etc\r\n    //      1) Array containing an x and y element\r\n    //         [1, x, y]\r\n    constructor(objectsList, pathData, type, semanticIdentity) {\r\n        this.typeName = \"Arrow\";\r\n\r\n        if (semanticIdentity !== undefined || objectsList === null){\r\n            this.semanticIdentity = semanticIdentity;\r\n        } else {\r\n            if (objectsList.length > 1) {\r\n                this.semanticIdentity = new SemanticIdentity(\"Arrow from \" + objectsList[0].semanticIdentity.UUID + \" to \" + objectsList[1].semanticIdentity.UUID, \"\", \"\", \"\", undefined, []);\r\n            } else if (objectsList.length === 1) {\r\n                this.semanticIdentity = new SemanticIdentity(\"Arrow connecting \" + objectsList[0].semanticIdentity.UUID, \"\", \"\", \"\", undefined, []);\r\n            } else {\r\n                this.semanticIdentity = new SemanticIdentity(\"Arrow connecting 1 or less vertices\", \"\", \"\", \"\", undefined, []);\r\n            }\r\n        }\r\n\r\n        this.sourceEdgeEnd = new EdgeEnd(this.semanticIdentity.UUID);\r\n        this.destEdgeEnd = new EdgeEnd(this.semanticIdentity.UUID);\r\n\r\n        // Ensure there are at least 2 points\r\n        if (pathData.length === 1) pathData.push(pathData[0]);\r\n        // Save pathData for later\r\n        this.pathData = pathData;\r\n\r\n        this.sourceVertexUUID = null;\r\n        this.destVertexUUID = null;\r\n        this.updateAttachedVertices();\r\n\r\n        // Construct Path\r\n        this.rebuildPath();\r\n        \r\n        // Type\r\n\r\n        this.lineColour = ArrowProps.LineColour.BLACK;\r\n        this.lineType = ArrowProps.LineType.SOLID;\r\n\r\n        if (type === Tool.Edge || type === Tool.Specialisation || type === Tool.Visibility) {\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n        }else{\r\n            console.log(\"Failed to find correct tool\");\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n        }\r\n\r\n        if (type === Tool.Edge) {\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n            this.typeName = \"Arrow\";\r\n        }else if (type === Tool.Specialisation){\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.TRIANGLE\r\n            this.typeName = \"Arrow\";\r\n        }else if (type === Tool.Visibility){\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            this.lineType = ArrowProps.LineType.DASHED\r\n            this.typeName = \"Arrow\";\r\n        }else{\r\n            console.log(\"Failed to find correct tool\");\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n        }\r\n\r\n        this.edgeType = type;\r\n\r\n        this.selected = false;\r\n\r\n        this.sourceIsNavigable = false;\r\n        this.destIsNavigable = false;\r\n        this.sourceIsAggregation = false;\r\n        this.destIsAggregation = false;\r\n\r\n        // Graph key for rendering\r\n        this.arrowGraphKey = canvasDraw.getCurrentGraph();\r\n\r\n        // Container key for the arrow for placing in tree\r\n        this.arrowContainerKey = getGraphContainerKey(this.arrowGraphKey);\r\n    }\r\n\r\n    // Set the Graph key\r\n    setGraphKey(key){\r\n        this.arrowGraphKey = key;\r\n    }\r\n\r\n    getGraphKey(){\r\n        return this.arrowGraphKey;\r\n    }\r\n\r\n    // Set the Container key. This is done in ContainmentTree.js\r\n    setContainerKey(key){\r\n        this.arrowContainerKey = key;\r\n    }\r\n\r\n    // Return the Container key. This is called in CanvasDraw\r\n    getContainerKey(){\r\n        return this.arrowContainerKey;\r\n    }\r\n\r\n    toggleNavigable(side){\r\n        if(side === 0) {\r\n            this.sourceIsNavigable = !this.sourceIsNavigable;\r\n        }else if(side === 1){\r\n            this.destIsNavigable = !this.destIsNavigable;\r\n        }\r\n        if(this.sourceIsAggregation){\r\n            this.sourceIsNavigable = true;\r\n        }\r\n        if(this.destIsAggregation){\r\n            this.destIsNavigable = true;\r\n        }\r\n\r\n        if(this.sourceIsNavigable && this.destIsNavigable){\r\n            if(this.sourceIsAggregation){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }\r\n            else if(this.destIsAggregation){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n            }else{\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }\r\n        }else if(this.sourceIsNavigable){\r\n            if(this.sourceIsAggregation){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }else {\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }\r\n        }else if(this.destIsNavigable){\r\n            if(this.destIsAggregation){\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }else {\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            }\r\n        }else{\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE;\r\n        }\r\n\r\n    }\r\n\r\n    toggleAggregation(side){\r\n        if(side === 0){\r\n            this.sourceIsAggregation = !this.sourceIsAggregation;\r\n            if(this.destIsAggregation && this.sourceIsAggregation){\r\n                this.destIsAggregation = false;\r\n            }\r\n        }else{\r\n            this.destIsAggregation = !this.destIsAggregation;\r\n            if(this.destIsAggregation && this.sourceIsAggregation){\r\n                this.sourceIsAggregation = false;\r\n            }\r\n        }\r\n\r\n\r\n        if(this.sourceIsAggregation) {\r\n            this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n            if(this.destIsNavigable){\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }else{\r\n                this.destEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n            }\r\n        }else if(this.destIsAggregation){\r\n            this.destEdgeEnd.type = ArrowProps.EdgeEnd.FILLED_DIAMOND;\r\n            if(this.sourceIsNavigable){\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.ARROW;\r\n            }else{\r\n                this.sourceEdgeEnd.type = ArrowProps.EdgeEnd.NONE\r\n            }\r\n        }else{\r\n            // this updates the arrow heads so they are correct\r\n            this.toggleNavigable(100)\r\n        }\r\n    }\r\n\r\n    getNavigable(side){\r\n        if(side === 0){\r\n            return this.sourceIsNavigable;\r\n        }else{\r\n            return this.destIsNavigable;\r\n        }\r\n\r\n    }\r\n\r\n    getAggregation(side){\r\n        if(side === 0){\r\n            return this.sourceIsAggregation\r\n        }else{\r\n            return this.destIsAggregation\r\n        }\r\n\r\n    }\r\n\r\n    trimPath(){\r\n        this.pathData = [this.pathData[0], this.pathData[this.pathData.length-1]];\r\n        this.path = [this.path[0], this.path[this.path.length-1]];\r\n    }\r\n\r\n    // Rebuilds path from cached pathData\r\n    rebuildPath() {\r\n\r\n        let connectedObjectUUIDs = this.getObjectUUIDList();\r\n        let objects = [];\r\n\r\n        connectedObjectUUIDs.forEach((UUID) => {\r\n            objects.push(canvasDraw.getObjectFromUUID(UUID))\r\n        });\r\n\r\n        // X, Y data for path\r\n        this.path = [];\r\n\r\n        for (let i = 0; i < this.pathData.length; i++) {\r\n            // Check if its case 0 or 1\r\n            let pathItem = this.pathData[i];\r\n\r\n            //If the first element of a PathItem is 0, the second element contains the UUID of an object\r\n            if (pathItem[0] === 0) {\r\n                this.path.push(this.getZerothCasePathItem(objects, pathItem));\r\n            }\r\n            //If the first element is 1, the next two elements are the X and Y points, respectively\r\n            else if (pathItem[0] === 1) {\r\n                this.path.push([pathItem[1], pathItem[2]]);\r\n            } else {\r\n                console.error(\"Invalid PathData case, wrong case\", pathItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Gets pathItem from object (hopefully a vertex) based on UUID\r\n    // will come back to this to sort out arrows overlapping on creation\r\n    // for extra clarity pathItem[2] is where the arrow from/end is on the x axis of the vertex(0..1)\r\n    // and pathItem[3] is where the arrow is from/end is on the y axis of the vertex(0..1) - cooper\r\n    getZerothCasePathItem(objects, pathItem) {\r\n        for (let i = 0; i < objects.length; i++) {\r\n           // if(objects[0].semanticIdentity.UUID === objects[1].semanticIdentity.UUID){\r\n\r\n           // }\r\n            if (objects[i] !== null && objects[i] !== undefined) {\r\n                if (objects[i].semanticIdentity.UUID === pathItem[1]) {\r\n                    \r\n                    \r\n                  //  let minX = objects[i].x\r\n                   // let maxX = objects[i].x + objects[i].width\r\n                   // let minY = objects[i].y\r\n                   // let maxY = objects[i].y + objects[i].realHeight // get the minimum and maximum x,y coords for the object. \r\n                                                                    // this will serve as a range so that arrows can't automatically pass these points\r\n                    let newX = pathItem[2]*objects[i].width + objects[i].x;\r\n                    let newY = pathItem[3]*objects[i].realHeight + objects[i].y;\r\n                    let x = newX\r\n                    let y = newY\r\n                    \r\n                 //   if (newX <= minX){\r\n                  //      x = minX\r\n                  //  }\r\n                  //  else if (newX >= maxX){\r\n                    //    x = maxX\r\n                    //}\r\n                    //else if (newY <= minY){\r\n                      //  y = minY\r\n                    //}\r\n                    //else if (newY >= maxY){\r\n                     //   y = maxY\r\n                    //}\r\n                   \r\n              \r\n                    return [x, y]\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(\" [Ignore this when importing] Could not find vertex to connect for pathItem\", pathItem);\r\n        return null;\r\n    }\r\n\r\n    getObjectUUIDList(){\r\n        let output = [];\r\n            this.pathData.forEach((item) => {\r\n                let index = this.pathData.indexOf(item);\r\n                if(item == null){\r\n                    this.pathData[index] = [1,this.path[index][0],this.path[index][1]]\r\n                }\r\n                if (this.pathData[index][0] === 0) {\r\n                    output.push(item[1])\r\n                }\r\n            });\r\n        return output\r\n    }\r\n\r\n    updateAttachedVertices() {\r\n        var pathStart = this.pathData[0];\r\n        var pathEnd = this.pathData[this.pathData.length - 1];\r\n\r\n        if (pathStart[0] === 0) {\r\n            this.sourceVertexUUID = pathStart[1];\r\n        } else {\r\n            this.sourceVertexUUID = null;\r\n        }\r\n\r\n        if (pathEnd[0] === 0) {\r\n            this.destVertexUUID = pathEnd[1];\r\n        } else {\r\n            this.destVertexUUID = null;\r\n        }\r\n    }\r\n\r\n    setSelected(selected) {\r\n        this.selected = selected;\r\n    }\r\n\r\n    updateSourceCardinality(lowerBound, upperBound, visibility) {\r\n        this.sourceEdgeEnd.updateCardinality(lowerBound, upperBound, visibility);\r\n    }\r\n\r\n    getSourceCardinalityVisibility() {\r\n        return this.sourceEdgeEnd.cardinality.isVisible;\r\n    }\r\n\r\n    toggleSourceCardinalityVisibility() {\r\n        this.sourceEdgeEnd.cardinality.toggleVisibility();\r\n    }\r\n\r\n    getSourceCardinalityLowerBound() {\r\n        return this.sourceEdgeEnd.cardinality.lowerBound;\r\n    }\r\n\r\n    getSourceCardinalityUpperBound() {\r\n        return this.sourceEdgeEnd.cardinality.upperBound;\r\n    }\r\n\r\n    updateDestCardinality(lowerBound, upperBound, visibility) {\r\n        this.destEdgeEnd.updateCardinality(lowerBound, upperBound, visibility);\r\n    }\r\n\r\n    getDestCardinalityVisibility() {\r\n        return this.destEdgeEnd.cardinality.isVisible;\r\n    }\r\n\r\n    toggleDestCardinalityVisibility() {\r\n        this.destEdgeEnd.cardinality.toggleVisibility();\r\n    }\r\n\r\n    getDestCardinalityLowerBound() {\r\n        return this.destEdgeEnd.cardinality.lowerBound;\r\n    }\r\n\r\n    getDestCardinalityUpperBound() {\r\n        return this.destEdgeEnd.cardinality.upperBound;\r\n    }\r\n\r\n    setStartLabel(label) {\r\n        this.sourceEdgeEnd.label = label;\r\n    }\r\n\r\n    setEndLabel(label) {\r\n        this.destEdgeEnd.label = label;\r\n    }\r\n\r\n    setLineColour(lineColour) {\r\n        let val = ArrowProps.StringNameToLineColour[lineColour];\r\n        if (val !== undefined) {\r\n            this.lineColour = val;\r\n        } else {\r\n            console.log(\"Attempted to assign invalid lineColour: %s\", lineColour);\r\n        }\r\n    }\r\n\r\n    setLineType(lineType) {\r\n        let val = ArrowProps.StringToLineType[lineType];\r\n        if (val !== undefined) {\r\n            this.lineType = val;\r\n        } else {\r\n            console.log(\"Attempted to assign invalid lineType: %s\", lineType);\r\n        }\r\n    }\r\n\r\n    // Creates nodes for an algorithmn to path find around a vertex\r\n    createPathNodesForVertex(vertex, nodeIndex, d) {\r\n        // Set ids\r\n        let topLeft     = nodeIndex++;\r\n        let top         = nodeIndex++;\r\n        let topRight    = nodeIndex++;\r\n        let right       = nodeIndex++;\r\n        let bottomRight = nodeIndex++;\r\n        let bottom      = nodeIndex++;\r\n        let bottomLeft  = nodeIndex++;\r\n        let left        = nodeIndex++;\r\n\r\n        // Create nodes for: fromVertex\r\n        let vertexNodes = [];\r\n        vertexNodes.push([topLeft,     vertex.x-d,              vertex.y+vertex.height+d, [left, top]]);               // Top    Left\r\n        vertexNodes.push([top,         vertex.x+vertex.width/2, vertex.y+vertex.height+d, [topLeft, topRight]]);       // Top\r\n        vertexNodes.push([topRight,    vertex.x+vertex.width+d, vertex.y+vertex.height+d, [top, right]]);              // Top    Right\r\n        vertexNodes.push([right,       vertex.x+vertex.width+d, vertex.y+vertex.height/2, [topRight, bottomRight]]);   //        Right\r\n        vertexNodes.push([bottomRight, vertex.x+vertex.width+d, vertex.y-d,               [right, bottom]]);           // Bottom Right\r\n        vertexNodes.push([bottom,      vertex.x+vertex.width/2, vertex.y-d,               [bottomRight, bottomLeft]]); // Bottom\r\n        vertexNodes.push([bottomLeft,  vertex.x-d,              vertex.y-d,               [bottomRight, left]]);       // Bottom Left\r\n        vertexNodes.push([left,        vertex.x-d,              vertex.y+vertex.height/2, [bottomLeft, topLeft]]);     //        Left\r\n        return [nodeIndex, vertexNodes];\r\n    }\r\n\r\n    drawStartHead(canvasContext) {\r\n        let lineAngle = Math.atan2(this.getSY() - this.getNSY(), this.getSX() - this.getNSX());\r\n        this.sourceEdgeEnd.draw(canvasContext, this.getSX(), this.getSY(), lineAngle, this.lineColour);\r\n    }\r\n\r\n    drawEndHead(canvasContext) {\r\n        let lineAngle = Math.atan2(this.getEY() - this.getNEY(), this.getEX() - this.getNEX());\r\n        this.destEdgeEnd.draw(canvasContext, this.getEX(), this.getEY(), lineAngle, this.lineColour);\r\n    }\r\n\r\n    isPathSegmentLR(startIndex,endIndex){\r\n        let indexSx = this.path[startIndex][0];\r\n        let indexEx = this.path[endIndex][0];\r\n        let indexSy = this.path[startIndex][1];\r\n        let indexEy = this.path[endIndex][1];\r\n\r\n        return Math.abs(indexSx-indexEx) > Math.abs(indexSy-indexEy)\r\n    }\r\n\r\n    getTextOffsets(canvasContext, sourceText, destText, sourceCtext, destCtext) {\r\n        let sourceTextWidth = canvasContext.measureText(sourceText).width;\r\n        let destTextWidth = canvasContext.measureText(destText).width;\r\n        let sourceCtextWidth = canvasContext.measureText(sourceCtext).width;\r\n        let destCtextWidth = canvasContext.measureText(destCtext).width;\r\n        let textHeight = 15;\r\n        // 'M' is the widest possible character\r\n        let charWidth = canvasContext.measureText(\"M\").width;\r\n\r\n        let sxOffset;\r\n        let syOffset;\r\n        let exOffset;\r\n        let eyOffset;\r\n\r\n        let sxOffsetc;\r\n        let syOffsetc;\r\n        let exOffsetc;\r\n        let eyOffsetc;\r\n\r\n        let sxFlip = true;\r\n        let syFlip = true;\r\n        let exFlip = true;\r\n        let eyFlip = true;\r\n\r\n        // true if arrow is landscape, false if arrow is portrait;\r\n        let E1index = this.path.length-2;\r\n        let E2index = this.path.length-1;\r\n\r\n        let startLRArrow = this.isPathSegmentLR(0,1);\r\n        let endLRArrow = this.isPathSegmentLR(E1index,E2index);\r\n\r\n        let SSX = this.path[0][0];\r\n        let SSY = this.path[0][1];\r\n        let SEX = this.path[1][0];\r\n        let SEY = this.path[1][1];\r\n\r\n        let ESX = this.path[E1index][0];\r\n        let ESY = this.path[E1index][1];\r\n        let EEX = this.path[E2index][0];\r\n        let EEY = this.path[E2index][1];\r\n\r\n        if (startLRArrow) {\r\n            if (SSX > SEX) {\r\n                sxFlip = !sxFlip;\r\n            }\r\n        } else {\r\n            if (SSY > SEY) {\r\n                syFlip = !syFlip;\r\n            }\r\n        }\r\n\r\n        if (endLRArrow) {\r\n            if (ESX > EEX) {\r\n                exFlip = !exFlip;\r\n            }\r\n        } else {\r\n            if (ESY > EEY) {\r\n                eyFlip = !eyFlip;\r\n            }\r\n        }\r\n\r\n\r\n        if (sxFlip) {\r\n            sxOffset = charWidth/2;\r\n            if (startLRArrow) {\r\n                sxOffsetc = charWidth/2;\r\n            } else {\r\n                sxOffsetc = -1*(sourceCtextWidth+charWidth/2)\r\n            }\r\n        } else {\r\n            sxOffset = -1*(sourceTextWidth+charWidth/2);\r\n            if (startLRArrow) {\r\n                sxOffsetc = -1*(sourceCtextWidth+charWidth/2)\r\n            } else {\r\n                sxOffsetc = charWidth/2;\r\n            }\r\n        }\r\n        \r\n\r\n        if (syFlip) {\r\n            syOffset = textHeight;\r\n            if (startLRArrow) {\r\n                syOffsetc = -1*(textHeight/2)\r\n            } else {\r\n                syOffsetc = syOffset;\r\n            }\r\n        } else {\r\n            syOffset = -1*(textHeight/2);\r\n            if (startLRArrow) {\r\n                syOffsetc = syOffset;\r\n            } else {\r\n                syOffsetc = -1*(textHeight/2)\r\n            }\r\n        }\r\n\r\n\r\n        //if true arrow moves more in x than in y\r\n        exFlip = !exFlip;\r\n        eyFlip = !eyFlip;\r\n\r\n        if (exFlip) {\r\n            exOffset = charWidth/2;\r\n            if (endLRArrow) {\r\n                exOffsetc = charWidth/2;\r\n            } else {\r\n                exOffsetc = -1*(destCtextWidth+charWidth/2)\r\n            }\r\n        } else {\r\n            exOffset = -1*(destTextWidth+charWidth/2);\r\n            if (endLRArrow) {\r\n                exOffsetc = -1*(destCtextWidth+charWidth/2)\r\n            } else {\r\n                exOffsetc = charWidth/2;\r\n            }\r\n        }\r\n\r\n\r\n        if (eyFlip) {\r\n            eyOffset = textHeight;\r\n            if (endLRArrow) {\r\n                eyOffsetc = -1*(textHeight/2);\r\n            } else {\r\n                eyOffsetc = eyOffset;\r\n            }\r\n        } else {\r\n            eyOffset = -1*(textHeight/2);\r\n            if (endLRArrow) {\r\n                eyOffsetc = textHeight;\r\n            } else {\r\n                eyOffsetc = eyOffset;\r\n            }\r\n        }\r\n\r\n\r\n        return [sxOffset,syOffset,exOffset,eyOffset,sxOffsetc,syOffsetc,exOffsetc,eyOffsetc]\r\n    }\r\n\r\n\r\n\r\n    drawLabelsAndCardinalities(canvasContext) {\r\n        let sourceCardText = this.sourceEdgeEnd.cardinality.toString();\r\n        let destCardText = this.destEdgeEnd.cardinality.toString();\r\n        let Offsets = this.getTextOffsets(canvasContext,this.sourceEdgeEnd.label,this.destEdgeEnd.label,sourceCardText,destCardText);\r\n\r\n        canvasContext.fillStyle = \"#000\";\r\n\r\n        //draw source text\r\n        canvasContext.fillText(this.sourceEdgeEnd.label, this.getSX() + Offsets[0], this.getSY() + Offsets[1]);\r\n\r\n        //draw destination text\r\n        canvasContext.fillText(this.destEdgeEnd.label, this.getEX() + Offsets[2], this.getEY() + Offsets[3]);\r\n\r\n        //draw source cardinality\r\n        if (this.getSourceCardinalityVisibility()) {\r\n            canvasContext.fillText(sourceCardText, this.getSX() + Offsets[4], this.getSY() + Offsets[5]);\r\n        }\r\n\r\n        //draw destination cardinality\r\n        if (this.getDestCardinalityVisibility()) {\r\n            canvasContext.fillText(destCardText, this.getEX() + Offsets[6], this.getEY() + Offsets[7]);\r\n        }\r\n    }\r\n\r\n    draw(canvasContext) {\r\n        let dashLength = 5;\r\n\r\n        switch (this.lineType) {\r\n            case ArrowProps.LineType.SOLID:\r\n                canvasContext.setLineDash([]);\r\n                break;\r\n            case ArrowProps.LineType.DASHED:\r\n                canvasContext.setLineDash([dashLength, dashLength]);\r\n                break;\r\n            default:\r\n                console.log(\"Arrow had invalid lineType: %s\", this.lineType);\r\n        }\r\n\r\n        // Draw\r\n        canvasContext.strokeStyle = this.lineColour;\r\n\r\n        // Draw Lines\r\n        for (let i = 0; i < this.path.length-1; i++) {\r\n            let from = this.path[i];\r\n            let to = this.path[i+1];\r\n\r\n            canvasContext.beginPath();\r\n            canvasContext.moveTo(from[0], from[1]);\r\n            canvasContext.lineTo(to[0], to[1]);\r\n            canvasContext.stroke();\r\n        }\r\n\r\n        canvasContext.strokeStyle = \"#000\";\r\n        canvasContext.setLineDash([]);\r\n\r\n        this.drawStartHead(canvasContext);\r\n        this.drawEndHead(canvasContext);\r\n        //store which labels were flipped and in which direction (x/y)\r\n        this.drawLabelsAndCardinalities(canvasContext);\r\n\r\n        if (this.selected) {\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                let pos = this.path[i];\r\n                drawMarker(pos[0], pos[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    intersects(cx, cy) {\r\n        for (let i = 0; i < this.path.length-1; i++) {\r\n            let from = this.path[i];\r\n            let to = this.path[i+1];\r\n\r\n            if (this.intersectsSegment(cx, cy, from, to)) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Checks if it intersects with one of the line segments\r\n    intersectsSegment(cx, cy, from, to) {\r\n        let m = getDistance(cx, cy, from[0], from[1]);\r\n        let n = getDistance(cx, cy, to[0], to[1]);\r\n        let l = getDistance(from[0], from[1], to[0], to[1]);\r\n\r\n        let threshold = 1;\r\n\r\n        return (m+n-threshold < l);\r\n    }\r\n\r\n    // Get first x/y\r\n    getSX() {\r\n        return this.path[0][0];\r\n    }\r\n    getSY() {\r\n        return this.path[0][1];\r\n    }\r\n\r\n    // Get second x/y\r\n    getNSX() {\r\n        return this.path[1][0];\r\n    }\r\n    getNSY() {\r\n        return this.path[1][1];\r\n    }\r\n\r\n    // Get second last x/y\r\n    getNEX() {\r\n        let index = this.path.length-2;\r\n        if (index < 0) index = 0;\r\n        return this.path[index][0];\r\n    }\r\n    getNEY() {\r\n        let index = this.path.length-2;\r\n        if (index < 0) index = 0;\r\n        return this.path[index][1];\r\n    }\r\n\r\n    // Get last x/y\r\n    getEX() {\r\n        return this.path[this.path.length-1][0];\r\n    }\r\n    getEY() {\r\n        return this.path[this.path.length-1][1];\r\n    }\r\n}","import {addObject, currentObjects, drawAll, getCurrentContainerKey, getTotalGraphs, getTotalContainerKeys as getTotalPackageKeys, \r\n    setCurrentObjects, setNewGraph, setNewContainerKey, setTotalGraphKeys, setTotalContainerKey, updateArrows} from \"../UIElements/CanvasDraw\"\r\n\r\nimport {setTranslationColumns, translationColumns} from \"../UIElements/SemanticDomainEditor\"\r\n\r\nimport {Vertex} from \"../DataStructures/Vertex\";\r\nimport {Arrow} from \"../DataStructures/Arrow\";\r\nimport {Cardinality} from \"../DataStructures/Cardinality\";\r\nimport {EdgeEnd} from \"../DataStructures/EdgeEnd\";\r\nimport {Graph} from \"../DataStructures/Graph\";\r\nimport { SemanticIdentity } from \"../DataStructures/SemanticIdentity\";\r\nimport { getDecoyPackageData, getDecoyGraphData, getDecoyVertexData, getPackageData, getGraphData, \r\n    getSelectedPackageKey, getTreeData, getVertexData, setDecoyPackageData, setDecoyGraphData, setDecoyVertexData, \r\n    setPackageData, setGraphData, setSelectedPackageKey, setTreeData, setVertexData } from \"../UIElements/ContainmentTree\";\r\nimport { getMaxSaveStates } from \"../Config\";\r\n\r\n\r\n//Get all the data that needs to be saved, to restore a session\r\nexport function getSaveData() {\r\n    let vertexObjects = currentObjects.flatten(true, false);\r\n    let arrowObjects = currentObjects.flatten(false, true);\r\n    let treeData = JSON.parse(JSON.stringify(getTreeData()))\r\n    let packageData = JSON.parse(JSON.stringify(getPackageData()))\r\n    let decoyPackageData = JSON.parse(JSON.stringify(getDecoyPackageData()))\r\n    let vertexData = JSON.parse(JSON.stringify(getVertexData()));\r\n    let decoyVertexData = JSON.parse(JSON.stringify(getDecoyVertexData()));\r\n    let graphObjects = JSON.parse(JSON.stringify(getGraphData()));\r\n    let decoyGraphObjects = JSON.parse(JSON.stringify(getDecoyGraphData())) \r\n    let totalContainerKeys = getTotalPackageKeys();\r\n    let totalGraphs = getTotalGraphs();\r\n    let currentGraph = getCurrentContainerKey();\r\n    let currentKey = getCurrentContainerKey();\r\n    let currentPackage = getSelectedPackageKey();\r\n\r\n    let saveData = {\r\n\r\n        translationColumns: translationColumns,\r\n\r\n        vertices: vertexObjects,\r\n        arrows: arrowObjects,\r\n        tree: treeData,\r\n        packages: packageData,\r\n        dPackages: decoyPackageData,\r\n        treeVertex: vertexData,\r\n        dTreeVertex: decoyVertexData,\r\n        graph: graphObjects,\r\n        dGraph: decoyGraphObjects,\r\n        containerKeys: totalContainerKeys,\r\n        graphKeys: totalGraphs,\r\n        currentKey: currentKey,\r\n        currentGra: currentGraph,\r\n        currentPack: currentPackage,\r\n\r\n    };\r\n\r\n    return saveData;\r\n}\r\n\r\n\r\n//Create the JSON file with the save data\r\nexport function save(){\r\n    let JSONdata = getSaveData();\r\n    let dataTransformed = JSON.stringify(JSONdata);\r\n    let dataFile = new Blob([dataTransformed], {type: 'text/json'});\r\n    //default file name\r\n    let title = prompt(\"Please name your file\", 's23m Graph')\r\n\r\n    //Download the file\r\n    let DLelement = document.createElement(\"a\");\r\n    DLelement.href = URL.createObjectURL(dataFile);\r\n    DLelement.download = title + \".json\";\r\n    document.body.appendChild(DLelement);\r\n    DLelement.click();\r\n    document.body.removeChild(DLelement);\r\n\r\n}\r\n\r\n//Replace current editor \"state\" with data from file\r\nexport function load(jsonString){\r\n    if (jsonString == null) return;\r\n    let saveData = JSON.parse(jsonString);\r\n\r\n    //TreeVertices need to convert semanticIdentity back to a sI object\r\n    for(let vert of saveData.treeVertex){\r\n        vert.semanticIdentity = new SemanticIdentity(vert.semanticIdentity.name,vert.semanticIdentity.description,vert.semanticIdentity.abbreviation,\r\n            vert.semanticIdentity.shortAbbreviation,vert.semanticIdentity.UUID,vert.semanticIdentity.translations)\r\n    }\r\n    //vertexs and arrows need to be converted back to their explicit types\r\n    var newVertices = [];\r\n    var newArrows = [];\r\n\r\n    //vertices\r\n    for(let vert of saveData.vertices){\r\n        setSelectedPackageKey(vert.vertexContainerKey)\r\n        setNewContainerKey(vert.vertexContainerKey)\r\n        setNewGraph(vert.vertexGraphKey)\r\n        vert.semanticIdentity = new SemanticIdentity(vert.semanticIdentity.name,vert.semanticIdentity.description,vert.semanticIdentity.abbreviation,\r\n            vert.semanticIdentity.shortAbbreviation,vert.semanticIdentity.UUID,vert.semanticIdentity.translations)\r\n        vert = new Vertex ({newConstructor: 1,loadedVertex: vert})\r\n        newVertices.push(vert)\r\n    }\r\n\r\n    //arrows\r\n    function remakeSemantic(semantic){\r\n        return new SemanticIdentity(semantic.name, semantic.description, semantic.abbreviation, semantic.shortAbbreviation, semantic.UUID, semantic.translations);\r\n    }\r\n    function remakeCardinality(cardinality){\r\n        return new Cardinality(cardinality.numLowerBound, cardinality.numUpperBound, cardinality.attachedToUUID, cardinality.isVisible, remakeSemantic(cardinality.semanticIdentity));\r\n    }\r\n    function remakeEdge(edge){\r\n        return new EdgeEnd(edge.attachedToUUID, edge.headType, remakeCardinality(edge.cardinality), edge.label, remakeSemantic(edge.semanticIdentity));\r\n    }\r\n    function remakeArrow(arrow){\r\n        var newArrow = new Arrow(newVertices, arrow.pathData, arrow.edgeType, remakeSemantic(arrow.semanticIdentity));\r\n            newArrow.sourceEdgeEnd = remakeEdge(arrow.sourceEdgeEnd);\r\n            newArrow.destEdgeEnd = remakeEdge(arrow.destEdgeEnd);\r\n            return newArrow;\r\n    }\r\n    for(let arrow of saveData.arrows){\r\n        setSelectedPackageKey(arrow.arrowContainerKey)\r\n        setNewContainerKey(arrow.arrowContainerKey)\r\n        setNewGraph(arrow.arrowGraphKey)\r\n        arrow = remakeArrow(arrow)\r\n        newArrows.push(arrow)\r\n    }\r\n\r\n    setTranslationColumns(saveData.translationColumns)\r\n    setPackageData(saveData.packages);\r\n    setDecoyPackageData(saveData.dPackages);\r\n    setVertexData(saveData.treeVertex);\r\n    setDecoyVertexData(saveData.dTreeVertex);\r\n    setGraphData(saveData.graph)\r\n    setDecoyGraphData(saveData.dGrraph)\r\n    setTreeData(saveData.tree)\r\n    setTotalContainerKey(saveData.containerKeys)\r\n    setTotalGraphKeys(saveData.graphKeys)\r\n    setCurrentObjects(new Graph(newVertices, newArrows));\r\n    updateArrows()\r\n    setSelectedPackageKey(1)\r\n    setNewContainerKey(1)\r\n    setNewGraph(1)\r\n    drawAll()\r\n\r\n\r\n    console.log(\"load finished\")\r\n\r\n}\r\n\r\n//Import a package or save file into root\r\nexport function importLoad(jsonString){\r\n    //load the file\r\n    if (jsonString == null) return;\r\n    let saveData = JSON.parse(jsonString);\r\n\r\n    //Graph and containers,treevertex's need to be given new keys\r\n    //arrows and vertex's will need new keys to match their updated parent keys\r\n    let packageKeyMap = [];\r\n    let graphKeyMap = [];\r\n    // list of arrows that have already updated. Used to stop arrows updating multiple times due to newkeys overlapping with oldkey numbers.\r\n    let arrowUpdated = []; \r\n    let containerKeys = getTotalPackageKeys();\r\n    let graphKeys = getTotalGraphs();\r\n\r\n    //assign a new key for each package/vertex\r\n    for(let container of saveData.packages){\r\n        containerKeys++;\r\n        let containerKey = {originalKey: container.containerKey, originalParentKey: container.parentContainerKey, newKey: containerKeys, newParentKey: 0}\r\n        packageKeyMap.push(containerKey)\r\n    }\r\n    for(let vert of saveData.treeVertex){\r\n        containerKeys++;\r\n        let containerKey = {originalKey: vert.containerKey, originalParentKey: vert.parentContainerKey, newKey: containerKeys, newParentKey: 0}\r\n        packageKeyMap.push(containerKey)\r\n    }\r\n    for(let graph of saveData.graph){\r\n        graphKeys++;\r\n        let graphKey = {originalGraphKey: graph.graphKey, originalKey: graph.containerKey, newGraphKey: graphKeys, newKey: 0}\r\n        graphKeyMap.push(graphKey)\r\n    }\r\n\r\n    //assign new relative parent keys\r\n    for(let packages of packageKeyMap){\r\n        for(let packagesCompare of packageKeyMap){\r\n            if(packages.originalParentKey === packagesCompare.originalKey){\r\n                packages.newParentKey = packagesCompare.newKey;\r\n            }\r\n        }\r\n    }\r\n\r\n    for(let graphs of graphKeyMap){\r\n        for(let packages of packageKeyMap){\r\n            if(graphs.originalKey === packages.originalKey){\r\n                graphs.newKey = packages.newKey;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //assign the new keys to the vertex's, graph's and packages\r\n    for(let i = 0; i < saveData.packages.length; i++){\r\n        saveData.packages[i].containerKey = packageKeyMap[i].newKey;\r\n        saveData.packages[i].parentContainerKey = packageKeyMap[i].newParentKey;\r\n\r\n        saveData.packages[i].data.containerKey = packageKeyMap[i].newKey;\r\n        saveData.packages[i].data.parentContainerKey = packageKeyMap[i].newParentKey;\r\n\r\n        saveData.dPackages[i].containerKey = packageKeyMap[i].newKey;\r\n        saveData.dPackages[i].parentContainerKey = packageKeyMap[i].newParentKey;\r\n    }\r\n\r\n    for(let i = saveData.packages.length; i < saveData.packages.length + saveData.treeVertex.length; i++){\r\n        saveData.treeVertex[i - saveData.packages.length].containerKey = packageKeyMap[i].newKey;\r\n        saveData.treeVertex[i - saveData.packages.length].parentContainerKey = packageKeyMap[i].newParentKey;\r\n\r\n        saveData.treeVertex[i - saveData.packages.length].data.containerKey = packageKeyMap[i].newKey;\r\n        saveData.treeVertex[i - saveData.packages.length].data.parentContainerKey = packageKeyMap[i].newParentKey;\r\n\r\n        saveData.dTreeVertex[i - saveData.packages.length].containerKey = packageKeyMap[i].newKey;\r\n        saveData.dTreeVertex[i - saveData.packages.length].parentContainerKey = packageKeyMap[i].newParentKey;\r\n    }\r\n\r\n    for(let i =0; i< saveData.graph.length; i++){\r\n        saveData.graph[i].containerKey = graphKeyMap[i].newKey\r\n        saveData.graph[i].graphKey = graphKeyMap[i].newGraphKey\r\n\r\n        saveData.graph[i].data.containerKey = graphKeyMap[i].newKey\r\n        saveData.graph[i].data.graphKey = graphKeyMap[i].newGraphKey\r\n\r\n        saveData.dGraph[i].containerKey = graphKeyMap[i].newKey\r\n        saveData.dGraph[i].graphKey = graphKeyMap[i].newGraphKey\r\n    }\r\n\r\n    //assign the new keys to vertex's and arrows\r\n    for(let packages of packageKeyMap){\r\n        \r\n        for(let vertex of saveData.vertices){\r\n            if(vertex.vertexContainerKey === packages.originalKey){\r\n                vertex.vertexContainerKey = packages.newKey;\r\n            }\r\n        }\r\n\r\n        for(let arrow of saveData.arrows){\r\n            if(arrow.arrowContainerKey === packages.originalKey && !arrowUpdated.includes(arrow)){\r\n                arrow.arrowContainerKey = packages.newKey;\r\n                arrowUpdated.push(arrow);\r\n            }\r\n        }\r\n            \r\n    }\r\n\r\n    for(let graphs of graphKeyMap){\r\n        for(let vertex of saveData.vertices){\r\n            if(vertex.vertexGraphKey === graphs.originalGraphKey){\r\n                vertex.vertexGraphKey = graphs.newGraphKey;\r\n            }\r\n        }\r\n\r\n        for(let arrow of saveData.arrows){\r\n            if(arrow.arrowGraphKey === graphs.originalGraphKey){\r\n                arrow.arrowGraphKey = graphs.newGraphKey;\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    //recreat vertex/arrow objects as in load()\r\n\r\n    var newVertices = [];\r\n    var newArrows = [];\r\n    for(let vert of saveData.vertices){\r\n        vert.semanticIdentity = new SemanticIdentity(vert.semanticIdentity.name,vert.semanticIdentity.description,vert.semanticIdentity.abbreviation,\r\n            vert.semanticIdentity.shortAbbreviation,vert.semanticIdentity.UUID,vert.semanticIdentity.translations)\r\n        vert = new Vertex ({newConstructor: 1,loadedVertex: vert})\r\n        newVertices.push(vert)\r\n    }\r\n\r\n    function remakeSemantic(semantic){\r\n        return new SemanticIdentity(semantic.name, semantic.description, semantic.abbreviation, semantic.shortAbbreviation, semantic.UUID, semantic.translations);\r\n    }\r\n\r\n    function remakeCardinality(cardinality){\r\n        return new Cardinality(cardinality.numLowerBound, cardinality.numUpperBound, cardinality.attachedToUUID, cardinality.isVisible, remakeSemantic(cardinality.semanticIdentity));\r\n    }\r\n \r\n    function remakeEdge(edge){\r\n        return new EdgeEnd(edge.attachedToUUID, edge.headType, remakeCardinality(edge.cardinality), edge.label, remakeSemantic(edge.semanticIdentity));\r\n    }\r\n\r\n    function remakeArrow(arrow){\r\n        var newArrow = new Arrow(newVertices, arrow.pathData, arrow.edgeType, remakeSemantic(arrow.semanticIdentity));\r\n            newArrow.setContainerKey(arrow.arrowContainerKey)\r\n            newArrow.setGraphKey(arrow.arrowGraphKey)\r\n            newArrow.sourceEdgeEnd = remakeEdge(arrow.sourceEdgeEnd);\r\n            newArrow.destEdgeEnd = remakeEdge(arrow.destEdgeEnd);\r\n            return newArrow;\r\n    }\r\n\r\n    for(let arrow of saveData.arrows){\r\n        arrow = remakeArrow(arrow)\r\n        newArrows.push(arrow)\r\n    }\r\n\r\n\r\n    //graphs,containers,tree verts need to be added to current data\r\n\r\n    setPackageData(getPackageData().concat(saveData.packages))\r\n    setDecoyPackageData(getDecoyPackageData().concat(saveData.dPackages))\r\n\r\n    setVertexData(getVertexData().concat(saveData.treeVertex))\r\n    setDecoyVertexData(getDecoyVertexData().concat(saveData.dTreeVertex))\r\n\r\n    setGraphData(getGraphData().concat(saveData.graph)) \r\n    setDecoyGraphData(getDecoyGraphData().concat(saveData.dGraph))\r\n\r\n\r\n    //vertex's and arrows add to current data\r\n\r\n\r\n    for(let vertex of newVertices){\r\n        addObject(vertex)\r\n    }\r\n    for(let arrow of newArrows){\r\n        addObject(arrow)\r\n    }\r\n\r\n    //reset current keys to reload a few things eg. turn any loaded vertices invisible is they were present in save\r\n\r\n    setSelectedPackageKey(getSelectedPackageKey())\r\n    setNewContainerKey(getCurrentContainerKey())\r\n    setNewGraph(getCurrentContainerKey())\r\n    //set the new latest index's\r\n    setTotalContainerKey(containerKeys)\r\n    setTotalGraphKeys(graphKeys)\r\n    //update arrows drawall\r\n    updateArrows()\r\n    drawAll()\r\n\r\n     \r\n\r\n return;\r\n}\r\n\r\n//Loads saveData in memory (not from json string)\r\nfunction loadDirect(saveData){\r\n\r\n    setTranslationColumns(saveData.translationColumns)\r\n    setPackageData(saveData.packages);\r\n    setDecoyPackageData(saveData.dPackages);\r\n    setVertexData(saveData.treeVertex);\r\n    setDecoyVertexData(saveData.dTreeVertex);\r\n    setGraphData(saveData.graph)\r\n    setDecoyGraphData(saveData.dGrraph)\r\n    setTreeData(saveData.tree)\r\n    setTotalContainerKey(saveData.containerKeys)\r\n    setTotalGraphKeys(saveData.graphKeys)\r\n    setCurrentObjects(new Graph(saveData.vertices, saveData.arrows));\r\n    updateArrows()\r\n    setSelectedPackageKey(saveData.currentCon)\r\n    setNewContainerKey(saveData.currentKey)\r\n    setNewGraph(saveData.currentGra)\r\n    drawAll()\r\n\r\n}\r\n\r\n// index 0 is the most recent change\r\nlet saveStates = []\r\nlet currentState = 0\r\n//Save states limit as its all stored in memeory (save states are relativley small though and only scale to be a few kilobytes per object though)\r\nlet maxSavedStates = getMaxSaveStates(); \r\n\r\nexport function getsaveStates(){\r\n    return saveStates;\r\n}\r\n\r\n\r\nexport function createSaveState(){\r\n\r\n    //This line is needed as some of the variables in saveData\r\n    let newData = Object.assign({}, getSaveData());\r\n    //Remove everything infront of the current state if not most recent eg. When the user has hit undo and then does an action\r\n    if(currentState !== 0){\r\n        for(let i = 0; i < currentState; i++){\r\n            saveStates.shift()\r\n        }\r\n        currentState = 0;\r\n    }\r\n    //push the chnage to saveStates and remove the oldest state if above threshold\r\n    saveStates.unshift(newData)\r\n    if(saveStates.length > maxSavedStates){\r\n        saveStates.pop()\r\n    }\r\n}\r\n\r\n\r\nexport function undo(){\r\n    if(currentState < (maxSavedStates - 1) && saveStates[currentState + 1] !== undefined && saveStates.length !== 0){\r\n        currentState ++\r\n        loadDirect(saveStates[currentState])\r\n    }\r\n}\r\n\r\nexport function redo(){\r\n    if(currentState > 0 && saveStates.length !== 0){\r\n        currentState --\r\n        loadDirect(saveStates[currentState])\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\n\r\nimport React from 'react';\r\nimport TreeView from 'react-simple-jstree';\r\n\r\nimport { currentObjects, setNewContainerKey as setNewPackageKey, getTotalContainerKeys, incrementTotalContainerKeys, \r\n    getCurrentGraph, setNewGraph as setNewGraphKey, getTotalGraphs, incrementTotalGraphs as incrementTotalGraph} from \"./CanvasDraw\";\r\n\r\nimport { drawAll } from \"./CanvasDraw\";\r\nimport {VertexNode} from \"../DataStructures/Graph.js\"\r\nimport { SemanticIdentity } from \"../DataStructures/SemanticIdentity.js\";\r\nimport { createSaveState } from '../Serialisation/NewFileManager';\r\nimport {getGraphIcon, getPackageIcon, getTreeVertexEmptyIcon, getTreeVertexFullIcon, initialObjects} from '../Config.js';\r\n\r\n// Accesor for tree data\r\nlet treeData = [];\r\n\r\n// Stores data for packages\r\nlet packageData = [];\r\n\r\n// The decoy packages something to do with past teams indexing? can probably refactor and remove them? - Lachlan\r\nlet decoyPackageData = [];\r\n\r\n// Stores data for Vertex's (Tree)\r\nlet vertexData = [];\r\n\r\n// The decoy Vertex something to do with past teams indexing? can probably refactor and remove them? - Lachlan\r\nlet decoyVertexData = [] \r\n\r\n// Stores data for Graphs\r\nlet graphObjects = [];\r\n\r\n// The decoy Graph something to do with past teams indexing? can probably refactor and remove them? - Lachlan\r\nlet decoyGraphObjects = [];\r\n\r\n//used as a container for sorting root from subPackages when pushing Packages to root.\r\nlet packageDataRoot = [];\r\n\r\n//Index of Currently Selected Container by user\r\nlet selectedContainerKey = 0;\r\n\r\n\r\n\r\nexport function setSelectedPackageKey(newKey){\r\n    selectedContainerKey = newKey;\r\n}\r\n\r\nexport function getSelectedPackageKey(){\r\n    return selectedContainerKey;\r\n}\r\n\r\nexport function getTreeData(){\r\n    return treeData;\r\n}\r\n\r\nexport function setTreeData(newTreeData){\r\n    treeData = newTreeData;\r\n}\r\n\r\nexport function getPackageData(){\r\n    return packageData;\r\n}\r\n\r\nexport function setPackageData(newPackageData){\r\n    packageData = newPackageData;\r\n}\r\n\r\nexport function getDecoyPackageData(){\r\n    return decoyPackageData\r\n}\r\n\r\nexport function setDecoyPackageData(newData){\r\n    decoyPackageData = newData;\r\n}\r\n\r\nexport function getVertexData(){\r\n    return vertexData;\r\n}\r\n\r\nexport function setVertexData(newData){\r\n    vertexData = newData;\r\n}\r\n\r\nexport function getDecoyVertexData(){\r\n    return decoyVertexData\r\n}\r\n\r\nexport function setDecoyVertexData(newData){\r\n    decoyVertexData = newData;\r\n}\r\n\r\n//returns a concated array of the Package and vertex (Tree\r\nexport function getContainerData(){\r\n    return packageData.concat(vertexData);\r\n}\r\n\r\nexport function getGraphData(){\r\n    return graphObjects;\r\n}\r\n\r\nexport function setGraphData(newData){\r\n    graphObjects = newData;\r\n}\r\nexport function getDecoyGraphData(){\r\n    return decoyGraphObjects;\r\n}\r\nexport function setDecoyGraphData(newData){\r\n    decoyGraphObjects = newData;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Loads the First available/oldest Graph\r\n */\r\nfunction loadFirstGraph(){\r\n    //Load first Graph\r\n    if(graphObjects.length > 0){\r\n        setNewPackageKey(graphObjects[0].data.containerKey)\r\n        setNewGraphKey(graphObjects[0].data.graphKey)\r\n        setSelectedPackageKey(graphObjects[0].data.containerKey)\r\n    }\r\n    //set keys to (none selected) values\r\n    else{\r\n        setNewPackageKey(0)\r\n        setNewGraphKey(-1)\r\n        setSelectedPackageKey(0)\r\n    }\r\n    //load the graph to canvas\r\n    for (let item of currentObjects.flatten()){\r\n        if (item.typeName === \"Vertex\" && item.getGraphKey() === getCurrentGraph()){\r\n            item.setPresent();\r\n        }\r\n        else if (item.getGraphKey() !== getCurrentGraph() && item.typeName === \"Vertex\"){\r\n            item.setAway();\r\n        }\r\n    }\r\n    drawAll()\r\n}\r\n\r\n\r\n/**\r\n * Create a Package in Treeview\r\n * @param {string} packageName Name of new Package\r\n * @param {number} parentKey Index of Parent, Defaults to 0 (\"Root\")\r\n */\r\nexport function handleAddPackage(packageName, parentKey = 0){\r\n\r\n    incrementTotalContainerKeys();\r\n\r\n    let tempPackageThing = {\r\n        text: packageName + \" \" + getPackageIcon(), \r\n        children: treeData[getTotalContainerKeys()],\r\n        data: NaN,\r\n        state: {opened: true},\r\n        type: \"Package\",\r\n        typeName: \"Package\",\r\n        containerKey: getTotalContainerKeys(),\r\n        parentContainerKey: parentKey\r\n    }\r\n\r\n    decoyPackageData.push(tempPackageThing)\r\n\r\n    let packageThing2 = {\r\n        text: packageName + \" \" + getPackageIcon(), \r\n        children: treeData[getTotalContainerKeys()],\r\n        data: decoyPackageData[packageData.length],\r\n        state: {opened: true},\r\n        type: \"Package\",\r\n        typeName: \"Package\",\r\n        containerKey: getTotalContainerKeys(),\r\n        parentContainerKey: parentKey\r\n    }\r\n    \r\n    packageData.push(packageThing2);\r\n}\r\n/**\r\n * Create a Vertex in Treeview\r\n * @param {string} vertexName \r\n * @param {number} parentKey \r\n * @returns Created Vertex Object\r\n */\r\nexport function handleAddVertex(vertexName, parentKey = 0){\r\n    //Create a new package using the known node type\r\n\r\n    incrementTotalContainerKeys();\r\n    let sID = new SemanticIdentity(vertexName,\"\",\"\",\"\", undefined ,[])\r\n\r\n    let tempVertexThing = {\r\n        text: vertexName + \" \" + getTreeVertexEmptyIcon(), \r\n        children: treeData[getTotalContainerKeys()],\r\n        data: NaN,\r\n        state: {opened: true},\r\n        type: \"treeVertex\",\r\n        typeName: \"VertexNode\",\r\n        originalVertex: true,\r\n        containerKey: getTotalContainerKeys(),\r\n        parentContainerKey: parentKey,\r\n        content: \"\",\r\n        colour: \"#FFD5A9\",\r\n        height: 50,\r\n        width: 70,\r\n        icons: [[],[],[]],\r\n        imageElements: {},\r\n        fontSize: 12,\r\n        semanticIdentity: sID\r\n    }\r\n\r\n    decoyVertexData.push(tempVertexThing)\r\n\r\n    let vertexThing2 = {\r\n        text: vertexName + \" \" + getTreeVertexEmptyIcon(), //If icon is changed, youll have to change the package icon in context menu too\r\n        children: treeData[getTotalContainerKeys()],\r\n        data: decoyVertexData[vertexData.length],\r\n        state: {opened: true},\r\n        type: \"treeVertex\",\r\n        typeName: \"VertexNode\",\r\n        originalVertex: true,\r\n        containerKey: getTotalContainerKeys(),\r\n        parentContainerKey: parentKey,\r\n        content: \"\",\r\n        colour: \"#FFD5A9\",\r\n        height: 50,\r\n        width: 70,\r\n        icons: [[],[],[]],\r\n        imageElements: {},\r\n        fontSize: 12,\r\n        semanticIdentity: sID\r\n    }\r\n    vertexData.push(vertexThing2);\r\n    return vertexThing2\r\n}\r\n\r\n/**\r\n * @param {number} selectedContainerKey \r\n */\r\nexport function handleDeletePackage(selectedContainerKey){ \r\n    for (let i = 0; i < packageData.length; i++){\r\n        if (packageData[i].containerKey === selectedContainerKey){\r\n            deletePackageChildren(packageData[i]);\r\n            decoyPackageData.splice(i,1); \r\n            packageData.splice(i,1); \r\n        }\r\n    }\r\n    //set index to first graph\r\n    loadFirstGraph()\r\n}\r\n/**\r\n * Delete a vertex From Treedata, and appearances on graphs\r\n * @param {*} selectedUUID \r\n */\r\nexport function handleDeleteVertex(selectedUUID){\r\n    for(let vertex of currentObjects.flatten()){\r\n        if(vertex.originalUUID === selectedUUID){\r\n            currentObjects.remove(vertex)\r\n        }\r\n    }\r\n    for(let i = 0; i < vertexData.length; i++){\r\n        if(vertexData[i].semanticIdentity.UUID === selectedUUID){\r\n            vertexData.splice(i, 1)\r\n            decoyVertexData.splice(i, 1)\r\n        }\r\n    }\r\n    drawAll();\r\n}\r\n\r\nfunction deletePackageChildren(selectedPackage){\r\n    let packageChildren = selectedPackage.children;\r\n    for (let i = 0; i < packageChildren.length; i++){\r\n        if (packageChildren[i].type === \"Package\"){\r\n            let selectedContainerKey = packageChildren[i].containerKey;\r\n            handleDeletePackage(selectedContainerKey);\r\n        }\r\n        else if (packageChildren[i].type === \"Graph\"){\r\n            let selectedGraphKey = packageChildren[i].graphKey;\r\n            handleDeleteGraph(selectedGraphKey);\r\n        }\r\n        else if (packageChildren[i].type === \"treeVertex\"){\r\n            let selectedUUID = packageChildren[i].semanticIdentity.UUID;\r\n            handleDeleteVertex(selectedUUID);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function handleRenamePackage(newName,rKey){\r\n    if(newName !== \"\"){\r\n        for (let i = 0; i < packageData.length; i++){\r\n            if (packageData[i].containerKey === rKey){\r\n                packageData[i].text = newName + \" \" + getPackageIcon();\r\n                packageData[i].data.text = newName + \" \" + getPackageIcon();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        console.log(\"Cannot have empty name\")\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Add Graph to Treeview\r\n * @param {string} graphName \r\n * @param {number} rKey \r\n */\r\nexport function handleAddGraph(graphName, rKey=getSelectedPackageKey()){\r\n    //stops the creation of graphs in the root or otherwise non-existent packages\r\n    if(rKey <= 0) return \r\n\r\n    incrementTotalGraph();\r\n    \r\n    let decoyGraphThing = {\r\n        text: graphName + \" \" + getGraphIcon(),\r\n        children: [],\r\n        data: NaN,\r\n        state: {opened: true},\r\n        type: \"Graph\",\r\n        typeName: \"Graph\",\r\n        containerKey: rKey,\r\n        graphKey: getTotalGraphs(),\r\n    }\r\n\r\n    decoyGraphObjects.push(decoyGraphThing);\r\n\r\n    let tempGraphThing = {\r\n        text: graphName + \" \" + getGraphIcon(),\r\n        children: [],\r\n        data: decoyGraphObjects[graphObjects.length],\r\n        state: {opened: true},\r\n        type: \"Graph\",\r\n        typeName: \"Graph\",\r\n        containerKey: rKey,\r\n        graphKey: getTotalGraphs(),\r\n    };\r\n \r\n    graphObjects.push(tempGraphThing);\r\n}\r\n\r\nexport function handleDeleteGraph(selectedGraphKey){\r\n    for (let i = 0; i < graphObjects.length; i++){\r\n        if (graphObjects[i].graphKey === selectedGraphKey){\r\n            graphObjects.splice(i, 1);\r\n            decoyGraphObjects.splice(i, 1);\r\n        }\r\n    }\r\n    loadFirstGraph()\r\n}\r\n\r\nexport function handleRenameGraph(newName,gKey){\r\n    for (let i = 0; i < graphObjects.length; i++){\r\n        if (graphObjects[i].graphKey === gKey){\r\n            graphObjects[i].text = newName + \" \" + getGraphIcon();\r\n            graphObjects[i].data.text = newName + \" \" + getGraphIcon();\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {number} selectedGraphKey \r\n * @returns {number} The Key of The Graphs Parent Container\r\n */\r\nexport function getGraphContainerKey(selectedGraphKey){ \r\n    for(let i = 0; i < graphObjects.length; i++){\r\n        if (graphObjects[i].graphKey === selectedGraphKey){\r\n            return graphObjects[i].containerKey\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Changes the Parent Container of a Graph\r\n * @param {number} gKey \r\n * @param {number} newkey \r\n */\r\nexport function handleGraphRebase(gKey,newkey){\r\n    for(let graph of graphObjects){\r\n        if(graph.graphKey === gKey){\r\n           for(let objectPackages of graph.children){  \r\n                let objects = objectPackages.children\r\n                for(let object of objects){\r\n                    object.containerkey = newkey;\r\n                    if(object.data.typeName === \"Vertex\"){\r\n                    object.data.vertexContainerKey = newkey;\r\n                    }\r\n                    else{\r\n                    object.data.arrowContainerKey = newkey;\r\n                    }\r\n                }\r\n            } \r\n            graph.containerKey = newkey;\r\n        }\r\n    }\r\n    createSaveState();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Determines Children for a Container\r\n * @param {number} parsedContainerKey \r\n * @returns Array of Container's children\r\n */\r\nfunction determineOwnership(parsedContainerKey){\r\n    let returnArray = []\r\n    let i = 0\r\n    for (let vertexOrArrow of treeData){\r\n        if(vertexOrArrow !== undefined){\r\n            if (vertexOrArrow.type === \"Graph\"){\r\n                if (vertexOrArrow.containerKey === parsedContainerKey){\r\n                    returnArray.push(treeData[i])\r\n                }\r\n            }\r\n        }\r\n        i += 1\r\n    }\r\n\r\n    return returnArray\r\n}\r\n\r\n/**\r\n * Determines SubContainers for a Container\r\n * @param {*} parsedContainerKey \r\n * @returns Array of Container's SubContainer's\r\n */\r\nfunction determineSubPackages(parsedContainerKey){\r\n    let returnArray = []\r\n    for (let Container of getContainerData()){\r\n        if(Container.parentContainerKey === parsedContainerKey)\r\n        returnArray.push(Container)\r\n    }\r\n    return returnArray\r\n}\r\n\r\nexport function getGraphNameFromKey(key){\r\n    let graph = graphObjects.find(graph => graph.graphKey === key)\r\n    return graph.text\r\n}\r\n\r\nexport function getContainerNameFromKey(key){\r\n    let packages = getContainerData().find(packages => packages.containerKey === key)\r\n    return packages.text\r\n}\r\n\r\n//Flag for when the editor is first opened or a new file is loaded.\r\nlet initialPackageAdded = false;\r\n\r\nexport class ContainmentTree extends React.Component {\r\n    \r\n\r\n    componentDidMount() {\r\n        document.getElementById(\"LowerPanel\").addEventListener('dragstart', this.dragStart);\r\n    }\r\n    componentDidUpdate(){\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        document.getElementById(\"LowerPanel\").removeEventListener('dragstart', this.dragStart);\r\n    }\r\n\r\n    dragStart(e) {\r\n        //click required as JStree requires a \"Selecting a node\" to bring data forward. (Element only stores name)\r\n        e.target.click();\r\n        let vertData = 0;\r\n        for(let packages of getContainerData()){\r\n            if(getSelectedPackageKey() === packages.containerKey)\r\n            vertData = packages;\r\n        }\r\n        let data = vertData;\r\n        //Prevents errors when a package or graph is dragged etc. \r\n        if(vertData.type === \"treeVertex\"){\r\n        e.dataTransfer.setData('text/plain',data.semanticIdentity.UUID)\r\n        }\r\n        else{\r\n            console.log(\"This object has no drag/drop feature\")\r\n        }\r\n     }\r\n    \r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        treeData = []; \r\n\r\n        if (initialPackageAdded === false){\r\n            initialObjects()\r\n\r\n            setNewPackageKey(1);\r\n            setNewGraphKey(1);\r\n            setSelectedPackageKey(1);\r\n            initialPackageAdded = true;\r\n            createSaveState();\r\n        }\r\n        \r\n\r\n        // Push the graph objects in\r\n        for (let graph of graphObjects){\r\n            treeData.push(graph);           \r\n            \r\n        }\r\n        //define owenerships\r\n        for (let packages of getContainerData()){ \r\n            let canvasItems = determineOwnership(packages.containerKey) \r\n            let subPackageItems = determineSubPackages(packages.containerKey)\r\n            let combinedItems = canvasItems.concat(subPackageItems)\r\n            packages.children = combinedItems;\r\n                \r\n\r\n        }\r\n\r\n        //define ownership of canvas arrows   \r\n        for (let packages of getContainerData()){ \r\n            let vertex = new VertexNode() \r\n            if (vertex.toTreeViewElement(\"Arrow Package\", packages.containerKey) !== undefined){\r\n                packages.children.push(vertex.toTreeViewElement(\"Arrow Package\", packages.containerKey))\r\n            }  \r\n            \r\n        }\r\n        //determine if vertex's are empty or not\r\n        for(let vert of getVertexData()){\r\n            if(vert.children.length === 0){\r\n                vert.text = vert.text.replace(\" \" + getTreeVertexEmptyIcon(),\"\");\r\n                vert.text = vert.text.replace(\" \" + getTreeVertexFullIcon(),\"\");\r\n                vert.text = vert.text + \" \" + getTreeVertexEmptyIcon();\r\n            }\r\n            else{\r\n                vert.text = vert.text.replace(\" \" + getTreeVertexEmptyIcon(),\"\");\r\n                vert.text = vert.text.replace(\" \" + getTreeVertexFullIcon(),\"\");\r\n                vert.text = vert.text + \" \" + getTreeVertexFullIcon()\r\n            }\r\n        }\r\n\r\n        //Determine which packages are root packages\r\n        packageDataRoot = [];\r\n        for (let packages of getContainerData()){\r\n            if(packages.parentContainerKey ===0){\r\n                packageDataRoot.push(packages)\r\n            }\r\n\r\n        }\r\n\r\n        //Set the TreeData\r\n        this.state = {\r\n            data: {\r\n                core: {\r\n                    data: [\r\n                        { text: \"Root\", \r\n                        children: packageDataRoot, state: { opened: true }, \r\n                        root: true},\r\n                    ]\r\n                }\r\n            },\r\n            selectedVertex: null\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function called when Treeview Element is clicked\r\n     * @param {*} e The target element\r\n     * @param {*} data The treeNodes data\r\n     */\r\n    handleElementSelect(e, data) {\r\n\r\n        //catch undefined data type eg. root\r\n        try{\r\n            if(data.node.data.type === \"Package\" || data.node.data.type === \"treeVertex\" ){\r\n                setSelectedPackageKey(data.node.data.containerKey)\r\n            }\r\n\r\n            else if (data.node.data.type === \"Graph\"){\r\n                setNewGraphKey(data.node.data.graphKey);\r\n                setNewPackageKey(data.node.data.containerKey);\r\n                setSelectedPackageKey(data.node.data.containerKey)\r\n                // Move everything away\r\n                for (let item of currentObjects.flatten()){\r\n                    if (item.typeName === \"Vertex\" && item.getGraphKey() === getCurrentGraph()){\r\n                        item.setPresent();\r\n                    }\r\n                    else if (item.getGraphKey() !== getCurrentGraph() && item.typeName === \"Vertex\"){\r\n                        item.setAway();\r\n                    }\r\n                }\r\n            }\r\n            \r\n            else if (data.selected.length === 1 && data.node.data !== null && data.node.data.type === undefined) {\r\n                let UUID = data.node.data.semanticIdentity.UUID;\r\n                for (let vertex of currentObjects.flatten()) {\r\n                    if (vertex.semanticIdentity.UUID === UUID) {\r\n                        this.setState({\r\n                            selectedVertex: vertex\r\n                        });\r\n                        setNewPackageKey(vertex.vertexContainerKey);\r\n                        setNewGraphKey(vertex.vertexGraphKey); \r\n                        setSelectedPackageKey(vertex.vertexContainerKey)\r\n                        \r\n                        for (let item of currentObjects.flatten()){\r\n                            if (item.typeName === \"Vertex\" && item.getGraphKey() === getCurrentGraph()){\r\n                                item.setPresent();\r\n                            }\r\n                            else if (item.getGraphKey() !== getCurrentGraph() && item.typeName === \"Vertex\"){\r\n                                item.setAway();\r\n                            }\r\n                        }\r\n                        this.props.setLeftMenu(this.state.selectedVertex);\r\n                    }\r\n                }\r\n            } \r\n            else {\r\n                this.setState({\r\n                    selectedVertex: null\r\n                });\r\n            }\r\n            drawAll();\r\n        }\r\n        catch(e){\r\n            console.log(\"If True,a null type error has been caught, If the selected object should be selectable, this is an issue\")\r\n        }\r\n        //If the user clicks the root package\r\n        try{\r\n            if(data.node.original.root === true){\r\n                setSelectedPackageKey(0) //containerkey 0 will be used for root\r\n            }\r\n        }\r\n        catch(e){\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        const data = this.state.data;\r\n        return (\r\n            <div>\r\n                <TreeView treeData={data} onChange={(e, data) => this.handleElementSelect(e, data)} className=\"treeview\" id=\"treeview\" draggable=\"true\" />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { drawMarker, distanceThreshold, getCurrentGraph } from \"../UIElements/CanvasDraw\";\r\nimport { getGraphContainerKey } from \"../UIElements/ContainmentTree\";\r\nimport { SemanticIdentity} from \"./SemanticIdentity\";\r\nimport {serverURL} from \"../UIElements/MainView\"\r\n\r\nexport var padding = 5;\r\nexport var defaultColour = \"#FFD5A9\";\r\nexport var defaultMinimumSize = 30;\r\n\r\nexport class Vertex {\r\n\r\n    //As javascript doesnt have method overloading, newConstructor is used to access the secondary constructor when flagged 1 \r\n\r\n    //at some point change to use destructuring, which will require changing every use of this method to use destructing too\r\n    constructor({title = \"unnamed\", content, colour, x, y, width, height, semanticIdentity,newConstructor=0,loadedVertex=0}) {\r\n\r\n        //This constructor is used to turn a vertex loaded from JSON.parse back into a vertex object\r\n        if(newConstructor === 1){\r\n\r\n            this.typeName = loadedVertex.typeName;\r\n            this.semanticIdentity = loadedVertex.semanticIdentity;\r\n            this.title = loadedVertex.title;\r\n            this.content = loadedVertex.content;\r\n            this.colour = loadedVertex.colour;\r\n            this.x = loadedVertex.x;\r\n            this.y = loadedVertex.y;\r\n            this.icons = loadedVertex.icons;\r\n            this.selected = false;\r\n            this.imageElements = loadedVertex.imageElement;\r\n            this.fontSize = 12;\r\n            this.orignalVertex = loadedVertex.orignalVertex;\r\n            this.originalUUID = loadedVertex.originalUUID; \r\n            this.Origin = loadedVertex.Origin; \r\n            this.width = loadedVertex.width;\r\n            this.height = loadedVertex.height;\r\n            this.realHeight = loadedVertex.realHeight;\r\n            this.isAbstract = loadedVertex.isAbstract;\r\n            this.vertexPath = loadedVertex.vertexPath;\r\n            this.vertexGraphKey = loadedVertex.vertexGraphKey;\r\n            this.vertexContainerKey = loadedVertex.vertexContainerKey;\r\n            this.renderedx = loadedVertex.renderedx;\r\n            this.renderedy = loadedVertex.renderedy;\r\n            this.awayx = loadedVertex.awayx;\r\n            this.awayy = loadedVertex.awayy;\r\n            this.status = loadedVertex.status;\r\n\r\n        }\r\n\r\n        else{\r\n            this.typeName = \"Vertex\";\r\n\r\n            if (semanticIdentity !== undefined){\r\n                this.semanticIdentity = semanticIdentity;\r\n            } else {\r\n                this.semanticIdentity = new SemanticIdentity(title,\"\",\"\",\"\", undefined ,[]);\r\n            }\r\n\r\n            this.title = title;\r\n\r\n\r\n            if(content === undefined){\r\n                this.content = \"\"\r\n            }\r\n            else{\r\n            this.content = content;\r\n            }\r\n\r\n            this.colour = colour\r\n            this.x = x;\r\n            this.y = y;\r\n            this.icons = [[],[],[]];\r\n            this.selected = false;\r\n            this.imageElements = {};\r\n            this.fontSize = 12;\r\n            this.orignalVertex = true; // bool to see if the selected vertex is the original\r\n            //this.originalUUID = this.originalUUID // going to store the UUID of the original vertex here as canvas objects need to be given a unique semanticUUID \r\n            this.isContainer = false; //Ignore this now, Kieth explained how containers work after finishing old implementation, direction other team was going was wrong - Lachlan\r\n            this.Origin = \"\" //package the vertex originates from if needed\r\n    \r\n\r\n            // Note these values often change in runtime\r\n            this.width = width;\r\n            this.height = height;\r\n\r\n            this.realHeight = height;\r\n\r\n            // Make sure width and height meet a reasonable minimum\r\n            this.width = Math.max(width, defaultMinimumSize);\r\n            this.height = Math.max(height, defaultMinimumSize);\r\n\r\n            this.isAbstract = false;\r\n\r\n            //Store the path to your given vertex here\r\n            this.vertexPath = \"\";\r\n\r\n            // USed to decide where to render the object\r\n            this.vertexGraphKey = getCurrentGraph();\r\n\r\n            // Used to decide where the object goes in the tree\r\n            this.vertexContainerKey = getGraphContainerKey(this.vertexGraphKey);\r\n\r\n\r\n            // Used for moving vertices out of the way when they're not being rendered to prevent invisible overlap\r\n            this.renderedx = x;\r\n            this.renderedy = y;\r\n\r\n            this.awayx = Math.floor(Math.random() * 2000000)+100000;\r\n            this.awayy = Math.floor(Math.random() * 2000000)+100000;\r\n\r\n            this.status = \"present\"\r\n        }\r\n        \r\n    }\r\n\r\n    // Save a vertice's proper x and y coordinate for later rendering and then send the vertex somewhere else\r\n    setAway(){\r\n        if (this.status === \"present\"){\r\n            this.renderedx = this.x;\r\n            this.renderedy = this.y;\r\n\r\n            this.x = this.awayx;\r\n            this.y = this.awayy;\r\n\r\n            this.status = \"away\"\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    setPresent(){\r\n\r\n        if (this.status === \"away\"){\r\n            this.x = this.renderedx;\r\n            this.y = this.renderedy;\r\n\r\n            this.status = \"present\"\r\n        }\r\n        \r\n    }\r\n\r\n    setGraphKey(key){\r\n        this.vertexGraphKey = key;\r\n    }\r\n\r\n    getGraphKey(){\r\n        return this.vertexGraphKey;\r\n    }\r\n\r\n\r\n    getSemantic(){\r\n        return this.SemanticIdentity\r\n    }\r\n\r\n    setSemantic(newSem){\r\n        this.SemanticIdentity = newSem;\r\n    }\r\n\r\n    // Set the container key. Done in ContainmentTree.js\r\n    setContainerKey(key){\r\n        this.vertexContainerKey = key;\r\n    }\r\n\r\n    // Get the container key. Called in CanvasDraw.js\r\n    getContainerKey(){\r\n        return this.vertexContainerKey;\r\n    }\r\n\r\n    setPath(path){\r\n        this.vertexPath = path;\r\n    }\r\n\r\n    getPath(){\r\n        return this.vertexPath;\r\n    }\r\n\r\n    setSelected(selected) {\r\n        this.selected = selected;\r\n    }\r\n\r\n    getColour(){\r\n        return this.colour\r\n    }\r\n\r\n    setColour(colour){\r\n        this.colour = colour;\r\n    }\r\n\r\n    setTitle(title) {\r\n        this.title = title;\r\n        this.semanticIdentity.name = title;\r\n    }\r\n\r\n    setContent(content) {\r\n        this.content = content;\r\n        this.semanticIdentity.description = content;\r\n    }\r\n\r\n    getAbstract(){\r\n        return this.isAbstract\r\n    }\r\n\r\n    toggleAbstract(){\r\n        this.isAbstract = !this.isAbstract\r\n    }\r\n\r\n    setOrigin(newOrigin){\r\n        this.Origin = newOrigin;\r\n    }\r\n    getOrigin(){\r\n        return this.Origin;\r\n    }\r\n\r\n    getContentAsString() {\r\n        if (this.content !== null) {\r\n            let mergedContent = \"\";\r\n            \r\n            for (let i = 0; i < this.content.length; i++) {\r\n                mergedContent = mergedContent.concat(this.content[i]);\r\n                if (i < this.content.length - 1) {\r\n                    mergedContent = mergedContent.concat(\"\\n\");\r\n                }\r\n            }\r\n            \r\n            return mergedContent;\r\n\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    setIcon(fileName) {\r\n        let fileNames = this.icons[0];\r\n        let Icons = this.icons[1];\r\n        let Text = this.icons[2];\r\n\r\n        let index = fileNames.indexOf(fileName);\r\n\r\n        //icon not part of this vertex yet\r\n        if (index === -1) {\r\n            fileNames.push(fileName);\r\n            Icons.push(true);\r\n            Text.push(false);\r\n\r\n        } else {\r\n            Icons[index] = !Icons[index]\r\n        }\r\n\r\n        if (Text[index] === false && Icons[index] === false) {\r\n            Icons.splice(index,1);\r\n            Text.splice(index,1);\r\n            fileNames.splice(index,1);\r\n        }\r\n\r\n    }\r\n\r\n    setText(fileName) {\r\n        let fileNames = this.icons[0];\r\n        let icons = this.icons[1];\r\n        let text = this.icons[2];\r\n\r\n        let index = fileNames.indexOf(fileName);\r\n\r\n        //icon not part of this vertex yet\r\n        if (index === -1) {\r\n            fileNames.push(fileName);\r\n            icons.push(false);\r\n            text.push(true);\r\n\r\n        } else {\r\n            text[index] = !text[index]\r\n        }\r\n\r\n        if (text[index] === false && icons[index] === false) {\r\n            icons.splice(index,1);\r\n            text.splice(index,1);\r\n            fileNames.splice(index,1);\r\n        }\r\n\r\n    }\r\n\r\n    isIconSet(fileName) {\r\n        let index = this.icons[0].indexOf(fileName);\r\n        if (index === -1) {\r\n            return false;\r\n        }\r\n        return this.icons[1][index];\r\n    }\r\n\r\n    isTextSet(fileName) {\r\n            let index = this.icons[0].indexOf(fileName);\r\n            if (index === -1) {\r\n                return false;\r\n            } else {\r\n                return this.icons[2][index];\r\n            }\r\n    }\r\n\r\n    getBounds() {\r\n        return [this.x, this.y, this.x+this.width, this.y+this.realHeight-padding];\r\n    }\r\n\r\n    expandSide(side, x, y,canvasContext) {\r\n        let ex = 0;\r\n        let ey = 0;\r\n\r\n        let pad = (this.hasContent() ? padding*4 : padding*2);\r\n\r\n        switch (side) {\r\n            case \"topLeft\":\r\n                ey += this.y + this.height;\r\n                this.y = y;\r\n                this.height = ey-this.y;\r\n                ex += this.x + this.width;\r\n                this.x = x;\r\n                this.width = ex-this.x;\r\n                break;\r\n\r\n            case \"topRight\":\r\n                ey += this.y + this.height;\r\n                this.y = y;\r\n                this.height = ey-this.y;\r\n                this.width = x-this.x;\r\n                break;\r\n\r\n            case \"bottomLeft\":\r\n\r\n                this.height = y-this.y  - this.iconAreaHeight - this.contentHeight - pad;\r\n                ex += this.x + this.width;\r\n                this.x = x;\r\n                this.width = ex-this.x;\r\n                break;\r\n\r\n            case \"bottomRight\":\r\n\r\n                this.height = y - this.y - this.iconAreaHeight - this.contentHeight - pad;\r\n                this.width = x-this.x;\r\n                break;\r\n\r\n            case \"left\":\r\n                ex += this.x + this.width;\r\n                this.x = x;\r\n                this.width = ex-this.x;\r\n                break;\r\n\r\n            case \"right\":\r\n                this.width = x-this.x;\r\n                break;\r\n\r\n            case \"top\":\r\n                ey += this.y + this.height;\r\n                this.y = y;\r\n                this.height = ey-this.y;\r\n                break;\r\n\r\n            case \"bottom\":\r\n                this.height = y-this.y  - this.iconAreaHeight - this.contentHeight - pad;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        this.height = Math.max(this.height,12+padding);\r\n        this.draw(canvasContext)\r\n    }\r\n\r\n\r\n    increaseWidthIfNecessary(canvasContext, possibleWidth) {\r\n        if (possibleWidth > this.width) {\r\n            this.width = possibleWidth;\r\n        }\r\n\r\n    }\r\n\r\n    hasContent() {\r\n        return !(this.content[0] === \"\" && this.content.length === 1)\r\n    }\r\n\r\n\r\n    draw(canvasContext) {\r\n\r\n        // Icon height in px\r\n        let iconHeight = 20;\r\n        let iconPadding = 2;\r\n        let iconListLen = this.icons[0].length;\r\n\r\n        // check for width increases\r\n        for (let i = 0; i < this.icons[0].length; i++) {\r\n\r\n            if (this.icons[1][i] === true) {\r\n                if (this.icons[2][i] === true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, iconHeight + canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n            }else{\r\n                if (this.icons[2][i] === true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n            }\r\n        }\r\n        this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.title + this.Origin).width);\r\n\r\n        for (let i = 0; i < this.content.length; i++) {\r\n            this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.content[i]).width + padding*2);\r\n        }\r\n\r\n        // Font size\r\n        padding = 5;\r\n        // Set font settings\r\n        if(this.is)\r\n        canvasContext.font = this.fontSize+\"px Segoe UI\";\r\n        canvasContext.fontSize = this.fontSize;\r\n\r\n\r\n        // Find the maximum width of text and size the class accordingly\r\n        let measuredNameText = canvasContext.measureText(this.title + this.Origin).width;\r\n        let maxWidth = Math.max(measuredNameText + padding*2, this.width);\r\n        this.contentHeight = 0;\r\n\r\n        // Iterate over all content text lines\r\n        for (let i = 0; i < this.content.length; i++) {\r\n            let measuredText = canvasContext.measureText(this.content[i]);\r\n            maxWidth = Math.max(maxWidth, measuredText.width, measuredNameText);\r\n            this.contentHeight += this.fontSize+padding;\r\n        }\r\n\r\n        if(!this.hasContent()){\r\n            this.contentHeight = 0\r\n        }\r\n\r\n        if (maxWidth > this.width) {\r\n            this.width = maxWidth\r\n        }\r\n\r\n        // Configure drawing for shadows\r\n        // And generally make it look nice\r\n        canvasContext.shadowOffsetX = 2.0; canvasContext.shadowOffsetY = 2.0;\r\n        this.iconAreaHeight = (iconHeight + (iconPadding * 2)) * iconListLen;\r\n\r\n        // Update rect height\r\n        // Use this to force text to fit\r\n        if (this.content[0] !== \"\") {\r\n            this.realHeight = padding * 4 + this.height + this.iconAreaHeight + this.contentHeight;\r\n        }else{\r\n            this.realHeight = padding * 2 + this.height + this.iconAreaHeight\r\n        }\r\n\r\n        // Draw rect\r\n        \r\n        canvasContext.fillStyle = this.colour;\r\n        canvasContext.fillRect(this.x, this.y, this.width, this.realHeight);\r\n        canvasContext.strokeRect(this.x, this.y, this.width, this.realHeight);\r\n\r\n\r\n        if (this.content[0] !== \"\") {\r\n            canvasContext.strokeRect(this.x, this.y, this.width, this.height+this.iconAreaHeight+padding*2);\r\n        }\r\n\r\n        // Draw selected markers if rect is selected\r\n        if (this.selected) {\r\n            canvasContext.fillStyle = \"#000000\";\r\n            drawMarker(this.x, this.y);\r\n            drawMarker(this.x+this.width, this.y);\r\n            drawMarker(this.x, this.y+this.realHeight);\r\n            drawMarker(this.x+this.width, this.y+this.realHeight);\r\n        }\r\n\r\n        // Draw Icons by filename\r\n        let yPos = this.y + iconPadding;\r\n        let xPos = this.x + this.width + iconPadding;\r\n\r\n        function loadImage(imageElement) {\r\n            let sh = imageElement.height;\r\n            let sw = imageElement.width;\r\n            let scale = iconHeight / sh;\r\n            canvasContext.drawImage(imageElement, xPos-(iconPadding*2)-(sw*scale), yPos, sw * scale, sh * scale);\r\n            yPos += iconHeight + (iconPadding * 2); // What's the point of this line? yPos should be out of scope when this method is run\r\n\r\n        }\r\n\r\n        for (let i = 0; i < this.icons[0].length; i++) {\r\n\r\n            if (this.icons[1][i] === true) {\r\n                if (this.icons[2][i] === true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, iconHeight + canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n\r\n                let element = this.imageElements[this.icons[0][i]];\r\n\r\n                \r\n                if (element === undefined) {\r\n\r\n                    let imageElement = new Image();\r\n                    imageElement.src = serverURL + \"/icons/\" + this.icons[0][i];\r\n                    imageElement.crossOrigin = \"anonymous\";\r\n\r\n                    imageElement.onload = () => {\r\n                        loadImage(imageElement);\r\n                        this.imageElements[this.icons[0][i]] = imageElement\r\n                    };\r\n                } else {\r\n                    loadImage(element)\r\n                }\r\n            } else {\r\n                yPos += iconHeight + (iconPadding * 2);\r\n            }\r\n            \r\n        } \r\n\r\n        // Reset color for text\r\n        canvasContext.fillStyle = \"#000000\";\r\n\r\n        // Draw Height for text that will be increased to draw downward\r\n        let dy = padding+this.fontSize;\r\n\r\n        // Disable shadows for text\r\n        canvasContext.shadowOffsetX = 0.0; canvasContext.shadowOffsetY = 0.0;\r\n\r\n        let txPos = this.x + iconPadding;\r\n        let tyPos = this.y + iconHeight;\r\n\r\n        for (let i = 0; i < this.icons[0].length; i++) {\r\n            if (this.icons[2][i] === true) {\r\n                if (this.icons[1][i] !== true) {\r\n                    this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(\"<< \" + this.icons[0][i] + \" >>\").width);\r\n                }\r\n\r\n                let name = \"<< \" + this.icons[0][i].slice(0, -4) + \" >>\";\r\n                if (this.icons[0][i].slice(-6, -4) === \"_n\") {\r\n                    name = \"\";\r\n                }\r\n\r\n                canvasContext.fillText(name, txPos, tyPos);\r\n            }\r\n            tyPos += iconHeight + (iconPadding * 2);\r\n        }\r\n\r\n        // Draw name\r\n        this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.Origin + this.title).width);\r\n\r\n        if(this.isAbstract) {\r\n            canvasContext.font = \"italic \" + this.fontSize + \"px Segoe UI\";\r\n        }else{\r\n            canvasContext.font = this.fontSize + \"px Segoe UI\";\r\n        }\r\n\r\n        canvasContext.fillText(this.Origin + this.title , this.x+padding, this.y+dy+this.iconAreaHeight);\r\n        dy = padding*2 +this.height + this.contentHeight;\r\n\r\n        canvasContext.font = this.fontSize+\"px Segoe UI\";\r\n\r\n        // Draw text\r\n        for (let i = 0; i < this.content.length; i++) {\r\n            this.increaseWidthIfNecessary(canvasContext, canvasContext.measureText(this.content[i]).width + padding*2);\r\n            canvasContext.fillText(this.content[i], this.x+padding, this.y+dy+this.iconAreaHeight);\r\n            dy += this.fontSize + padding;\r\n        }\r\n\r\n        canvasContext.strokeStyle = \"black\"\r\n    }\r\n\r\n    // Checks if it intersects with point\r\n    intersects(x, y) {\r\n        if (x < this.x) return false;\r\n        if (y < this.y) return false;\r\n        if (x > this.x+this.width) return false;\r\n        return y <= this.y + this.realHeight;\r\n\r\n    }\r\n\r\n    // Gets the nearest side, in Arrow compatible x,y percentage values\r\n    // Also returns a threshold distance\r\n    // Parameters are the cursor X and Y coordinates\r\n    // Return value:\r\n    //      [threshold, xRel, yRel]\r\n    //\r\n    // If threshold is -1, xRel and yRel are equal to cursorX, cursorY\r\n    // This only happens when cursor shouldn't connect to vertex\r\n    getNearestSideFrom(cursorX, cursorY) {\r\n\r\n        // Else\r\n        return this.getNearestSide(cursorX, cursorY);\r\n    }\r\n\r\n    getNearestSide(cursorX, cursorY) {\r\n        // Create possibilities\r\n        let sides = [];\r\n\r\n        // If can connect to top/bottom\r\n        if (cursorX > this.x && cursorX < this.x+this.width) {\r\n            let xPercentage = (cursorX-this.x)/this.width;\r\n\r\n            sides.push([Math.abs(cursorY-(this.y)), xPercentage, 0]);\r\n            sides.push([Math.abs(cursorY-(this.y+this.realHeight)), xPercentage, 1]);\r\n        }\r\n\r\n        // If can connect to left/right\r\n        else if (cursorY > this.y && cursorY < this.y+(this.realHeight)) {\r\n            let yPercentage = (cursorY-this.y)/(this.realHeight);\r\n\r\n            sides.push([Math.abs(cursorX-(this.x)), 0, yPercentage]);\r\n            sides.push([Math.abs(cursorX-(this.x+this.width)), 1, yPercentage]);\r\n        }\r\n\r\n        // Can't connect\r\n\r\n        let goodSide = false;\r\n\r\n        sides.forEach((side) => {\r\n            if(side[0] < distanceThreshold){\r\n                goodSide = true;\r\n            }\r\n        });\r\n\r\n        if(goodSide === false && cursorX > this.x && cursorX < this.x + this.width && cursorY > this.y && cursorY < this.y+this.realHeight){\r\n                // click was inside the vertex but not in tolerance\r\n                let yPercentage = (cursorY-this.y)/(this.realHeight);\r\n                let xPercentage = (cursorX-this.x)/this.width;\r\n\r\n                // find closest side\r\n                let rightDist = Math.abs(xPercentage-1)*this.width;\r\n                let topDist = yPercentage*this.realHeight;\r\n                let leftDist = xPercentage*this.width;\r\n                let bottomDist = yPercentage*this.realHeight;\r\n\r\n                let closestIndex = 0;\r\n                let closestDistance = leftDist;\r\n                let distArrays = [leftDist,rightDist,topDist,bottomDist];\r\n\r\n                // no need to go through leftDist here as its already set as shortest\r\n                for(let i = 1; i< distArrays.length-1; i++){\r\n                    if(distArrays[i] < closestDistance){\r\n                        closestDistance = distArrays[i];\r\n                        closestIndex = i;\r\n                    }\r\n                }\r\n\r\n                if ( closestIndex === 0 ){\r\n                    return [0, 0, yPercentage]\r\n                }\r\n                if ( closestIndex === 1 ){\r\n                    return [0, 1, yPercentage]\r\n                }\r\n                if ( closestIndex === 2 ){\r\n                    return [0, xPercentage, 0]\r\n                }\r\n                if ( closestIndex === 3 ){\r\n                    return [0, xPercentage, 1]\r\n                }\r\n        }\r\n\r\n        if(sides.length === 0){\r\n            return null\r\n        }\r\n\r\n        // Return side with shortest distance\r\n        let shortest = sides[0];\r\n        for (let i = 1; i < sides.length; i++) {\r\n            if (sides[i][0] < shortest[0]) {\r\n                shortest = sides[i];\r\n            }\r\n        }\r\n        return shortest;\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { getTreeVertexEmptyIcon, getTreeVertexFullIcon } from '../Config';\r\nimport { createSaveState } from '../Serialisation/NewFileManager';\r\nimport * as canvasDraw from \"./CanvasDraw\";\r\nimport { getContainerNameFromKey, getVertexData} from './ContainmentTree';\r\nimport { Tool } from './LeftMenu';\r\n\r\nlet selectMultiple = false;\r\nlet selectDown = false;\r\nlet savedObjects = [];\r\nexport let selectedCanvasObject = null;\r\n\r\n\r\nexport class Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.canvasRef = React.createRef();\r\n\r\n        this.state = {}\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.zoom = this.props.mainState.zoomLevel;\r\n        this.tool = this.props.mainState.drawMode;\r\n\r\n        document.getElementById(\"Canvas\").addEventListener('dragenter', this.dragEnter);\r\n        document.getElementById(\"Canvas\").addEventListener('dragover', this.dragOver);\r\n        document.getElementById(\"Canvas\").addEventListener('dragleave', this.dragLeave);\r\n        document.getElementById(\"Canvas\").addEventListener('drop', this.drop);\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.getElementById(\"Canvas\").removeEventListener('dragenter', this.dragEnter);\r\n        document.getElementById(\"Canvas\").removeEventListener('dragover', this.dragOver);\r\n        document.getElementById(\"Canvas\").removeEventListener('dragleave', this.dragLeave);\r\n        document.getElementById(\"Canvas\").removeEventListener('drop', this.drop);\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.zoom = this.props.mainState.zoomLevel;\r\n        this.tool = this.props.mainState.drawMode;\r\n    }\r\n\r\n    dragEnter(e) {\r\n        e.preventDefault();\r\n    }\r\n    \r\n    dragOver(e) {\r\n        e.preventDefault();\r\n    }\r\n    \r\n    dragLeave(e) {\r\n        return 0\r\n    }\r\n    \r\n    drop(e) {\r\n        if(canvasDraw.getCurrentGraph() <= 0){ // stops the user dragging and dropping without a graph being selected\r\n            console.log(\"attempted to drag and drop vertex while there are no available graphs to draw on\");\r\n            window.alert(\"You need to create and select a graph first before you can start drawing!\");\r\n        }\r\n        else{\r\n            //Find the vertex object that was dragged\r\n            let droppedSemanticID = e.dataTransfer.getData('text/plain');\r\n            let droppedVertex = 0;\r\n            for(let vert of getVertexData()){\r\n                if (vert.semanticIdentity.UUID === droppedSemanticID)\r\n                droppedVertex = vert;\r\n            }\r\n            //get canvas relative coordinates for where the object was dropped\r\n            let mouseCoords = canvasDraw.getGraphXYFromMouseEvent(e)\r\n            let newName = droppedVertex.text.replace(\" \"+ getTreeVertexEmptyIcon(),\"\");\r\n            newName = newName.replace(\" \" + getTreeVertexFullIcon(),\"\")\r\n            let newColour;\r\n            let visibilityCheck = false;\r\n\r\n            //check if selected graph is located in the same package or not\r\n            if(droppedVertex.parentContainerKey !== canvasDraw.getCurrentContainerKey()){\r\n                newColour = \"#FFFFFF\";\r\n                visibilityCheck = true; //used to determine if the vertex has an origin package added\r\n            }\r\n            else{\r\n            \r\n                newColour = droppedVertex.colour;\r\n            }\r\n\r\n\r\n        //create the vertex object(size 30x15) and place it\r\n            let canvasVert = canvasDraw.createVertex(mouseCoords[0],mouseCoords[1],droppedVertex.width,droppedVertex.height,newName,\r\n            droppedVertex.content,newColour,droppedVertex.icons,droppedVertex.imageElements,droppedVertex.fontSize,droppedVertex.semanticIdentity)\r\n            if(visibilityCheck === true){\r\n                //add origin package\r\n                let originText = getContainerNameFromKey(droppedVertex.parentContainerKey)\r\n                originText = originText.replace(\" \"+ getTreeVertexEmptyIcon(),\"\")\r\n                originText = originText.replace(\" \"+ getTreeVertexFullIcon(),\"\")\r\n                canvasVert.setOrigin(originText + \" :: \")\r\n            }\r\n            canvasDraw.addObject(canvasVert)\r\n            canvasDraw.drawAll()\r\n\r\n            createSaveState()\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    // prevent context (right-click) menu from appearing\r\n    ocm = (e) => {\r\n        e.preventDefault();\r\n    };\r\n    // What happens if u click anywhere on the canvas\r\n    mouseDown = (e, canvas) => {\r\n        let position = canvasDraw.getGraphXYFromMouseEvent(e);\r\n        let x = position[0]; let y = position[1];\r\n        this.setState({\r\n            startX: x,\r\n            startY: y\r\n        });\r\n\r\n        //toggle shift key to move all connected\r\n        if (e.shiftKey && !selectDown) {\r\n            selectDown = true;\r\n        }\r\n        // If it was a left click\r\n        if (e.button === 0 && !selectMultiple) {\r\n            let intersection = canvasDraw.findIntersected(x, y);\r\n            selectedCanvasObject = intersection\r\n            // check if there's an object\r\n            if (intersection !== null) {\r\n                //if object is a box, move the object\r\n                if (canvas.tool === Tool.Select && intersection.typeName === \"Vertex\") {\r\n                    e.preventDefault();\r\n                    // brings up the menu\r\n                    this.props.setLeftMenu(canvasDraw.findIntersected(x, y));\r\n                    canvasDraw.onMiddleClick(canvas, x, y,null,selectDown);\r\n\r\n                } else {\r\n                    this.props.setLeftMenu(canvasDraw.findIntersected(x, y));\r\n                    canvasDraw.saveBlockStates(canvas, x, y, 1);\r\n                    canvasDraw.onLeftMousePress(canvas, x, y);\r\n                }\r\n\r\n              } else { //clicked nothing\r\n            this.props.setLeftMenu(canvasDraw.findIntersected(x, y));\r\n            canvasDraw.saveBlockStates(canvas, x, y, 1);\r\n            canvasDraw.onLeftMousePress(canvas, x, y);\r\n            }\r\n        }\r\n        \r\n        //toggles ctrl key to be active for selecting multiple.\r\n        //detoggles in mouseup\r\n        if (e.ctrlKey && !selectMultiple) {\r\n            selectMultiple = true;\r\n        }\r\n\r\n        //mouse down\r\n        if (e.button === 0 && selectMultiple) {\r\n            \r\n            let intersection = canvasDraw.findIntersected(x, y);\r\n            // check if there's an object\r\n            if (intersection === null) {\r\n                this.props.setLeftMenu(intersection, false, savedObjects);\r\n                savedObjects = [];\r\n                selectMultiple = false;\r\n\r\n            }\r\n            if (intersection !== null) {\r\n                // Remove dupes\r\n                let foundEnd = 0;\r\n                //start at 0\r\n                while (foundEnd < savedObjects.length-1){\r\n                    //stop @ second last one\r\n                    //check RHS for duplicates\r\n                    //found+1 because wanna look at box after the one we looking at\r\n                    for (let ob = foundEnd+1; ob < savedObjects.length; ob++){\r\n                        if(savedObjects[foundEnd].x === savedObjects[ob].x && savedObjects[foundEnd].y === savedObjects[ob].y ){\r\n                            savedObjects.splice(ob); // if it's the same, delete it and slide array back one\r\n                        }\r\n                    }\r\n                    foundEnd++;\r\n                }\r\n                //ideally want to push in the first object that has already been selected\r\n                savedObjects.push(canvasDraw.findIntersected(x, y));\r\n                canvasDraw.onMiddleClick(canvas, x, y, savedObjects)\r\n                \r\n                for(let i = 0; i <savedObjects.length; i++) {\r\n                    this.props.setLeftMenu(savedObjects[i], selectMultiple);\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        // If it was a middle click\r\n        if (e.button === 1) {\r\n            e.preventDefault();\r\n            canvasDraw.onMiddleClick(canvas, x, y)\r\n        }\r\n\r\n\r\n    };\r\n\r\n    mouseUp = (e, canvas) =>{\r\n\r\n        canvasDraw.solidifyObject();\r\n\r\n        let position = canvasDraw.getGraphXYFromMouseEvent(e);\r\n        let x = position[0]; let y = position[1];\r\n\r\n        // If it was a left click\r\n        if (e.button === 0) {\r\n            if (canvas.tool === Tool.Select) {\r\n                canvasDraw.drawAll()\r\n            }\r\n\t\t\telse {\r\n                canvasDraw.onLeftMouseRelease(canvas, x, y);\r\n            }\r\n\r\n        }\r\n\r\n        // if it was a right click\r\n        if (e.button === 2) {\r\n\r\n           // deleted the old rightclick functionality and will leave this if statement here for when we implement right click menu - cooper\r\n           \r\n\t\t\t\r\n        }\r\n\t\tif (e.shiftKey && selectDown) {\r\n            selectDown = false;\r\n        }\r\n\r\n        if (e.button === 1) {\r\n            window.setTimeout(() => {canvasDraw.solidifyObject()},200)\r\n\r\n        }\r\n\t\tif (canvasDraw.blockBeenSelected === true){\r\n\t\t\tcanvasDraw.checkCollision(selectedCanvasObject);\r\n\t\t}\r\n\t\t\r\n    };\r\n\r\n    mouseLeave() {\r\n        canvasDraw.onMouseLeave()\r\n    }\r\n\r\n    render() {\r\n        return <canvas ref={this.canvasRef} id=\"drawCanvas\" onContextMenu={(e) => this.ocm(e)} onMouseDown={(e) => this.mouseDown(e, this)} onMouseUp={(e) => this.mouseUp(e, this)} onMouseLeave={(e) => this.mouseLeave(e,this)}>\r\n                <p> HTML5 Canvas elements are not supported by your browser</p>\r\n            </canvas>\r\n    }\r\n\r\n}\r\n\r\nwindow.addEventListener(\"resize\",canvasDraw.resetMouseOrigin);\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport { Vertex } from \"../DataStructures/Vertex\";\r\nimport { Arrow } from \"../DataStructures/Arrow\";\r\nimport { Tool } from \"./LeftMenu\";\r\nimport { Graph } from \"../DataStructures/Graph\";\r\nimport {getGraphNameFromKey, getVertexData, handleAddVertex} from \"./ContainmentTree\";\r\nimport { createSaveState } from \"../Serialisation/NewFileManager\";\r\nimport {selectedCanvasObject} from \"./Canvas\"\r\nimport { getTreeVertexEmptyIcon } from \"../Config\";\r\n\r\n//false unless the onMouseMove function is executing, Is used to stop vertex created with leftmenu tool creating multiple vertex's when dragging for an inital size\r\nlet dragging = false;\r\n\r\n// Core variables\r\nlet canvasElement;\r\nlet canvasContext;\r\n\r\n// Mouse / Cursor\r\nlet mouseStartX;\r\nlet mouseStartY;\r\n\r\nlet previousObject;\r\nlet startX, startY, endX, endY;\r\n\r\nlet yRows = 70;\r\n\r\nexport var mouseOriginX;\r\nexport var mouseOriginY;\r\n\r\n// Non zoomed in Width/Height (in pixels)\r\nlet canvasWidth;\r\nlet canvasHeight;\r\n\r\n// Zoom and Pan\r\nlet zoom = 200.0;\r\n\r\n// Renderable objects\r\nexport var currentObjects = new Graph();\r\n\r\nexport var savedArrows = [];\r\n\r\nexport let currentContainerKey = 0;\r\n//Total keys are to identify what key to give the next created object\r\nexport let totalContainerKeys = 0\r\n\r\nexport let currentGraph = 0;\r\nexport let totalGraphs = 0;\r\n\r\nexport function setTotalContainerKey(newData){\r\n    totalContainerKeys = newData;\r\n}\r\nexport function setTotalGraphKeys(newData){\r\n    totalGraphs = newData;\r\n}\r\n\r\nexport function getCurrentContainerKey() {\r\n    return currentContainerKey;\r\n}\r\n\r\nexport function setNewContainerKey(newKey) {\r\n    currentContainerKey = newKey;\r\n}\r\n\r\nexport function getTotalContainerKeys() {\r\n    return totalContainerKeys;\r\n}\r\n\r\nexport function incrementTotalContainerKeys() {\r\n    totalContainerKeys = totalContainerKeys += 1;\r\n}\r\n\r\nexport function getCurrentObjects() {\r\n    return currentObjects;\r\n}\r\n\r\n// --- Graph Key Stuff --- //\r\n\r\nexport function getCurrentGraph() {\r\n    return currentGraph;\r\n}\r\n\r\nexport function setNewGraph(newGraph) {\r\n    currentGraph = newGraph;\r\n    try {\r\n        document.getElementById(\"SelectedGraph\").value = getGraphNameFromKey(newGraph)\r\n    } catch (error) {\r\n        \r\n    }\r\n    \r\n\r\n}\r\n\r\nexport function getTotalGraphs() {\r\n    return totalGraphs;\r\n}\r\n\r\nexport function incrementTotalGraphs() {\r\n    totalGraphs = totalGraphs += 1;\r\n}\r\n\r\n\r\n\r\n\r\n// Arrow Path\r\nexport var arrowPath = [];\r\nlet lastX = 0;\r\nlet lastY = 0;\r\n\r\n\r\n// Resize status\r\nlet resizing = false;\r\n\r\nlet arrowType = 0;\r\nlet firstArrowJoint = true;\r\n\r\nlet cancelDraw = false;\r\n\r\n//Block Past location var\r\nlet past_location = [];\r\nlet past_size = [];\r\nexport var blockBeenSelected = false;\r\n\r\n// Init\r\nexport function assignElement(elementID) {\r\n    canvasElement = document.getElementById(elementID);\r\n    canvasContext = canvasElement.getContext(\"2d\");\r\n\r\n    resetMouseOrigin();\r\n\r\n}\r\n\r\nexport function resetMouseOrigin() {\r\n    try {\r\n        let canvasRect = canvasElement.getBoundingClientRect();\r\n        mouseOriginX = canvasRect.left;\r\n        mouseOriginY = canvasRect.top;\r\n        recalculateScale();\r\n        clearCanvas();\r\n    } catch {\r\n        console.error(\"Failed to acquire canvas element\");\r\n    }\r\n    drawAll()\r\n}\r\n\r\n// Core functions\r\nexport function drawAll() {\r\n    updateArrows();\r\n    clearCanvas();\r\n\r\n    canvasContext.resetTransform();\r\n    canvasContext.scale(getEffectiveZoom(), getEffectiveZoom());\r\n\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item !== null) {\r\n            //Only render the objects which are in the currently selected Graph\r\n            if (item.getGraphKey() === currentGraph) {\r\n                item.draw(canvasContext);\r\n\r\n            }\r\n        }\r\n    });\r\n\r\n}\r\n\r\nexport function deleteElement(element) {\r\n    if (element !== null) {\r\n        if (!currentObjects.remove(element)) {\r\n            console.error(\"Failed to delete object with UUID %s\", element.semanticIdentity.UUID);\r\n        }\r\n    } else {\r\n        console.error(\"Attempted to delete a null element\");\r\n    }\r\n\r\n    drawAll()\r\n}\r\n\r\n//Deletes any arrows connected to Vertex, then the Vertex\r\nexport function vertexDeleteElement(element) {\r\n    console.log(\"vDeleteE occurs\")\r\n    //Get the arrow UUID's\r\n    let sourceUUIDs = currentObjects.ArrowUUIDSource(element);\r\n    let destUUIDs = currentObjects.ArrowUUIDDest(element);\r\n    //find an arrow with matching source/dest if they exist\r\n    sourceUUIDs.forEach(element => currentObjects.remove(element.arrow));\r\n    destUUIDs.forEach(element => currentObjects.remove(element.arrow))\r\n\r\n    //Now that the arrows are out of the way, we're safe to delete the vertex\r\n    deleteElement(element);\r\n\r\n}\r\n\r\nexport function updateRows() {\r\n    yRows = document.getElementById(\"canvasRows\").value;\r\n    drawAll()\r\n}\r\n\r\n// Format co-ordinate so that the value aligns with a row\r\nfunction findNearestGridY(y, top) {\r\n\r\n    // distance to topmost top rowLine\r\n    let slotHeight = canvasHeight / yRows * zoom / 100 * 200 / zoom;\r\n\r\n    // which row to put it in\r\n    let slot = Math.floor(y / slotHeight);\r\n\r\n    // y co-ordinate of that row (if bottom then go up by row gap)\r\n    return slotHeight * slot + (slotHeight / 2 * + top)\r\n}\r\n\r\n// Checks to see which side it should resize on\r\nfunction checkResizeBounds(x, y) {\r\n    // Iterate through all objects and only check vertices\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n    for (let i = 0; i < currentObjectsFlattened.length; i++) {\r\n        let item = currentObjectsFlattened[i];\r\n\r\n        if (item.typeName === \"Vertex\") {\r\n            // Get vertex bounds\r\n            // x1 y1 are the lower coordinates\r\n            // x2 y2 are the upper coordinates\r\n            // Note: x2 y2 are not width/height values\r\n\r\n            //tolerance in px\r\n            let tolerance = 10;\r\n\r\n            let bounds = item.getBounds();\r\n            let x1 = bounds[0];\r\n            let y1 = bounds[1];\r\n            let x2 = bounds[2];\r\n            let y2 = bounds[3];\r\n\r\n            let top = Math.abs(y1 - y) < tolerance;\r\n            let bottom = Math.abs(y2 - y) < tolerance;\r\n            let left = Math.abs(x1 - x) < tolerance;\r\n            let right = Math.abs(x2 - x) < tolerance;\r\n            let inYBounds = y > y1 && y < y2;\r\n            let inXBounds = x > x1 && x < x2;\r\n\r\n            if (right && inYBounds) {\r\n                return [item, \"right\"];\r\n            }\r\n\r\n            if (top && left) {\r\n                return [item, \"topLeft\"];\r\n            } else if (top && right) {\r\n                return [item, \"topRight\"];\r\n            } else if (bottom && left) {\r\n                return [item, \"bottomLeft\"];\r\n            } else if (bottom && right) {\r\n                return [item, \"bottomRight\"];\r\n            } else if (left && inYBounds) {\r\n                return [item, \"left\"];\r\n            } if (right && inYBounds) {\r\n                return [item, \"right\"];\r\n            } else if (top && inXBounds) {\r\n                return [item, \"top\"];\r\n            } else if (bottom && inXBounds) {\r\n                return [item, \"bottom\"];\r\n            }\r\n        }\r\n    }\r\n\r\n    // All else fails\r\n    return [null, null];\r\n}\r\n\r\nexport const distanceThreshold = 15;\r\n\r\n// Find connectable for arrow within a threshold distance\r\nfunction getConnectionDataForArrow(cursorX, cursorY) {\r\n    const angleThreshold = 8;\r\n\r\n    let nearest = null;\r\n    let nearestDistance = 0;\r\n\r\n    // Find nearest connectable\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item !== null) {\r\n            if (item.typeName === \"Vertex\") {\r\n                let sideData = item.getNearestSideFrom(cursorX, cursorY, lastX, lastY);\r\n                // Only check if valid\r\n                if (sideData !== null && sideData[0] < distanceThreshold) {\r\n                    // Compare dist\r\n                    if (nearest === null || sideData[0] < nearestDistance) {\r\n                        nearest = [0, item.semanticIdentity.UUID, sideData[1], sideData[2]];\r\n                        nearestDistance = sideData[0];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    // Set coordinates\r\n    let coordinate = nearest;\r\n    if (nearest === null) {\r\n        coordinate = [1, cursorX, cursorY];\r\n    }\r\n\r\n    // If can't snap to right angles\r\n    if (arrowPath.length < 1 || coordinate[0] === 0) return { coord: coordinate, snapped: nearest !== null, nearest: nearest };\r\n\r\n    // Get angle\r\n    let lastPathX = arrowPath[arrowPath.length - 1][1];\r\n    let lastPathY = arrowPath[arrowPath.length - 1][2];\r\n    let x = coordinate[1] - lastPathX;\r\n    let y = coordinate[2] - lastPathY;\r\n\r\n    // must be y,x check documentation if you dont believe me\r\n    let angle = Math.atan2(y, x) * (180 / Math.PI);\r\n    // Make positive\r\n    angle = (angle + 360) % 360;\r\n    // Get relative\r\n    let relAngle = angle % 90;\r\n\r\n    // Check if it should snap to right angles\r\n    if (relAngle > 90 - angleThreshold || relAngle < angleThreshold) {\r\n        // Get length\r\n        let l = getDistance(0, 0, x, y);\r\n\r\n        // Choose angle\r\n        let angles = [0, 90, 180, 270, 360];\r\n        let nearestAngle = angles[0];\r\n        for (let i = 1; i < angles.length; i++) {\r\n            if (Math.abs(angles[i] - angle) < Math.abs(nearestAngle - angle)) {\r\n                nearestAngle = angles[i];\r\n            }\r\n        }\r\n        let nearestRad = nearestAngle * (Math.PI / 180);\r\n\r\n        // Create vector\r\n        let xv = l * Math.cos(nearestRad);\r\n        let yv = l * Math.sin(nearestRad);\r\n\r\n        // Create point (not vector sitting on 0,0)\r\n        coordinate = [coordinate[0], lastPathX + xv, lastPathY + yv];\r\n\r\n\r\n    }\r\n\r\n    return { coord: coordinate, snapped: nearest !== null, nearest: nearest }\r\n}\r\n\r\nexport function getSelectedObject(canvas) {\r\n    return canvas.props.mainState.selectedObject\r\n}\r\n\r\nfunction resizeObjectOnMouseMove(e, resizeVars) {\r\n    let coords = getGraphXYFromMouseEvent(e);\r\n\r\n    resizeVars[0].expandSide(resizeVars[1], coords[0], coords[1], canvasContext);\r\n\r\n    //grab object and arrows connected to it\r\n    // update arrows\r\n    updateA();\r\n    \r\n    \r\n}\r\n\r\n// Sets the objects uuid and adds it to the root of currentObjects\r\nexport function addObject(object) {\r\n    if (object === null || object === undefined) return;\r\n    currentObjects.add(object);\r\n}\r\n\r\n// Sets the currentObjects value to a new one. WARNING it will override the current value without any checks\r\nexport function setCurrentObjects(newObjects) {\r\n    currentObjects = newObjects;\r\n    drawAll();\r\n}\r\n\r\nexport function newFile() {\r\n    // Confirm\r\n    let r = window.confirm(\"Are you sure, this will clear the current canvas!\");\r\n    if (r === true) {\r\n        console.log(\"Clearing canvas\");\r\n        window.location.reload();\r\n    } else {\r\n        console.log(\"User opted to not clear the canvas\");\r\n    }\r\n\r\n    // Redraw\r\n    drawAll(currentObjects);\r\n}\r\n\r\nfunction arrowToolSelected() {\r\n    return arrowType === Tool.Visibility || arrowType === Tool.Edge || arrowType === Tool.Specialisation\r\n}\r\n\r\nexport function getObjectFromUUID(UUID) {\r\n    let foundObject;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.semanticIdentity.UUID === UUID) {\r\n            foundObject = item;\r\n        }\r\n    });\r\n    return foundObject;\r\n}\r\n\r\n\r\nfunction findNearestArrowPointIndex(x, y) {\r\n    let nearestPointIndex = -1;\r\n    // Nearest distance here is used as a tolerance variable\r\n    let nearestDistance = 30;\r\n    let cDist;\r\n    let nearestArrow = null;\r\n\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n            item.path.forEach((point) => {\r\n                cDist = Math.hypot(x - point[0], y - point[1]);\r\n                if (cDist < nearestDistance) {\r\n                    nearestDistance = cDist;\r\n                    nearestPointIndex = item.path.indexOf(point);\r\n                    nearestArrow = item\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return [nearestPointIndex, nearestArrow]\r\n}\r\n\r\nfunction StickArrowToObject(connectionData, arrow, index) {\r\n    // so the line sticks to object\r\n    if (connectionData['snapped'] === false) {\r\n        let coord = connectionData['coord'];\r\n        // update the arrow\r\n        arrow.path[index] = [coord[1], coord[2]]\r\n    } else {\r\n        let vertexUUID = connectionData['nearest'][1];\r\n        let vertex = getObjectFromUUID(vertexUUID);\r\n\r\n        if (vertex !== undefined) {\r\n            arrow.path[index] = arrow.rebuildPath()\r\n        }\r\n    }\r\n}\r\n\r\nfunction moveArrowPointOnMouseMove(e, index, arrow) {\r\n    let x, y;\r\n    [x, y] = getGraphXYFromMouseEvent(e);\r\n    let conData = getConnectionDataForArrow(x, y);\r\n    arrow.pathData[index] = conData['nearest'];\r\n    StickArrowToObject(conData, arrow, index);\r\n\r\n\r\n}\r\n\r\n\r\n// Event based functions\r\nexport function onLeftMousePress(canvas, x, y) {\r\n\r\n    // Checks if your mouse is in range of the borders of a box to resize them\r\n    let resizeVars = checkResizeBounds(x, y);\r\n    if (canvas.tool === Tool.Vertex || canvas.tool === Tool.Select) {\r\n        if (resizeVars[0] !== null) {\r\n            if (resizeVars[0] === getSelectedObject(canvas)) {\r\n                saveBlockStates(canvas, x, y);\r\n                resizing = true;\r\n                canvasElement.onmousemove = function (e) {\r\n                    resizeObjectOnMouseMove(e, resizeVars);\r\n\r\n                };\r\n                \r\n                return;\r\n            }\r\n        }\r\n\r\n        let intersection = findIntersected(x, y);\r\n        if (canvas.tool === Tool.Vertex && intersection !== null) {\r\n            canvas.props.setLeftMenu(intersection);\r\n            canvas.props.setMode(Tool.Select);\r\n            cancelDraw = true;\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    if (canvas.tool === Tool.Select) {\r\n        let index, arrow;\r\n        [index, arrow] = findNearestArrowPointIndex(x, y);\r\n        if (arrow === getSelectedObject(canvas)) {\r\n            if (index !== -1) {\r\n                resizing = true;\r\n                let func = function (e) {\r\n                    moveArrowPointOnMouseMove(e, index, arrow)\r\n                };\r\n\r\n\r\n                canvasElement.addEventListener(\"mousemove\", func);\r\n                canvasElement.addEventListener(\"mouseup\", () => {\r\n                    canvasElement.removeEventListener(\"mousemove\", func);\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    mouseStartX = x;\r\n    mouseStartY = y;\r\n\r\n    // Enable example draw while user is deciding shape\r\n    canvasElement.onmousemove = function (e) { onMouseMove(e, canvas) }\r\n}\r\n\r\n//aligning lines when large box moved\r\nexport function checkArrowsConnectedToBox(Object) {\r\n    // check arrows which one matches the box that was moved by its ID \r\n\r\n    // check how much the box has changed\r\n    let objectID;\r\n\r\n    let arrowArray = [];\r\n\r\n    resizing = true;\r\n    objectID = Object.semanticIdentity.UUID;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n            let conData = 0;\r\n            //If the object is connected to destination\r\n            if (objectID === item.destVertexUUID) {\r\n                arrowArray.push(item);\r\n                // get connection data calcs min dist to travel and hopefully it's straight up\r\n                // first object destination y is less than object y\r\n                if (item.path[0][1] < Object.y) {\r\n                    conData = getConnectionDataForArrow(item.path[0][0], Object.y);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(item.path[0][0], Object.y + Object.height);\r\n                }\r\n                item.pathData[1] = conData['nearest'];\r\n                StickArrowToObject(conData, item, 1);\r\n                //If the object is connected to Source\r\n            } else if (objectID === item.sourceVertexUUID) {\r\n                arrowArray.push(item);\r\n                if (item.path[1][1] < Object.y) {\r\n                    conData = getConnectionDataForArrow(item.path[1][0], Object.y);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(item.path[1][0], Object.y + Object.height);\r\n                }\r\n                item.pathData[0] = conData['nearest'];\r\n                StickArrowToObject(conData, item, 0);\r\n            }\r\n        }\r\n    });\r\n    resizing = false;\r\n}\r\n\r\nexport function checkHorizArrowsConnectedToBox(Object) {\r\n    let objectID;\r\n    let arrowArray = [];\r\n    resizing = true;\r\n    objectID = Object.semanticIdentity.UUID;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n            let conData = 0;\r\n            //If the object is connected to destination\r\n            if (objectID === item.destVertexUUID) {\r\n                arrowArray.push(item);\r\n\r\n                if (item.path[0][0] < Object.x) {\r\n                    conData = getConnectionDataForArrow(Object.x + 1, item.path[0][1]);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(Object.x + Object.width - 1, item.path[0][1]);\r\n                }\r\n                item.pathData[1] = conData['nearest'];\r\n                StickArrowToObject(conData, item, 1);\r\n\r\n                //If the object is connected to Source\r\n            } else if (objectID === item.sourceVertexUUID) {\r\n                arrowArray.push(item);\r\n                if (item.path[1][0] < Object.x) {\r\n                    conData = getConnectionDataForArrow(Object.x + 1, item.path[0][1]);\r\n                }\r\n                else {\r\n                    conData = getConnectionDataForArrow(Object.x + Object.width - 1, item.path[0][1]);\r\n                }\r\n                item.pathData[0] = conData['nearest'];\r\n                StickArrowToObject(conData, item, 0);\r\n            }\r\n        }\r\n    });\r\n    resizing = false;\r\n}\r\n\r\n\r\n//save the position of the clicked variable as global\r\nexport function saveBlockStates(canvas, x, y) {\r\n    if (selectedCanvasObject !== null) {\r\n        blockBeenSelected = true;\r\n\r\n        past_location = [selectedCanvasObject.x, selectedCanvasObject.y];\r\n        past_size = [selectedCanvasObject.width, selectedCanvasObject.height];\r\n    }\r\n}\r\n\r\nexport function setArrowType(type) {\r\n    arrowType = type\r\n}\r\n\r\n//make sure boxes don't collide\r\nexport function checkCollision(canvasObject) {\r\n    let object = canvasObject\r\n    let CollideCount = 0;\r\n    // for loop to check all boxes in the list\r\n    if (currentObjects.flatten() !== null && object !== null) {\r\n        currentObjects.flatten().forEach((item) => {\r\n            if (item.typeName === \"Vertex\") {\r\n                //make sure coords are > coords of box u just placed + its width\r\n                if (object.x === item.x && object.y === item.y) {\r\n                }\r\n                // error of 10 pixels for item's height\r\n                else if ((object.y > (item.y + item.height + 10)) || (object.x > (item.x + item.width))\r\n                    || (item.x > (object.x + object.width)) || (item.y > (object.y + object.height + 10))) {\r\n                }\r\n                else {\r\n                    // revert to past stored location\r\n                    object.x = past_location[0];\r\n                    object.y = past_location[1];\r\n                    object.width = past_size[0];\r\n                    object.height = past_size[1];\r\n                    CollideCount++;\r\n                }\r\n            }\r\n        });\r\n        // as long as never collided, change to new location\r\n        if (CollideCount === 0) {\r\n            past_location = [object.x, object.y];\r\n            past_size = [object.width, object.height]\r\n        }\r\n        blockBeenSelected = false;\r\n        drawAll(currentObjects);\r\n    }\r\n}\r\n\r\n\r\nexport function onRightMouseRelease(canvas, x, y) {\r\n    let ET = findIntersected(x, y);\r\n    if (arrowToolSelected() && ET !== null) {\r\n        // Create\r\n\r\n        let newObject = createObject(canvas, mouseStartX, mouseStartY, x, y);\r\n\r\n        // Reset path\r\n        arrowPath = [];\r\n        firstArrowJoint = true;\r\n\r\n        addObject(newObject);\r\n\r\n        // Disable example draw\r\n        canvasElement.onmousemove = null;\r\n        drawAll(currentObjects);\r\n\r\n        canvas.props.setLeftMenu(newObject)\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n}\r\n\r\nexport function updateA() {\r\n    let conData = 0;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n\r\n            conData = getConnectionDataForArrow(item.path[1][0], item.path[1][1]);\r\n            item.pathData[1] = conData['nearest'];\r\n            StickArrowToObject(conData, item, 0);\r\n\r\n\r\n        }\r\n    });\r\n}\r\nexport function compareSizesToMoveAll(Object) {\r\n\r\n    //for loop to get all the arrows\r\n    //for loop to check destination and source\r\n    //if object ID is equal \r\n    //find whichever one is not the currently selected block\r\n    // if it's smaller move it else do nothing\r\n\r\n    let objectID;\r\n    let verticalArray = [];\r\n    let horizontalArray = [];\r\n    let box;\r\n    let boxArray = [];\r\n    let allArrows = [];\r\n\r\n    objectID = Object.semanticIdentity.UUID;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n\r\n            //If the object is connected to destination\r\n            if (objectID === item.destVertexUUID) {\r\n                box = getObjectFromUUID(item.sourceVertexUUID);\r\n                if ((box.height + 10) * box.width < (Object.height + 10) * Object.width) {\r\n                    boxArray.push(box);\r\n\r\n                }\r\n                //check if arrow is on top/ below\r\n                if (item.path[0][1] < Object.y || item.path[0][1] > Object.y + Object.height + 10) {\r\n                    //push to vertical array\r\n                    verticalArray.push(item);\r\n                }\r\n                //check if arrow is left/ right\r\n                else if (item.path[0][0] < Object.x || item.path[0][0] > Object.x + Object.width) {\r\n                    //push to horizontal array\r\n                    horizontalArray.push(item);\r\n                }\r\n\r\n\r\n\r\n            }\r\n            //If the object is connected to Source\r\n            else if (objectID === item.sourceVertexUUID) {\r\n                box = getObjectFromUUID(item.destVertexUUID);\r\n                if ((box.height + 10) * box.width < (Object.height + 10) * Object.width) {\r\n                    boxArray.push(box);\r\n                }\r\n                //check if arrow is on top/ below\r\n                if (item.path[1][1] < Object.y || item.path[1][1] > Object.y + Object.height + 10) {\r\n                    //push to vertical array\r\n                    verticalArray.push(item);\r\n\r\n                }\r\n                //check if arrow is left/ right\r\n                else if (item.path[1][0] < Object.x || item.path[1][0] > Object.x + Object.width) {\r\n                    //push to horizontal array\r\n                    horizontalArray.push(item);\r\n                }\r\n\r\n            }\r\n\r\n            allArrows.push(item);\r\n        }\r\n\r\n    });\r\n    return [boxArray, verticalArray, horizontalArray, allArrows];\r\n}\r\n\r\nexport function checkBoxSizesAndReturnBigBox(first, second) {\r\n    if ((first.width) * (first.height + 10) <= (second.width) * (second.height + 10)) {\r\n        return [second, first];\r\n    } else {\r\n        return [first, second];\r\n    }\r\n}\r\n\r\n//line intersect\r\nexport function lineIntersect(canvas, x, y, secondObject) {\r\n    endX = 0;\r\n    endY = 0;\r\n\r\n    startX = 0;\r\n    startY = 0;\r\n\r\n    arrowPath = [];\r\n\r\n    //previous object is below\r\n    if (previousObject.y > y && previousObject.x + previousObject.width > x) {\r\n        startY = previousObject.y;\r\n        startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n        endY = secondObject.y + secondObject.height + 10;\r\n        endX = secondObject.x + (0.5 * secondObject.width);\r\n\r\n    }\r\n    // previous object is above\r\n    else if (previousObject.y < y && previousObject.x + previousObject.width > x && previousObject.x < x) {\r\n        startY = previousObject.y + previousObject.height + 10; //+ means go to bottom\r\n        startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n        endY = secondObject.y;\r\n        endX = secondObject.x + (0.5 * secondObject.width);\r\n    }\r\n    //previous object is left of //if you click higher it counts as above\r\n\r\n    //sizes based on Total Area\r\n    let blockPre = previousObject.height + previousObject.width;\r\n    let blockSec = secondObject.height + secondObject.width;\r\n\r\n    //previous object is below\r\n    if (previousObject.y > (secondObject.y + secondObject.height + 10)) {\r\n        //if previous is inside second range\r\n        if ((previousObject.x > secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            startY = previousObject.y;\r\n            startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n            endY = startY - (startY - (secondObject.y + secondObject.height + 10));\r\n            endX = startX;\r\n        }\r\n        //if second is inside previous range\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) > (secondObject.x + secondObject.width))) {\r\n            startY = secondObject.y + secondObject.height + 10;\r\n            startX = secondObject.x + (0.5 * secondObject.width);\r\n\r\n            endY = startY + (previousObject.y - startY);\r\n            endX = startX;\r\n        }\r\n        //If pre is downLeft of sec extend whichever box is bigger horizontally and fit\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + (secondObject.x - previousObject.x);\r\n                secondObject.x = previousObject.x;\r\n\r\n                startY = previousObject.y;\r\n                startX = secondObject.x + previousObject.width / 2;\r\n                endY = secondObject.y + secondObject.height;\r\n                endX = startX;\r\n                //second obj is changing size\r\n                checkArrowsConnectedToBox(secondObject);\r\n\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + ((secondObject.x + secondObject.width) - (previousObject.x + previousObject.width));\r\n\r\n                startY = secondObject.y + secondObject.height;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y;\r\n                endX = startX;\r\n                //prev obj is changing size\r\n\r\n                //this one works\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n        //If pre is downright of sec extend whichever box is better horizontally and fit\r\n        else if (previousObject.x > secondObject.x) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + ((previousObject.x + previousObject.width) - (secondObject.x + secondObject.width));\r\n\r\n                startY = previousObject.y;\r\n                startX = previousObject.x + previousObject.width / 2;\r\n                endY = secondObject.y + secondObject.height;\r\n                endX = startX;\r\n                //second obj is changing size\r\n\r\n                checkArrowsConnectedToBox(secondObject, endX - startX, endY - startY);\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + (previousObject.x - secondObject.x);\r\n                previousObject.x = secondObject.x;\r\n\r\n                startY = secondObject.y + secondObject.height;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y;\r\n                endX = startX;\r\n                //prev obj is changing size\r\n\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n    }\r\n    // previous object is above\r\n    else if (previousObject.y + previousObject.height + 10 < secondObject.y) {\r\n        //if previous is inside second range\r\n        if ((previousObject.x > secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            startY = previousObject.y + previousObject.height;\r\n            startX = previousObject.x + (0.5 * previousObject.width);\r\n\r\n            endY = startY - (startY - (secondObject.y));\r\n            endX = startX;\r\n        }\r\n        //if second is inside previous range\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) > (secondObject.x + secondObject.width))) {\r\n            startY = secondObject.y;\r\n            startX = secondObject.x + (0.5 * secondObject.width);\r\n\r\n            endY = startY + previousObject.height + (previousObject.y - startY);\r\n            endX = startX;\r\n        }\r\n        //If pre is upLeft of sec extend whichever box is better horizontally and fit\r\n        else if ((previousObject.x < secondObject.x) && ((previousObject.x + previousObject.width) < (secondObject.x + secondObject.width))) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + (secondObject.x - previousObject.x);\r\n                secondObject.x = previousObject.x;\r\n\r\n                startY = previousObject.y + previousObject.height;\r\n                startX = secondObject.x + previousObject.width / 2;\r\n                endY = secondObject.y;\r\n                endX = startX;\r\n                //second obj is changing size\r\n\r\n                //fixed\r\n                checkArrowsConnectedToBox(secondObject);\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + ((secondObject.x + secondObject.width) - (previousObject.x + previousObject.width));\r\n\r\n\r\n                startY = secondObject.y;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y + previousObject.height;\r\n                endX = startX;\r\n                //previous obj is changing size\r\n\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n        //If pre is upright of sec extend whichever box is bigger horizontally and fit\r\n        else if (previousObject.x > secondObject.x) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.width = secondObject.width + ((previousObject.x + previousObject.width) - (secondObject.x + secondObject.width));\r\n\r\n                startY = previousObject.y + previousObject.height;\r\n                startX = previousObject.x + previousObject.width / 2;\r\n                endY = secondObject.y;\r\n                endX = startX;\r\n                //previous obj is changing size\r\n\r\n                //this one is fixed\r\n                checkArrowsConnectedToBox(secondObject);\r\n            }\r\n            if (blockPre >= blockSec) {\r\n                previousObject.width = previousObject.width + (previousObject.x - secondObject.x);\r\n                previousObject.x = secondObject.x;\r\n\r\n                startY = secondObject.y;\r\n                startX = secondObject.x + secondObject.width / 2;\r\n                endY = previousObject.y + previousObject.height;\r\n                endX = startX;\r\n\r\n                //second obj is changing size\r\n\r\n                checkArrowsConnectedToBox(previousObject);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //previous object is left \r\n    else if (previousObject.x + previousObject.width < secondObject.x) {\r\n\r\n        //Previous is smaller\r\n        if (previousObject.y > secondObject.y && previousObject.y + previousObject.height + 10 < secondObject.y + secondObject.height + 10) {\r\n            startY = previousObject.y + (previousObject.height + 10) / 2;\r\n            startX = previousObject.x + previousObject.width;\r\n\r\n            endX = secondObject.x;\r\n            endY = startY;\r\n\r\n        }\r\n        //Second is smaller\r\n        else if (secondObject.y > previousObject.y && secondObject.y + secondObject.height + 10 < previousObject.y + previousObject.height + 10) {\r\n            startY = secondObject.y + (secondObject.height + 10) / 2;\r\n            startX = secondObject.x;\r\n\r\n            endX = previousObject.x + previousObject.width;\r\n            endY = startY;\r\n\r\n        }\r\n        //Top Left and peeking\r\n        else if (previousObject.y + previousObject.height + 10 > secondObject.y && secondObject.y > previousObject.y) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.height = secondObject.height + (secondObject.y - previousObject.y);\r\n                secondObject.y = previousObject.y;\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = previousObject.x + previousObject.width;\r\n                endX = secondObject.x;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                let increase = previousObject.height + 10 + ((secondObject.y + secondObject.height) - (previousObject.y + previousObject.height));\r\n                //looks at x coord and y coord and @ that coord checks if there's a box\r\n                //resizeVars[0] returns the box if there is a\r\n                //resizeVars[1] is which side/corner of the box that its coords are expected to be at (else null)\r\n                let resizeVars = checkResizeBounds(previousObject.x + previousObject.width, previousObject.y + previousObject.height + 10);\r\n                resizeVars[0].expandSide(resizeVars[1], previousObject.x + previousObject.width, previousObject.y + increase, canvasContext);\r\n\r\n\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n                startX = secondObject.x;\r\n\r\n                endX = previousObject.x + previousObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n            }\r\n        }\r\n        //Bottom Left and peeking\r\n        else if (secondObject.y + secondObject.height + 10 > previousObject.y && previousObject.y + previousObject.height + 10 > secondObject.y + secondObject.height + 10) {\r\n            if (blockPre <= blockSec) {\r\n\r\n                let increase = secondObject.y + secondObject.height + 10 + ((previousObject.y + previousObject.height + 10) - (secondObject.y + secondObject.height + 10));\r\n\r\n                let resizeVars = checkResizeBounds(secondObject.x + secondObject.width, secondObject.y + secondObject.height + 10);\r\n                resizeVars[0].expandSide(resizeVars[1], secondObject.x + secondObject.width, increase, canvasContext);\r\n\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = secondObject.x;\r\n\r\n                endX = previousObject.x + previousObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                previousObject.height = previousObject.height + 10 + (previousObject.y - secondObject.y);\r\n                previousObject.y = secondObject.y;\r\n\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n                startX = secondObject.x;\r\n\r\n                endX = previousObject.x + previousObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    //Previous object is right side\r\n    else if (previousObject.x > (secondObject.x + secondObject.width)) {\r\n\r\n        //Previous is smaller and on inside\r\n        if (previousObject.y > secondObject.y && previousObject.y + previousObject.height < secondObject.y + secondObject.height) {\r\n            startY = previousObject.y + (previousObject.height + 10) / 2;\r\n            startX = previousObject.x;\r\n\r\n            endX = secondObject.x + secondObject.width;\r\n            endY = startY;\r\n\r\n        }\r\n        //Second is smaller and on inside\r\n        else if (secondObject.y > previousObject.y && secondObject.y + secondObject.height < previousObject.y + previousObject.height) {\r\n            startY = secondObject.y + (secondObject.height + 10) / 2;\r\n            startX = secondObject.x + secondObject.width;\r\n\r\n            endX = previousObject.x;\r\n            endY = startY;\r\n\r\n        }\r\n        //Top Right and peeking\r\n        else if (previousObject.y + previousObject.height + 10 > secondObject.y && secondObject.y > previousObject.y) {\r\n            if (blockPre <= blockSec) {\r\n                secondObject.height = secondObject.height + 10 + (secondObject.y - previousObject.y);\r\n                secondObject.y = previousObject.y;\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = previousObject.x;\r\n\r\n                endX = secondObject.x + secondObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                previousObject.height = previousObject.height + 10 + ((secondObject.y + secondObject.height + 10) - (previousObject.y + previousObject.height + 10));\r\n\r\n                startX = secondObject.x + secondObject.width;\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n\r\n                endX = previousObject.x;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n            }\r\n\r\n        }\r\n        //Bottom Left and peeking\r\n        else if (secondObject.y + secondObject.height + 10 < previousObject.y + previousObject.height + 10 && previousObject.y < secondObject.y + secondObject.height + 10) {\r\n            if (blockPre <= blockSec) {\r\n                let increase = secondObject.height + 10 + ((previousObject.y + previousObject.height + 10) - (secondObject.y + secondObject.height + 10));\r\n                let resizeVars = checkResizeBounds(secondObject.x + secondObject.width, secondObject.y + secondObject.height + 10);\r\n                resizeVars[0].expandSide(resizeVars[1], secondObject.x + secondObject.width, secondObject.y + increase, canvasContext);\r\n\r\n\r\n                startY = previousObject.y + (previousObject.height + 10) / 2;\r\n                startX = previousObject.x;\r\n\r\n                endX = secondObject.x + secondObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(secondObject);\r\n\r\n            }\r\n\r\n            if (blockPre >= blockSec) {\r\n                let increase = previousObject.height + 10 + (previousObject.y - secondObject.y);\r\n                let resizeVars = checkResizeBounds(previousObject.x + previousObject.width, previousObject.y + previousObject.height + 10);\r\n                resizeVars[0].expandSide(resizeVars[1], previousObject.x + previousObject.width, previousObject.y + increase, canvasContext);\r\n\r\n                previousObject.y = secondObject.y;\r\n\r\n\r\n                startX = previousObject.x;\r\n                startY = secondObject.y + (secondObject.height + 10) / 2;\r\n\r\n                endX = secondObject.x + secondObject.width;\r\n                endY = startY;\r\n\r\n                checkHorizArrowsConnectedToBox(previousObject);\r\n\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    arrowPath.push(getConnectionDataForArrow(startX, startY).coord);\r\n\r\n\r\n    let newObject = createObject(canvas, startX, startY, endX, endY);\r\n\r\n\r\n\r\n    return newObject;\r\n\r\n\r\n\r\n}\r\n//\r\nexport function collectMehBox(boxes, arrows, bigbox, item, index) {\r\n\r\n    if (bigbox.semanticIdentity.UUID === item.destVertexUUID) {\r\n        let box = getObjectFromUUID(item.sourceVertexUUID);\r\n        if ((bigbox.y) * index + (box.y) * (1 - index) > (box.y + box.height + 10) * index + (bigbox.y + bigbox.height + 10) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n\r\n\r\n    } else if (bigbox.semanticIdentity.UUID === item.sourceVertexUUID) {\r\n        let box = getObjectFromUUID(item.destVertexUUID);\r\n        if ((bigbox.y) * index + (box.y) * (1 - index) > (box.y + box.height + 10) * index + (bigbox.y + bigbox.height + 10) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n    }\r\n    return [boxes, arrows];\r\n}\r\n//Will arrange boxes and arrows in linked order above or below the big box.\r\n//Bigbox - The larger important box\r\n//boxes - list of all the boxes being moved\r\n//arrows - arrows connect to the above boxes\r\n//index - denotes the side that boxes are connected to \r\nexport function arrangeboxesandarrows(bigbox, boxes, arrows, index) {\r\n    //index = 1 = up\r\n    if (boxes.length >= 2) {\r\n        let b = 0;\r\n        let x = bigbox.x;\r\n        let y = bigbox.y + (bigbox.height + 30) * (1 - index);\r\n        for (b; b < boxes.length; b++) {\r\n            boxes[b].x = x;\r\n            boxes[b].y = y - ((boxes[b].height + 30) * index);\r\n            x = x + boxes[b].width + 20;\r\n\r\n            if (boxes[b].x + boxes[b].width > bigbox.x + bigbox.width) {\r\n                bigbox.width = bigbox.width + boxes[b].width\r\n            }\r\n        }\r\n        b = 0;\r\n        for (b; b < boxes.length; b++) {\r\n            let conData = getConnectionDataForArrow(boxes[b].x + boxes[b].width / 2, bigbox.y + (bigbox.height + 10) * (1 - index));\r\n            arrows[b].pathData[1] = conData['nearest'];\r\n            StickArrowToObject(conData, arrows[b], 1);\r\n        }\r\n    }\r\n}\r\n//\r\nexport function collectsidebox(boxes, arrows, bigbox, item, index) {\r\n\r\n    if (bigbox.semanticIdentity.UUID === item.destVertexUUID) {\r\n        let box = getObjectFromUUID(item.sourceVertexUUID);\r\n        if ((bigbox.x) * index + (box.x) * (1 - index) > (box.x + box.width) * index + (bigbox.x + bigbox.width) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n\r\n\r\n    } else if (bigbox.semanticIdentity.UUID === item.sourceVertexUUID) {\r\n        let box = getObjectFromUUID(item.destVertexUUID);\r\n        if ((bigbox.x) * index + (box.x) * (1 - index) > (box.x + box.width) * index + (bigbox.x + bigbox.width) * (1 - index)) {\r\n            boxes.push(box);\r\n            arrows.push(item);\r\n        }\r\n    }\r\n    return [boxes, arrows];\r\n}\r\nexport function arrangeboxesandarrowshorizontal(bigbox, boxes, arrows, index) {\r\n    //index = 0 = right\r\n    if (boxes.length >= 2) {\r\n        let b = 0;\r\n        let x = bigbox.x + (bigbox.width + 30) * (1 - index);\r\n        let y = bigbox.y;\r\n        for (b; b < boxes.length; b++) {\r\n            boxes[b].x = x - ((boxes[b].width + 30) * index);\r\n            boxes[b].y = y;\r\n            y = y + boxes[b].height + 20;\r\n            //extending box\r\n            if (boxes[b].y + boxes[b].height + 10 > bigbox.y + bigbox.height + 10) {\r\n                bigbox.height = bigbox.height + boxes[b].height;\r\n            }\r\n        }\r\n        b = 0;\r\n        for (b; b < boxes.length; b++) {\r\n            let conData = getConnectionDataForArrow(bigbox.x + (bigbox.width) * (1 - index), boxes[b].y + (boxes[b].height + 10) / 2);\r\n            arrows[b].pathData[1] = conData['nearest'];\r\n            StickArrowToObject(conData, arrows[b], 1);\r\n        }\r\n    }\r\n}\r\n\r\nexport function shiftBoxes(secondObject) {\r\n    //if box is within horizontal bounds\r\n\r\n    let upBoxes = [];\r\n    let upArrows = [];\r\n    let downBoxes = [];\r\n    let downArrows = [];\r\n    let leftBoxes = [];\r\n    let leftArrows = [];\r\n    let rightBoxes = [];\r\n    let rightArrows = [];\r\n    let [bigBox, smallBox] = checkBoxSizesAndReturnBigBox(previousObject, secondObject);\r\n\r\n    //grab all arrows connected to either object\r\n    //Index 0 means down index 1 means up\r\n\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item.typeName === \"Arrow\") {\r\n            //get the big box because it has all the arrows connected\r\n            if (bigBox.y + bigBox.height + 10 < smallBox.y && smallBox.x > bigBox.x && smallBox.x + smallBox.width < bigBox.x + bigBox.width) {\r\n                [downBoxes, downArrows] = collectMehBox(downBoxes, downArrows, bigBox, item, 0);\r\n\r\n\r\n            } else if (bigBox.y > (smallBox.y + smallBox.height + 10) && smallBox.x > bigBox.x && smallBox.x + smallBox.width < bigBox.x + bigBox.width) {\r\n                [upBoxes, upArrows] = collectMehBox(upBoxes, upArrows, bigBox, item, 1);\r\n\r\n            } else if (bigBox.x > smallBox.x + smallBox.width && smallBox.y > bigBox.y && smallBox.y + smallBox.height + 10 < bigBox.y + bigBox.height + 10) {\r\n                console.log(\"left ran\");\r\n                [leftBoxes, leftArrows] = collectsidebox(leftBoxes, leftArrows, bigBox, item, 1);\r\n\r\n            } else if (bigBox.x + bigBox.width < smallBox.x && smallBox.y > bigBox.y && smallBox.y + smallBox.height + 10 < bigBox.y + bigBox.height + 10) {\r\n                console.log(\"right ran\");\r\n                [rightBoxes, rightArrows] = collectsidebox(rightBoxes, rightArrows, bigBox, item, 0);\r\n            }\r\n        }\r\n    });\r\n    //Do stuff to boxes\r\n    //1 = up\r\n    //0 = down\r\n    arrangeboxesandarrows(bigBox, downBoxes, downArrows, 0);\r\n    arrangeboxesandarrows(bigBox, upBoxes, upArrows, 1);\r\n    arrangeboxesandarrowshorizontal(bigBox, leftBoxes, leftArrows, 1);\r\n    arrangeboxesandarrowshorizontal(bigBox, rightBoxes, rightArrows, 0);\r\n}\r\n\r\nexport function onLeftMouseRelease(canvas, x, y) {\r\n\r\n\r\n    if (cancelDraw) {\r\n        cancelDraw = false;\r\n        return;\r\n    }\r\n\r\n    if (resizing === true) {\r\n        resizing = false;\r\n        canvasElement.onmousemove = null;\r\n        return\r\n    }\r\n\r\n    // Disable example draw\r\n    canvasElement.onmousemove = null;\r\n\r\n    if (arrowToolSelected()) {\r\n        \r\n\r\n        if (getConnectionDataForArrow(x, y).snapped && !firstArrowJoint) {\r\n            // Create\r\n            let secondObject = findIntersected(x, y);\r\n            let newObject = null;\r\n            let firstObject = arrowPath[0] // the first position in the arrowpath array will either be null or the first vertex that is clicked with an arrow. \r\n                                            // therefor the arrow will not be created unless the first object that is clicked with the arrow tool is a vertex. - cooper\r\n            \r\n            if (firstObject !== null && secondObject !== null && savedArrows !== null) {\r\n                // create the arrow using the createObject function rather than the other function they were using as this seems much more stable - cooper\r\n                // also deleted a weird forloop that they had that i assume was for stopping the arrow overlap issue, but they themselves commented that it doesnt work\r\n                newObject = createObject(canvas, mouseStartX, mouseStartY, x, y); \r\n               \r\n            } \r\n\r\n            // Reset path\r\n            arrowPath = [];\r\n            firstArrowJoint = true;\r\n\r\n\r\n            if (newObject !== null) {\r\n                addObject(newObject);\r\n            }\r\n\r\n            drawAll(currentObjects);\r\n\r\n            //converting all arrows to savedArrows array\r\n            let i = 0;\r\n            currentObjects.flatten().forEach((item) => {\r\n                if (item.typeName === \"Arrow\") {\r\n                    savedArrows[i] = item.path;\r\n                    i++;\r\n                }\r\n\r\n            });\r\n\r\n            if (newObject !== null) {\r\n                canvas.props.setLeftMenu(newObject);\r\n            }\r\n\r\n            canvas.props.setMode(Tool.Select);\r\n            if (previousObject !== null && secondObject !== null) {\r\n                shiftBoxes(secondObject);\r\n            }\r\n            previousObject = null;\r\n\r\n        } else {\r\n            //maybe here where we can disable compound lines\r\n\r\n            //save object here\r\n            previousObject = findIntersected(x, y);\r\n  \r\n            arrowPath.push(getConnectionDataForArrow(x, y).coord);\r\n            lastX = x;\r\n            lastY = y;\r\n            canvasElement.onmousemove = function (e) {\r\n                onMouseMove(e, canvas)\r\n            };\r\n            firstArrowJoint = false;\r\n        }\r\n    }\r\n\r\n    if (canvas.tool === Tool.Vertex) {\r\n        let newObject = createObject(canvas, mouseStartX, mouseStartY, x, y);\r\n        addObject(newObject);\r\n\r\n        canvas.props.setLeftMenu(newObject);\r\n        canvas.props.setMode(Tool.Select);\r\n        createSaveState();\r\n    }\r\n    if (canvas.tool === Tool.Artifact) {\r\n        let newObject = createArtifact(canvas, mouseStartX, mouseStartY);\r\n        addObject(newObject);\r\n\r\n        canvas.props.setLeftMenu(newObject);\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n    if (canvas.tool === Tool.Container) {\r\n        let newObject = createContainer(canvas, mouseStartX, mouseStartY);\r\n        newObject.setColour(\"#FFFFFF\");\r\n        addObject(newObject);\r\n        canvas.props.setLeftMenu(newObject);\r\n        canvas.props.setMode(Tool.Select);\r\n    }\r\n\r\n    drawAll(currentObjects);\r\n\r\n}\r\n\r\nfunction onMouseMove(e, canvas) {\r\n    dragging = true;\r\n    let position = getGraphXYFromMouseEvent(e);\r\n\r\n    // Redraw Existing Objects\r\n    drawAll(currentObjects);\r\n\r\n    // Draw the new object\r\n    let newObject = createObject(canvas, mouseStartX, mouseStartY, position[0], position[1]);\r\n\r\n    canvasContext.globalAlpha = 0.75;\r\n    if (newObject !== null) {\r\n        newObject.draw(canvasContext);\r\n    }\r\n    canvasContext.globalAlpha = 1.0;\r\n    dragging = false;\r\n}\r\n\r\nexport function onMiddleClick(canvas, x, y, savedObjects = null, shiftDown = false) {\r\n\r\n    // selecting the object based on coordinate\r\n    // if it doesnt find an object dont run it\r\n\r\n    let selectedObject = findIntersected(x, y);\r\n\r\n    //compareSizesToMoveAll returns any connected vertices to the selected along with the arrows themselves to be updated\r\n    let [friendObject, arrowsVert, arrowsHoriz, allArrows] = compareSizesToMoveAll(selectedObject);\r\n\r\n        //If the selected block has a friend (connected by arrow) it will begin to try and identify friends of friends\r\n    if (friendObject !== null || friendObject.length >= 1) {\r\n        let ObjectsToCheck = friendObject;\r\n        let nextObjects = [];\r\n\r\n        //For loop to check all the closest friends (connected directly to selected )\r\n        for (let n = 0; n < ObjectsToCheck.length; n++) {\r\n            let [newfriendObject] = compareSizesToMoveAll(ObjectsToCheck[n]);\r\n            if (newfriendObject !== null) {\r\n\r\n                //for loop to check for duplicates and remove if any\r\n                for (let nf = 0; nf < newfriendObject.length; nf++) {\r\n                    for (let of = 0; of < ObjectsToCheck.length; of++) {\r\n                        //doesn't get run?:\r\n                        if (newfriendObject[nf].semanticIdentity.UUID === ObjectsToCheck[of].semanticIdentity.UUID) {\r\n                            newfriendObject.splice(nf, 1);\r\n                        }\r\n                    }\r\n                }\r\n                //Adds the objects that are connected to the friends to the friend list.\r\n                if (newfriendObject.length >= 1) {\r\n                    for (let p = 0; p < newfriendObject.length; p++) {\r\n                        nextObjects.push(newfriendObject[p]);\r\n                        friendObject.push(newfriendObject[p]);\r\n                    }\r\n\r\n                } \r\n            }\r\n           \r\n        }\r\n        //Updates the friendlist to begin a new search. \r\n        ObjectsToCheck = nextObjects; \r\n\r\n\r\n\r\n    }\r\n    let F = [];\r\n    if (friendObject !== null) {\r\n        let i = 0;\r\n        for (i; i < friendObject.length; i++) {\r\n            F.push([x - friendObject[i].x, y - friendObject[i].y]); //distance from mouse to actual object's x, y\r\n        }\r\n    }\r\n\r\n    let S = []; //previous coords\r\n    if (savedObjects !== null) {\r\n        let i = 0;\r\n        for (i; i < savedObjects.length; i++) {\r\n            S.push([x - savedObjects[i].x, y - savedObjects[i].y]);\r\n        }\r\n    }\r\n\r\n    if (selectedObject !== null) {\r\n        saveBlockStates(canvas, x, y);\r\n        // check the distance between the mouse and the object\r\n        let saveDisX = x - selectedObject.x;\r\n        let saveDisY = y - selectedObject.y;\r\n\r\n\r\n        canvasElement.onmousemove = function (e) { moveObject(e, selectedObject, friendObject, F, savedObjects, S, saveDisX, saveDisY, arrowsVert, arrowsHoriz, allArrows, shiftDown) }\r\n    }\r\n\r\n}\r\n\r\nexport function onMouseLeave() {\r\n    canvasElement.onmousemove = {};\r\n    firstArrowJoint = true;\r\n    drawAll()\r\n}\r\n\r\n// moving objects in respect to cursor values saveDisX, saveDisY\r\n// friends = the smaller boxes that are connected to the bigger box\r\nfunction moveObject(e, object, friends, F, savedObjects = null, S, saveDisX, saveDisY, arrowsVert, arrowsHoriz, allArrows, shiftDown) {\r\n    if (object != null) {\r\n        if (object.typeName === \"Vertex\") {\r\n            let position = getGraphXYFromMouseEvent(e);\r\n            let x = position[0] - saveDisX;\r\n            let y = position[1] - saveDisY;\r\n\r\n            //for loop iterate through all boxes assume they not empty\r\n            if (shiftDown) {\r\n                if (friends !== null) {\r\n                    let i = 0;\r\n                    //check friends' previous location and cursors location\r\n                    for (i; i < friends.length; i++) {\r\n                        friends[i].x = position[0] - F[i][0];\r\n                        friends[i].y = position[1] - F[i][1];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (savedObjects !== null) {\r\n                let i = 0;\r\n                //check friends' previous location and cursors location\r\n                for (i; i < savedObjects.length; i++) {\r\n                    savedObjects[i].x = position[0] - S[i][0];\r\n                    savedObjects[i].y = position[1] - S[i][1];\r\n                }\r\n            }\r\n\r\n            if (arrowsVert !== null) {\r\n                let conData = 0;\r\n                let j = 0;\r\n\r\n                for (j; j < arrowsVert.length; j++) {\r\n                    // source = one that's been clicked\r\n                    arrowsVert[j].path[1][0] = arrowsVert[j].path[0][0];\r\n                    conData = getConnectionDataForArrow(arrowsVert[j].path[1][0], arrowsVert[j].path[1][1]);\r\n\r\n\r\n                        StickArrowToObject(conData, arrowsVert[j], 0);\r\n                }\r\n            }\r\n            else if (arrowsHoriz !== null) {\r\n                let conData = 0;\r\n                let k = 0;\r\n                for (k; k < arrowsHoriz.length; k++) {\r\n                    // source = one that's been clicked\r\n                    arrowsHoriz[k].path[1][1] = arrowsHoriz[k].path[0][1];\r\n                    conData = getConnectionDataForArrow(arrowsHoriz[k].path[1][0], arrowsHoriz[k].path[1][1]);\r\n\r\n                    StickArrowToObject(conData, arrowsHoriz[k], 0);\r\n                }\r\n            }\r\n            else if (allArrows !== null){\r\n            }\r\n\r\n            object.x = x;\r\n            object.y = y;\r\n\r\n            updateArrows();\r\n\r\n        } else if (object.typeName === \"Arrow\") {\r\n            return;\r\n\r\n        }\r\n    }\r\n}\r\nexport function updateArrows() {\r\n    let flattenedObjects = currentObjects.flatten();\r\n    flattenedObjects.forEach((item) => {\r\n        if (item !== null) {\r\n            if (item.typeName === \"Arrow\") {\r\n                item.rebuildPath();\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function solidifyObject() {\r\n    canvasElement.onmousemove = null;\r\n}\r\n\r\n// Zoom and pan\r\nexport function setZoom(newZoom) {\r\n    zoom = newZoom;\r\n\r\n    resetMouseOrigin();\r\n\r\n    drawAll();\r\n}\r\n\r\n// Useful for debugging\r\nexport function drawMarker(xpos, ypos) {\r\n    const radius = 2;\r\n    const lineWidth = 0.5;\r\n    const strokeColour = \"#007ACC\";\r\n    const fillColour = \"#007ACC55\";\r\n\r\n    let oldLineWidth = canvasContext.lineWidth;\r\n    canvasContext.lineWidth = lineWidth;\r\n    let oldStrokeStyle = canvasContext.strokeStyle;\r\n    canvasContext.strokeStyle = strokeColour;\r\n    let oldFillStyle = canvasContext.fillStyle;\r\n    canvasContext.fillStyle = fillColour;\r\n\r\n    canvasContext.globalAlpha = 1.0;\r\n    canvasContext.beginPath();\r\n    canvasContext.arc(xpos, ypos, radius, 0, Math.PI * 2, false);\r\n    canvasContext.fill();\r\n    canvasContext.stroke();\r\n    canvasContext.closePath();\r\n\r\n    canvasContext.lineWidth = oldLineWidth;\r\n    canvasContext.strokeStyle = oldStrokeStyle;\r\n    canvasContext.fillStyle = oldFillStyle;\r\n}\r\n\r\n// Gets the distance between x1, y1 and x2, y2\r\nexport function getDistance(x1, y1, x2, y2) {\r\n    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\r\n}\r\n\r\n// Finds the object that is intersected with the cursor, returns null if no objects are intersected\r\nexport function findIntersected(x, y) {\r\n    let selectedItem = null;\r\n    currentObjects.flatten().forEach((item) => {\r\n        if (item !== null) {\r\n            if (item.intersects(x, y)) {\r\n                selectedItem = item;\r\n            }\r\n        }\r\n    });\r\n    return selectedItem;\r\n}\r\n\r\nfunction createArtifact(canvas, x1, y1) {\r\n\r\n    if (canvas.tool === Tool.Artifact) {\r\n        // Get positions\r\n        let pos = orderCoordinates(x1, y1, x1 + 450, y1 + 50);\r\n        let vy1 = findNearestGridY(pos[1], 0);\r\n        let vy2 = findNearestGridY(pos[3], 0);\r\n\r\n        // Add vertex\r\n        return new Vertex({title: \"\", content: [\"\"], x:  pos[0], y:  findNearestGridY(y1, 1), width: pos[2] - pos[0], height: vy2 - vy1});\r\n        \r\n\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction createContainer(canvas, x1, y1) {\r\n\r\n    if (canvas.tool === Tool.Container) {\r\n        // Get positions\r\n        let pos = orderCoordinates(x1, y1, x1 + 100, y1 + 60);\r\n        let vy1 = findNearestGridY(pos[1], 0);\r\n        let vy2 = findNearestGridY(pos[3], 0);\r\n\r\n        // Add Container\r\n        let newVert =  new Vertex({title: \"new Container\", content: [\"\"], x: pos[0], y: findNearestGridY(y1, 1), width: pos[2] - pos[0], height: vy2 - vy1});\r\n        newVert.setIsContainer(true);\r\n        return newVert;\r\n\r\n    }\r\n    return null;\r\n}\r\n\r\n//Links the container with the mirrorSemantic to the container with the Base (Mirror becomes base)\r\n\r\nexport function linkContainer(baseUUID,mirrorUUID){\r\n    let baseSemantic = null;\r\n    //Since rootvertices was made as a set, cant just find indexes to reference, have to keep for looping to what we want\r\n    for(let i of currentObjects.rootVertices){\r\n        if(i.vertex.semanticIdentity.UUID === baseUUID){\r\n            baseSemantic = i;\r\n            break\r\n        }\r\n    }\r\n    for(let i of currentObjects.rootVertices){\r\n        if(i.vertex.semanticIdentity.UUID === mirrorUUID){\r\n            i.vertex.semanticIdentity = baseSemantic.vertex.semanticIdentity;\r\n            break\r\n        }\r\n    }\r\n    for(let i of currentObjects.rootVertices){\r\n        if(i.vertex.semanticIdentity.UUID === baseUUID){\r\n            updateLinkedContainers(baseSemantic.vertex);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n//Updates the appearances of linked containers to match the input container\r\n//Without a source container or doing a general scan, containers would be matched to copy the first vertex in the set, not the one that most recently changed\r\nexport function updateLinkedContainers(inputContainer){\r\n    for(let i of currentObjects.rootVertices){\r\n        if(inputContainer.semanticIdentity.UUID === i.vertex.semanticIdentity.UUID){\r\n            i.vertex.title = inputContainer.title\r\n            i.vertex.content = inputContainer.content\r\n            i.vertex.icons = inputContainer.icons\r\n            i.vertex.colour = inputContainer.colour\r\n            i.vertex.imageElements = inputContainer.imageElements\r\n            i.vertex.fontSize = inputContainer.fontSize\r\n        }\r\n    }\r\n    drawAll()\r\n}\r\n\r\n//Function for creating a vertex object without the left menu tools - Lachlan\r\nexport function createVertex(x1, y1, width, height,name,content,colour,icons,imageElements,fontSize,semanticIdentity){\r\n\r\n    return new Vertex({title: name,content: content, colour: colour, x: x1, y: findNearestGridY(y1, 1), width: width, height: height, semanticIdentity: semanticIdentity});\r\n\r\n}\r\n\r\nexport function updateVertex(selectedObject){ // function to update the data of the contaimnment tree object and all other objects sharing the semantic- cooper\r\n    let vertex;\r\n    if(selectedObject.type !== \"treeVertex\"){\r\n        vertex = getLinkedVertex(selectedObject); // 'vertex' refers to the treeview object.\r\n\r\n        vertex.text = selectedObject.title + \" \" + getTreeVertexEmptyIcon();\r\n        vertex.content = selectedObject.content;\r\n        vertex.width = selectedObject.width;\r\n        vertex.height = selectedObject.height;\r\n\r\n    }\r\n    else{\r\n        vertex = selectedObject;\r\n    }\r\n\r\n\r\n    for(let verticies of currentObjects.flatten()){\r\n        if(vertex.semanticIdentity.UUID === verticies.originalUUID && verticies !== selectedObject){ // updates all of the canvas objects that come from the treeview object.\r\n\r\n            //check if This graph vertex is in a different package to the base vertex, if so make it white and add location\r\n\r\n            if(vertex.parentContainerKey === verticies.vertexContainerKey){\r\n                \r\n            //If the vertex's graph is in same package\r\n            verticies.title = vertex.text.replace(\" \" + getTreeVertexEmptyIcon(), \"\")\r\n            verticies.colour = vertex.colour;\r\n            verticies.content = vertex.content;\r\n            }\r\n            else{\r\n            verticies.title = vertex.text.replace(\" \" + getTreeVertexEmptyIcon(), \"\")\r\n            verticies.colour = \"#FFFFFF\";\r\n            verticies.content = vertex.content;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getLinkedVertex(selectedObject){ // grabs the contaiment tree object - cooper\r\n    for(let vertex of getVertexData()){\r\n        if(vertex.semanticIdentity.UUID === selectedObject.originalUUID)\r\n        return vertex;\r\n    }\r\n}\r\n\r\nfunction createObject(canvas, x1, y1, x2, y2) {\r\n    let newPath;\r\n    let currentObjectsFlattened = currentObjects.flatten();\r\n\r\n    if (canvas.tool === \"Vertex\" && dragging === false) {\r\n        // Get positions\r\n        let pos = orderCoordinates(x1, y1, x2 + 10, y2);\r\n        let vy1 = findNearestGridY(pos[1], 0);\r\n        let vy2 = findNearestGridY(pos[3], 0);\r\n\r\n        // Add vertex\r\n        console.log(\"draw vertex\")\r\n        let newVert = handleAddVertex(\"Drawn Vertex\" ,getCurrentContainerKey())\r\n\r\n        return new Vertex({title: \"Drawn Vertex\", content: newVert,colour: newVert.colour, x: pos[0], y: findNearestGridY(y1, 1), width: pos[2] - pos[0], height: vy2 - vy1, semanticIdentity: newVert.semanticIdentity});\r\n        \r\n\r\n    } else if (arrowToolSelected()) {\r\n        // Generate path\r\n\r\n        newPath = arrowPath.concat([getConnectionDataForArrow(x2, y2).coord]);\r\n\r\n        // Check if first path connects to a vertex, and ignore if it doesn't\r\n        // Should be 0 if the connectable connects to a vertex\r\n        //\r\n        //\r\n        //because createObject is always running when moving mouse\r\n        //\r\n        // if current mouse pos is not over a box, don't create arrow\r\n        // if removed here, it is still removed in another function \r\n        //let intersection = findIntersected(x2, y2);\r\n        if (newPath[0][0] !== 0) {\r\n            return null;\r\n        }\r\n\r\n        // Create arrow\r\n        \r\n        let arrow = new Arrow(currentObjectsFlattened, newPath, arrowType);\r\n        arrow.rebuildPath(currentObjectsFlattened);\r\n        return arrow;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function getGraphXYFromMouseEvent(e) {\r\n    resetMouseOrigin();\r\n\r\n    let x = (e.clientX - mouseOriginX) / getEffectiveZoom();\r\n    let y = (e.clientY - mouseOriginY) / getEffectiveZoom();\r\n\r\n    return [x, y];\r\n}\r\n\r\nexport function getDownload() {\r\n\r\n    let DLelement = document.createElement(\"a\");\r\n    DLelement.href = canvasElement.toDataURL(\"image/png\").replace(/^data:image\\/[^;]/, 'data:application/octet-stream');\r\n    DLelement.download = \"Graph.png\";\r\n    document.body.appendChild(DLelement);\r\n    DLelement.click();\r\n\r\n}\r\n\r\nfunction orderCoordinates(sx, sy, ex, ey) {\r\n    // This code also ensures x1 < x2 and y1 < y2\r\n    let x1 = Math.min(sx, ex);\r\n    let y1 = Math.min(sy, ey);\r\n    let x2 = Math.max(sx, ex);\r\n    let y2 = Math.max(sy, ey);\r\n\r\n    return [x1, y1, x2, y2];\r\n}\r\n\r\n// Gets the effective (percentage) zoom from the current zoom\r\nfunction getEffectiveZoom() {\r\n    return zoom / 100;\r\n}\r\n\r\n// This should be used whenever the window itself resizes\r\nfunction recalculateScale() {\r\n    // Adjusts the aspect ratio so it is 1:1 instead of matching the windows.\r\n    // Also removes blurry rendering\r\n    //let dpi = window.devicePixelRatio;\r\n    let canvasContainer = document.getElementsByClassName(\"Canvas\")[0];\r\n    let styleHeight = +getComputedStyle(canvasContainer).getPropertyValue(\"height\").slice(0, -2);\r\n    let styleWidth = +getComputedStyle(canvasContainer).getPropertyValue(\"width\").slice(0, -2);\r\n\r\n    canvasElement.setAttribute('height', styleHeight * getEffectiveZoom());\r\n    canvasElement.setAttribute('width', styleWidth * getEffectiveZoom());\r\n\r\n    // Configurable\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n}\r\n\r\nfunction clearCanvas() {\r\n    // Fill base canvas\r\n    canvasContext.fillStyle = \"#ffffff\";\r\n    canvasContext.fillRect(0, 0, canvasWidth, canvasHeight);\r\n}\r\n","import React from 'react';\r\nimport {getPackageData,getGraphData,getSelectedPackageKey,setSelectedPackageKey,handleGraphRebase,handleRenamePackage, handleAddGraph, getGraphNameFromKey,\r\n    handleAddPackage, handleDeletePackage, handleDeleteGraph, handleRenameGraph} from \"./ContainmentTree\"\r\nimport { setNewContainerKey, getCurrentGraph, setNewGraph, findIntersected, getGraphXYFromMouseEvent, getObjectFromUUID, getCurrentObjects,\r\n     currentObjects, drawAll, updateVertex} from \"./CanvasDraw\";\r\nimport {handleAddVertex, handleDeleteVertex, getVertexData} from \"./ContainmentTree\";\r\nimport { createSaveState } from '../Serialisation/NewFileManager';\r\nimport { getGraphIcon, getPackageIcon, getTreeVertexEmptyIcon, getTreeVertexFullIcon } from '../Config';\r\n\r\n//Name of the right clicked item where \"Default\" is a non-object such as empty canvas space\r\nlet rightClickedItem = \"Default\"; \r\n// Index of selected item\r\nlet rightClickedItemKey = 0; \r\n// the canvas object which was right clicked\r\nlet rightClickedObject; \r\n//Which menu type to return based on the selected item\r\nlet menuType = \"Default\"; \r\n\r\n//Right click menu component used to access certain function of program\r\nexport class ContextMenu extends React.Component {\r\n\r\n    state = {\r\n        xPos: \"0px\",\r\n        yPos: \"0px\",\r\n        showMenu: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"click\", this.handleClick);\r\n        document.addEventListener(\"contextmenu\", this.handleContextMenu);\r\n        document.addEventListener(\"keypress\", this.handleKey);\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"click\", this.handleClick);\r\n        document.removeEventListener(\"contextmenu\", this.handleContextMenu);\r\n        document.removeEventListener(\"keypress\", this.handleKey);\r\n    }\r\n\r\n    //The handle click method will check which menu option has been clicked and call the relevant method\r\n    handleClick = (e) => {\r\n        //ignore clicks if context menu closed\r\n        if (this.state.showMenu) {\r\n            \r\n            //If Move graph was selected, create a new context menu with available package\r\n            if(e.target.id === \"MoveGraph\"){\r\n                menuType = \"MoveGraph\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(menuType === 'MoveGraph' && e.target.id.includes(\"Package\")){\r\n                let newPackageKey = e.target.id.replace(\"Package\",'')\r\n                handleGraphRebase(rightClickedItemKey,parseInt(newPackageKey));\r\n                this.setState({showMenu: false})\r\n                this.props.setLeftMenuToTree();\r\n            }\r\n            else if(e.target.id === \"Rename\"){\r\n                menuType = \"Rename\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"RenameVertex\"){\r\n                menuType = \"RenameVertex\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"RenameGraph\"){\r\n                menuType = \"RenameGraph\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"AddVertex\"){\r\n                menuType = \"AddVertex\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"AddGraph\"){\r\n                menuType = \"AddGraph\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"AddPackage\"){\r\n                menuType = \"AddPackage\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"DeletePackage\"){\r\n                menuType = \"DeletePackage\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"DeleteVertex\"){\r\n                menuType = \"DeleteVertex\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"DeleteGraph\"){\r\n                menuType = \"DeleteGraph\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"DeleteVertexConfirmed\"){\r\n                for(let vertex of getVertexData()){\r\n                    if(vertex.containerKey === rightClickedItemKey){\r\n                        handleDeleteVertex(vertex.semanticIdentity.UUID)\r\n                    }\r\n                }\r\n                this.setState({showMenu: false})\r\n                this.props.setLeftMenuToTree();\r\n                createSaveState();\r\n            }\r\n            else if(e.target.id === \"DeletePackageConfirmed\"){\r\n                for(let packages of getPackageData()){\r\n                    if(packages.containerKey === rightClickedItemKey){\r\n                        handleDeletePackage(rightClickedItemKey)\r\n                    }\r\n                }\r\n                this.setState({showMenu: false})\r\n                this.props.setLeftMenuToTree();\r\n                createSaveState();\r\n            }\r\n            else if(e.target.id === \"DeleteGraphConfirmed\"){\r\n                for(let graph of getGraphData()){\r\n                    if(graph.graphKey === rightClickedItemKey){\r\n                        handleDeleteGraph(rightClickedItemKey)\r\n                    }\r\n                }\r\n                this.setState({showMenu: false})\r\n                this.props.setLeftMenuToTree();\r\n                createSaveState();\r\n            }\r\n            //The Empty Else ifs prevent the context menu closing when certain targets are clicked\r\n            else if(e.target.id === \"RenameBox\" || e.target.id === \"CMSelected\"){ \r\n            }\r\n            else if(e.target.id === \"RenameVertexBox\" || e.target.id === \"CMSelected\"){\r\n            }\r\n            else if(e.target.id === \"RenameGraphBox\" || e.target.id === \"CMSelected\"){\r\n            }\r\n            else if(e.target.id === \"VertexNameBox\" || e.target.id === \"CMSelected\"){\r\n            }\r\n            else if(e.target.id === \"GraphNameBox\" || e.target.id === \"CMSelected\"){ \r\n            }\r\n            else if(e.target.id === \"PackageNameBox\" || e.target.id === \"CMSelected\"){ \r\n            }\r\n            else if(e.target.id === \"Create-Graph\"){\r\n                menuType = \"AddContainerGraph\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(e.target.id === \"Bi-Nav\"){\r\n                menuType = \"Bi-Nav\";\r\n                this.setState({showMenu: true})\r\n            }\r\n            else if(menuType === 'Bi-Nav' && e.target.id.includes(\"Nav\")){\r\n                let keys = e.target.id.replace(\"Nav\",'');\r\n\r\n                setNewGraph(parseInt(keys[0]));\r\n                setNewContainerKey(keys[1]); // automatically sets the containerkey to be the same as the graph as this was causing issues - cooper\r\n                setSelectedPackageKey(keys[1]);\r\n                for (let item of currentObjects.flatten()){\r\n                    if (item.typeName === \"Vertex\" && item.getGraphKey() === getCurrentGraph()){\r\n                        item.setPresent();\r\n                    }\r\n                    else if (item.getGraphKey() !== getCurrentGraph() && item.typeName === \"Vertex\"){\r\n                        item.setAway();\r\n                    }\r\n                }\r\n                drawAll();\r\n                this.props.setLeftMenuToTree();\r\n\r\n                this.setState({showMenu: false})\r\n            }\r\n\r\n            else{this.setState({ showMenu: false });}\r\n            \r\n        }\r\n    }\r\n\r\n    handleKey = (e) => {\r\n        if(e.key === 'Enter'){\r\n            if(menuType === \"Rename\"){\r\n                let newName = document.getElementById(\"RenameBox\").value\r\n                handleRenamePackage(newName,rightClickedItemKey)\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){ //Not sure why theres an error here as it performs the method, then says the method doesnt exists, doesnt trigger on other uses of method either.-Lachlan\r\n                    //believe the issue is enter key event is fireing twice, will fix later, not a critical/detrimental or performance effecting issue - Lachlan\r\n                }\r\n                this.setState({ showMenu: false })\r\n                createSaveState();\r\n            }\r\n            else if(menuType === \"RenameGraph\"){\r\n                let newName = document.getElementById(\"RenameGraphBox\").value\r\n                handleRenameGraph(newName,rightClickedItemKey)\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){ \r\n                    console.log(e)\r\n                }\r\n                this.setState({ showMenu: false })\r\n                createSaveState();\r\n            }\r\n            else if(menuType === \"RenameVertex\"){\r\n                let newName = document.getElementById(\"RenameVertexBox\").value\r\n                rightClickedObject.text = newName;\r\n                rightClickedObject.data.text = newName;\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){ \r\n                    console.log(e)\r\n                }\r\n                updateVertex(rightClickedObject);\r\n                this.setState({ showMenu: false })\r\n                drawAll()\r\n                createSaveState();\r\n            }\r\n            else if(menuType === \"AddVertex\"){\r\n                \r\n                let vertexName = document.getElementById(\"VertexNameBox\").value;\r\n                handleAddVertex(vertexName, getSelectedPackageKey());\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){\r\n                    console.log(e);\r\n                }\r\n                this.setState({showMenu: false});\r\n                createSaveState();\r\n            }\r\n            else if(menuType === \"AddGraph\"){\r\n                \r\n                let graphName = document.getElementById(\"GraphNameBox\").value;\r\n                handleAddGraph(graphName, getSelectedPackageKey());\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){\r\n                    console.log(e);\r\n                }\r\n                this.setState({showMenu: false});\r\n                createSaveState();\r\n            }\r\n            else if(menuType === \"AddPackage\"){\r\n                \r\n                let packageName = document.getElementById(\"PackageNameBox\").value;\r\n                handleAddPackage(packageName, getSelectedPackageKey());\r\n                try{\r\n                this.props.setLeftMenuToTree();\r\n                }\r\n                catch(e){\r\n                    console.log(e);\r\n                }\r\n                this.setState({showMenu: false});\r\n                createSaveState();\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    handleContextMenu = (e) => {\r\n        e.preventDefault();//prevent default stops the regular contextmenu from appearing\r\n\r\n        /*as alot of the \"data\" is in the back end and not in the html element displayed,\r\n         we need to simulate a left click to actually select what were right clicking on in the background \r\n         */\r\n        e.target.click();\r\n\r\n        menuType = \"Default\"; //reset the menu type\r\n        rightClickedItem = \"Default\" //reset the selected item\r\n        rightClickedItemKey = 0 //reset the index\r\n        rightClickedObject = null; // reset the object\r\n        \r\n\r\n\r\n        //If target is tree node\r\n        if(e.target.className === \"jstree-anchor jstree-hovered jstree-clicked\"){\r\n            //if target is existing package, load the package menu\r\n            if(e.target.text.includes(getPackageIcon())){\r\n                for(let packages of getPackageData()){\r\n                    if(e.target.text === packages.text){\r\n                        menuType = \"Package\"\r\n                        rightClickedItem = e.target.text;\r\n                        rightClickedItemKey = getSelectedPackageKey();\r\n                    }\r\n                }\r\n            }\r\n\r\n            //if target is existing graph, load graph menu\r\n            if(e.target.text.includes(getGraphIcon())){\r\n                for(let graph of getGraphData()){\r\n                    if(e.target.text === graph.text){\r\n                        menuType = \"Graph\"\r\n                        rightClickedItem = e.target.text;\r\n                        rightClickedItemKey = getCurrentGraph();\r\n                    }\r\n                }\r\n            }\r\n            //if target is existing vertex load vertex menu\r\n            if(e.target.text.includes(getTreeVertexEmptyIcon()) || e.target.text.includes(getTreeVertexFullIcon())){\r\n                for(let vertex of getVertexData()){\r\n                    if(e.target.text === vertex.text){\r\n                        menuType = \"Vertex\"\r\n                        rightClickedObject = vertex;\r\n                        rightClickedItem = e.target.text;\r\n                        rightClickedItemKey = getSelectedPackageKey();\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(e.target.text === \"Root\"){\r\n                \r\n                menuType = \"Root\"\r\n                rightClickedItem = e.target.text;\r\n                rightClickedItemKey = getSelectedPackageKey();\r\n            }\r\n            \r\n        }\r\n\r\n        \r\n        // if target exists within the canvas\r\n        if(e.target.id ===\"drawCanvas\"){\r\n            let position = getGraphXYFromMouseEvent(e);\r\n            let x = position[0]; let y = position[1];\r\n            rightClickedObject = findIntersected(x, y);\r\n            if(rightClickedObject !== null){\r\n                if(rightClickedObject.typeName === \"Vertex\"){\r\n                    rightClickedItem = rightClickedObject.title\r\n                    if(rightClickedObject.isContainer === true){\r\n                        menuType = \"Container\"\r\n                    }\r\n                    else{\r\n                        menuType = \"CanvasVertex\"\r\n                    }\r\n                    \r\n                }\r\n                else if(rightClickedObject.typeName === \"Arrow\"){\r\n                    let source = getObjectFromUUID(rightClickedObject.sourceVertexUUID);\r\n                    let dest = getObjectFromUUID(rightClickedObject.destVertexUUID);\r\n                    let sourceName = source.title;\r\n                    let destName = dest.title;\r\n                    rightClickedItem = \"Arrow from \" + sourceName + \" to \" + destName\r\n                    menuType = \"Arrow\"\r\n                }\r\n            }\r\n            \r\n        }\r\n        this.setState({\r\n            xPos: `${e.pageX}px`,\r\n            yPos: `${e.pageY}px`,\r\n            showMenu: true,\r\n          });\r\n        \r\n    };\r\n    \r\n\r\n    render() {\r\n        const { showMenu, yPos, xPos } = this.state;\r\n        if (showMenu){\r\n            if(menuType === \"Default\"){\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\">Default</div>   \r\n\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Package\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"><b>{rightClickedItem}</b></div>   \r\n                    <div className=\"CMitem\" id=\"Rename\"> Rename</div>\r\n                    <div className=\"CMitem\" id=\"AddVertex\"> Add Vertex</div>\r\n                    <div className=\"CMitem\" id=\"AddGraph\"> Add Graph</div>\r\n                    <div className=\"CMitem\" id=\"AddPackage\"> Add Package</div>\r\n                    <div className=\"CMitem\" id=\"DeletePackage\"> Delete Package</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Root\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"><b>{rightClickedItem}</b></div>   \r\n                    <div className=\"CMitem\" id=\"AddPackage\"> Add Package</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"DeletePackage\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"><b>Are you sure you wish to delete: {rightClickedItem}</b></div>   \r\n                    <div className=\"CMitem\" id=\"DeletePackageConfirmed\"> Yes, Delete this package</div>\r\n                    <div className=\"CMitem\" id=\"DeletePackageCancel\"> No</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"DeleteGraph\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"><b>Are you sure you wish to delete: {rightClickedItem}</b></div>   \r\n                    <div className=\"CMitem\" id=\"DeleteGraphConfirmed\"> Yes, Delete this graph</div>\r\n                    <div className=\"CMitem\" id=\"DeleteGraphCancel\"> No</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"DeleteVertex\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"><b>Are you sure you wish to delete: {rightClickedItem}</b></div>   \r\n                    <div className=\"CMitem\" id=\"DeleteVertexConfirmed\"> Yes, Delete this vertex</div>\r\n                    <div className=\"CMitem\" id=\"DeleteVertexCancel\"> No</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Graph\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <div className=\"CMitem\" id=\"RenameGraph\"> Rename </div>\r\n                    <div className=\"CMitem\" id=\"MoveGraph\"> Move To </div>\r\n                    <div className=\"CMitem\" id=\"DeleteGraph\"> Delete Graph </div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"MoveGraph\"){\r\n\r\n                let renderedOutput = getPackageData().map(item => <div className=\"CMitem\" id={\"Package\"+ item.containerKey} key={item.text}> {item.text} </div>);\r\n\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> Move \"<b>{rightClickedItem}</b>\" To:</div>   \r\n                    <div>{renderedOutput}</div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Rename\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"RenameBox\" type=\"text\" name=\"renameItem\" placeholder='New Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"RenameGraph\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"RenameGraphBox\" type=\"text\" name=\"renameItem\" placeholder='New Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"RenameVertex\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"RenameVertexBox\" type=\"text\" name=\"renameItem\" placeholder='New Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"AddVertex\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"VertexNameBox\" type=\"text\" name=\"nameVertex\" placeholder='Vertex Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"AddPackage\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"PackageNameBox\" type=\"text\" name=\"namePackage\" placeholder='Package Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"AddGraph\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <input className=\"CMText\" id=\"GraphNameBox\" type=\"text\" name=\"nameGraph\" placeholder='Graph Name'/>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"Vertex\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>\r\n                    <div className=\"CMitem\" id=\"Bi-Nav\"> Naviagte </div>   \r\n                    <div className=\"CMitem\" id=\"RenameVertex\"> Rename</div>\r\n                    <div className=\"CMitem\" id=\"AddVertex\"> Add Vertex</div>\r\n                    <div className=\"CMitem\" id=\"AddGraph\"> Add Graph</div>\r\n                    <div className=\"CMitem\" id=\"AddPackage\"> Add Package</div>\r\n                    <div className=\"CMitem\" id=\"DeleteVertex\"> Delete Vertex </div>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            else if(menuType === \"Arrow\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <div className=\"CMitem\" id=\"Auto-Layout\"> Auto-Layout option (not implemented) </div>\r\n                    </div>\r\n                )\r\n            }\r\n            else if(menuType === \"CanvasVertex\"){\r\n                return (\r\n\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> </div>   \r\n                    <div className=\"CMitem\" id=\"Auto-Layout\"> Auto-Layout option (not implemented) </div>\r\n                    <div className=\"CMitem\" id=\"Bi-Nav\"> Naviagte </div>\r\n                    </div>\r\n                )\r\n            }\r\n           \r\n            else if(menuType === \"Bi-Nav\"){\r\n\r\n                let matchingContainers = [];\r\n                let matchingGraphs = [];\r\n                let matchingUUID = 0;\r\n\r\n                matchingUUID = rightClickedObject.originalUUID;\r\n                //If undefined, then a treeview vertex is selected\r\n                if(matchingUUID === undefined){\r\n                    matchingUUID = rightClickedObject.semanticIdentity.UUID\r\n                }\r\n\r\n                for(let vert of getCurrentObjects().rootVertices){\r\n                    if(vert.vertex.originalUUID === matchingUUID){\r\n                        matchingContainers.push(vert)\r\n                    }\r\n                }\r\n                for(let graph of getGraphData()){\r\n                    if(graph.semanticIdentity.UUID === matchingUUID){\r\n                        matchingGraphs.push(graph)\r\n                    }\r\n                }\r\n\r\n                let renderedContainers = matchingContainers.map(item => <div className=\"CMitem\" id={'Nav'+ item.vertex.vertexGraphKey + \" \" + item.vertex.vertexContainerKey} key={'Nav'+ item.vertex.semanticIdentity.UUID + \" \" + item.vertex.awayx}> {getGraphNameFromKey(item.vertex.vertexGraphKey)} / {item.vertex.title} </div>)\r\n                let renderedGraphs = matchingGraphs.map(item => <div className=\"CMitem\" id={'Nav'+ item.graphKey + \" \" + item.containerKey} key={'Nav'+ item.semanticIdentity.UUID}> {item.text}</div>)\r\n                \r\n\r\n                return (\r\n\r\n                //options are given classnames to identify what has been selected\r\n                    <div className=\"ContextMenu\" style={{top: yPos,left: xPos,}}>\r\n                    <div className=\"CMSelected\" id=\"CMSelected\"> <b>{rightClickedItem}</b> also appears at:</div>   \r\n                    <div>{renderedContainers}</div>\r\n                    <div>{renderedGraphs}</div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n    else return null;\r\n  }\r\n}\r\n","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n* License, v. 2.0. If a copy of the MPL was not distributed with this\r\n* file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\nimport '../App.css';\r\nimport * as canvasDraw from \"./CanvasDraw\";\r\nimport { DropdownButton, Dropdown } from \"react-bootstrap\";\r\nimport { Canvas } from './Canvas';\r\nimport { LeftMenu, LeftMenuType, StringToLeftMenuType, Tool } from './LeftMenu';\r\nimport SemanticDomainEditor from \"./SemanticDomainEditor\";\r\nimport { resetRows } from \"./SemanticDomainEditor\";\r\nimport { ContextMenu } from './ContextMenu'\r\nimport { save, load, importLoad, undo, redo } from '../Serialisation/NewFileManager'\r\nimport iconRedo from \"../Resources/redo.svg\"\r\nimport iconUndo from \"../Resources/undo.svg\"\r\nimport iconHelp from \"../Resources/help.svg\"\r\n\r\n\r\n\r\nexport const version = 1;\r\nexport const serverURL = 'http://localhost:8080'\r\n\r\n\r\nexport class MainProgramClass extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            zoomLevel: 200,\r\n            drawMode: Tool.Vertex,\r\n            menu: LeftMenuType.TreeView,\r\n            selectedObject: null,\r\n        };\r\n\r\n        this.setMode = this.setMode.bind(this);\r\n        this.setLeftMenu = this.setLeftMenu.bind(this);\r\n        this.setLeftMenuToTree = this.setLeftMenuToTree.bind(this);\r\n        this.semanticTableEnabled = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setMode(Tool.Select);\r\n        console.log(\"Mounted\");\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        let div = document.getElementById(prevState.SelectedTool);\r\n        if (div !== null) {\r\n            div.style.backgroundColor = \"#FFFFFF\";\r\n        }\r\n        div = document.getElementById(this.state.SelectedTool);\r\n        div.style.backgroundColor = \"#CFFFFF\";\r\n    }\r\n\r\n    zoom = (type) => {\r\n        let cZoom = this.state.zoomLevel;\r\n        if (type === \"+\") {\r\n            if (this.state.zoomLevel < 500) {\r\n                this.setState({ zoomLevel: cZoom += 25 });\r\n                canvasDraw.setZoom(cZoom);\r\n            }\r\n        } else if (type === \"-\") {\r\n            if (this.state.zoomLevel > 100) {\r\n                this.setState({ zoomLevel: cZoom -= 25 });\r\n                canvasDraw.setZoom(cZoom);\r\n            }\r\n        } else {\r\n            console.log(\"Invalid Zoom Type\")\r\n        }\r\n    };\r\n\r\n    setMode(mode) {\r\n\r\n        if (mode === Tool.Visibility || mode === Tool.Edge || mode === Tool.Specialisation) {\r\n            this.setState({ drawMode: \"Arrow\" })\r\n        } else if (mode === Tool.Vertex) {\r\n            this.setState({ drawMode: \"Vertex\" })\r\n        } else if (mode === Tool.Select) {\r\n            this.setState({ drawMode: \"Select\" })\r\n        } else if (mode === Tool.Artifact) {\r\n            this.setState({ drawMode: \"Artifact\" })\r\n        } else if (mode === Tool.Container) {\r\n            this.setState({ drawMode: \"Container\" })\r\n        }\r\n\r\n        this.setState({ SelectedTool: Tool[mode] });\r\n\r\n        canvasDraw.setArrowType(mode)\r\n    };\r\n\r\n    // chooses which left hand menu to display, based on the selected item\r\n    setLeftMenu(nearestObject, ctrl = false, OP = []) {\r\n\r\n        if (OP !== null) {\r\n            for (let i = 0; i < OP.length; i++) {\r\n                //visually deselects elements\r\n                OP[i].setSelected(false);\r\n            }\r\n        }\r\n        // checks if that specific object was clicked\r\n        // if it wasn't then deselect it\r\n        // i.e. determines if objects are selected or not\r\n        if (this.state.selectedObject !== null && ctrl === false) {\r\n            this.state.selectedObject.setSelected(false);\r\n\r\n        }\r\n\r\n        // check if the nearest object was too far away or didnt exist\r\n        if (nearestObject === null) {\r\n            this.setState({\r\n                menu: LeftMenuType.TreeView,\r\n                selectedObject: null,\r\n            });\r\n        }\r\n\r\n        // if the selected object has a left menu,\r\n        else if (StringToLeftMenuType[nearestObject.typeName] !== null) {\r\n            this.setState({\r\n                menu: nearestObject.typeName,\r\n                selectedObject: nearestObject\r\n            });\r\n            nearestObject.setSelected(true);\r\n        } else {\r\n            if (this.state.selectedObject !== null) {\r\n                canvasDraw.drawAll();\r\n            }\r\n            this.setState({\r\n                menu: LeftMenuType.TreeView,\r\n                selectedObject: null\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    //Function for setting left menu to tree\r\n    //This function serves as a direct way to \"setState\" the treeview menu\r\n    setLeftMenuToTree() {\r\n        if (this.state.selectedObject !== null) {\r\n            canvasDraw.drawAll();\r\n        }\r\n        this.setState({\r\n            menu: LeftMenuType.None,\r\n        });\r\n        this.setState({\r\n            menu: LeftMenuType.TreeView,\r\n            selectedObject: null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function For Loading or Importing a File\r\n     * @param {string} loadOrImport \"Load\" / \"Import\"\r\n     */\r\n    loadImport(loadOrImport) {\r\n        let refreshTree = this.setLeftMenuToTree //This is used so we can point to setLeftMenuToTree within the reader object\r\n        if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n            try {\r\n                let file = null;\r\n                if (loadOrImport === \"Load\") {\r\n                    file = document.getElementById(\"File-Select\").files[0];\r\n                }\r\n                else if (loadOrImport === \"Import\") {\r\n                    file = document.getElementById('File-Select-Import').files[0];\r\n                }\r\n                let reader = new FileReader();\r\n                reader.readAsText(file);\r\n                reader.onload = function () {\r\n                    let text = reader.result\r\n                    if (loadOrImport === \"Load\") {\r\n                        load(text)\r\n                    }\r\n                    else if (loadOrImport === \"Import\") {\r\n                        importLoad(text)\r\n                    }\r\n                    refreshTree();\r\n                }\r\n            } catch (e) {\r\n                alert(e + \" did you select a file?\")\r\n            }\r\n        } else {\r\n            alert(\"Your browser is too old to support HTML5 File API\");\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // Method For Loading a File\r\n    showFile = () => {\r\n        this.loadImport(\"Load\");\r\n    }\r\n\r\n\r\n    //Method For Importing a File\r\n    importFile = () => {\r\n        this.loadImport(\"Import\");\r\n    };\r\n\r\n\r\n\r\n    // Used to enable/disable the semantic domain editor\r\n    toggleSemanticDomainState = () => {\r\n        if (this.semanticTableEnabled) {\r\n            this.semanticTableEnabled = false;\r\n            canvasDraw.drawAll();\r\n            this.setState(this.state);\r\n            console.log(\"Semantic Domain disabled\");\r\n        } else {\r\n            this.semanticTableEnabled = true;\r\n            resetRows();\r\n            this.setState(this.state);\r\n            console.log(\"Semantic Domain enabled\");\r\n        }\r\n    };\r\n\r\n    async mainUndo() {\r\n        await undo();\r\n        this.setLeftMenuToTree();\r\n\r\n    }\r\n\r\n    async mainRedo() {\r\n        await redo();\r\n        this.setLeftMenuToTree();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let GUI =\r\n            <><ContextMenu setLeftMenuToTree={this.setLeftMenuToTree} /><div className=\"Program\">\r\n                <div className={this.semanticTableEnabled ? \"SemanticDomain\" : \"hidden\"}>\r\n                    <SemanticDomainEditor />\r\n                </div>\r\n\r\n                <div className=\"TopMenus\">\r\n\r\n                    <DropdownButton variant=\"Primary\" id=\"File-Menu\" title=\"File\" size=\"lg\">\r\n\r\n                        <Dropdown.Item>\r\n                            <div className=\"TopBar\">\r\n                                <button id=\"file\" onClick={() => canvasDraw.newFile()}>New File</button>\r\n                            </div>\r\n                        </Dropdown.Item>\r\n\r\n                        <Dropdown.Item>\r\n                            <div className=\"TopBar\">\r\n                                <button id=\"downloader\" onClick={() => canvasDraw.getDownload()} download=\"image.png\">Export as .png</button>\r\n                            </div>\r\n                        </Dropdown.Item>\r\n\r\n                        <div className=\"TopBar\">\r\n                            <label>Load</label>\r\n                            <input type=\"file\" id=\"File-Select\" onChange={this.showFile} />\r\n                        </div>\r\n\r\n                        <div className=\"TopBar\">\r\n                            <label>Import</label>\r\n                            <input type=\"file\" id=\"File-Select-Import\" onChange={this.importFile} />\r\n                        </div>\r\n\r\n                        <Dropdown.Item>\r\n                            <div className=\"TopBar\">\r\n                                <button id=\"json-downloader\" onClick={() => save()}>Save (as Json)</button>\r\n                            </div>\r\n                        </Dropdown.Item>\r\n\r\n                    </DropdownButton>\r\n\r\n                    <div className=\"TopBar\" onClick={() => this.toggleSemanticDomainState()}>Semantic Editor</div>\r\n\r\n\r\n                    <input className=\"SelectedGraph\" id=\"SelectedGraph\" type=\"text\" name=\"selectedGraph\" readOnly='readonly' />\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.zoom('-')}> - </div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.zoom('+')}> + </div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.mainUndo()} ><img src={iconUndo} alt=\"Delete Container\" /></div>\r\n                    <div className=\"TopBarIcon\" onClick={() => this.mainRedo()} ><img src={iconRedo} alt=\"Add Container\" /></div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarSpace\">&nbsp;</div>\r\n                    <div className=\"TopBarIcon\" ><a href=\"UserManual.pdf\"><img src={iconHelp} alt=\"Help\" /></a></div>\r\n\r\n                </div>\r\n\r\n                <div className=\"LowerPanel\" id=\"LowerPanel\">\r\n                    <LeftMenu setMode={this.setMode} setLeftMenu={this.setLeftMenu} mainState={this.state} className=\"LeftMenus\" />\r\n                    <div className=\"Canvas\" id=\"Canvas\">\r\n                        <Canvas setLeftMenu={this.setLeftMenu} setMode={this.setMode} mainState={this.state} />\r\n                    </div>\r\n                </div>\r\n            </div></>;\r\n        return GUI\r\n    }\r\n}","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as ServiceWorker from './ServiceWorker';\r\nimport {MainProgramClass} from './UIElements/MainView';\r\nimport {assignElement} from \"./UIElements/CanvasDraw\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nReactDOM.render(<MainProgramClass />,document.getElementById(\"program\"));\r\nassignElement(\"drawCanvas\");\r\n\r\n// save to server every interval\r\n\r\n\r\n//setInterval(() => {\r\n//    let data = JSON.stringify(getSaveData());\r\n//\r\n//    fetch('http://localhost:8080/serialisation/save',{\r\n//        method:'POST',\r\n//        headers: {\r\n//            'Accept': '*/*',\r\n//            'Content-Type': 'application/json',\r\n//            'Content-Length':data.length\r\n//        },\r\n//        body: data\r\n//    });\r\n//},60000);\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nServiceWorker.unregister();\r\n\r\n"],"sourceRoot":""}